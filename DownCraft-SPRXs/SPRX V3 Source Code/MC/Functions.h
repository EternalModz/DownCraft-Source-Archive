

#pragma region "Offsets"

enum Offsets
{
	IsInWorld = 0x3000CF6B,
	Player_Name = 0x3000ABE4,
	Whitelist = 0x3000AD34,
	LockControl = 0x0155847C,

	//Split//
	Split_Screen = 0x00AEF9F0,
	Split_DrawText = 0x30FB2331,
	Split_Color_Text = 0x31E72950,
	SplitController = 0x31E7239C,
	Split_Shader_Shadow = 0x31E7281C,
	Split_HUD = 0x31E71F1C,
	Split_Text_Position = 0x31E7290C,
	Split_BG_Colors = 0x31E71F60,
	Split_Shader_White = 0x31E7272C,
	Split_Fix_Text = 0x00887E3B,
	Split_Hud_Bar = 0x31E7517C,
	//

	ScrollBar_Shader = 0x31E74F0C,
	Scrollbar_Colors = 0x31E74F50,
	Scrollbar_Toggle = 0x31E74F20,
	//

};

#pragma endregion

#pragma region "LOOP OPTIONS FUNCS"

void FAKE_LAG()
{
	if (FakeLag == true)
	{
		char MODS[] = { 0x3F, 0x50 };
		write_process(0x00C202C8, &MODS, sizeof(MODS));

		char MODS1[] = { 0x3F, 0x51 };
		write_process(0x00C202C8, &MODS1, sizeof(MODS1));
	}
	else
	{
		char MODS[] = { 0x3F, 0x50 };
		write_process(0x00C202C8, &MODS, sizeof(MODS));
	}
}

void WALK_WITH_INVENTORY()
{
	if (WalkWithInventory == true)
	{
		char MODS[] = { 0x00 };
		write_process(0x3000CF68, &MODS, sizeof(MODS));
	}
	else
	{

	}
}

void ALL_PLAYERS_ZOOM_FOV()
{
	if (AllPlayersZoomFOV == true)
	{
		char MODS[] = { 0x78 };
		char MODS1[] = { 0x08 };

		write_process(0x004668B6, &MODS, sizeof(MODS));
		write_process(0x004668B6, &MODS, sizeof(MODS));
		write_process(0x004668B6, &MODS1, sizeof(MODS1));
		write_process(0x004668B6, &MODS1, sizeof(MODS1));
	}
	else
	{

	}
}

#pragma endregion

#pragma region "FUNCS FOR MENU"

//HUD FUNCS
void DrawHud(float width, float height, float x, float y)
{
	PS3Lib::WriteSingleFloat(0x31E71F1C, width);
	PS3Lib::WriteSingleFloat(0x31E71F28, height);
	PS3Lib::WriteSingleFloat(0x31E71F2C, x);
	PS3Lib::WriteSingleFloat(0x31E71F30, y);
}

void DrawHudColor(float R, float G, float B, float A)
{
	PS3Lib::WriteSingleFloat(0x31E71F60, R);
	PS3Lib::WriteSingleFloat(0x31E71F64, G);
	PS3Lib::WriteSingleFloat(0x31E71F68, B);
	PS3Lib::WriteSingleFloat(0x31E71F6C, A);
}

//TEXT FUNCS
void DrawText(float width, float height, float x, float y)
{
	PS3Lib::WriteSingleFloat(0x31E7290C, width);
	PS3Lib::WriteSingleFloat(0x31E72918, height);
	PS3Lib::WriteSingleFloat(0x31E7291C, x);
	PS3Lib::WriteSingleFloat(0x31E72920, y);
}

void DrawTextColor(float R, float G, float B, float A)
{
	PS3Lib::WriteSingleFloat(0x31E72950, R);
	PS3Lib::WriteSingleFloat(0x31E72954, G);
	PS3Lib::WriteSingleFloat(0x31E72958, B);
	PS3Lib::WriteSingleFloat(0x31E7295C, A);
}


//SCROLL FUNCS
void DrawScrollbar(float width, float height, float x, float y)
{
	PS3Lib::WriteSingleFloat(0x31E74F0C, width);
	PS3Lib::WriteSingleFloat(0x31E74F18, height);
	PS3Lib::WriteSingleFloat(0x31E74F1C, x);
	PS3Lib::WriteSingleFloat(0x31E74F20, y);
}

void NewDrawScrollBar(float width, float height, float x)
{
	PS3Lib::WriteSingleFloat(0x31E74F0C, width);
	PS3Lib::WriteSingleFloat(0x31E74F18, height);
	PS3Lib::WriteSingleFloat(0x31E74F1C, x);
}


void DrawScrollbarColor(float R, float G, float B, float A)
{
	PS3Lib::WriteSingleFloat(0x31E74F50, R);
	PS3Lib::WriteSingleFloat(0x31E74F54, G);
	PS3Lib::WriteSingleFloat(0x31E74F58, B);
	PS3Lib::WriteSingleFloat(0x31E74F5C, A);
}


//Title Hud
void DrawTitle(float width, float height, float x, float y)
{
	PS3Lib::WriteSingleFloat(0x31E7281C, width);
	PS3Lib::WriteSingleFloat(0x31E72828, height);
	PS3Lib::WriteSingleFloat(0x31E7282C, x);
	PS3Lib::WriteSingleFloat(0x31E72830, y);
}

void DrawTitleColor(float R, float G, float B, float A)
{
	PS3Lib::WriteSingleFloat(0x31E72860, R);
	PS3Lib::WriteSingleFloat(0x31E72864, G);
	PS3Lib::WriteSingleFloat(0x31E72868, B);
	PS3Lib::WriteSingleFloat(0x31E7286C, A);
}

//New line (Box White)
void DrawLine(float width, float height, float x, float y)
{
	PS3Lib::WriteSingleFloat(0x31E7517C, width);
	PS3Lib::WriteSingleFloat(0x31E75188, height);
	PS3Lib::WriteSingleFloat(0x31E7518C, x);
	PS3Lib::WriteSingleFloat(0x31E75190, y);
}

void DrawLineColor(float R, float G, float B, float A)
{
	PS3Lib::WriteSingleFloat(0x31E751C0, R);
	PS3Lib::WriteSingleFloat(0x31E751C4, G);
	PS3Lib::WriteSingleFloat(0x31E751C8, B);
	PS3Lib::WriteSingleFloat(0x31E751CC, A);
}

#pragma endregion

#pragma region "MICS FUNCTIONS"

void WHITELIST()
{
	char hex[] = { 0x41, 0x73, 0x69, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x49, 0x74 };

	char* addr = (char*)0x3000AD34;
	WhitelistCheck = true;
	for (int i = 0; i < 11; ++i)
	{
		if (addr[i] != hex[i])
		{
			WhitelistCheck = false;
		}
	}
}

void SLIDE_ANIM()
{
	//Slide Animation Open
	for (float i = -600; i <= -11; i += 5)
	{
		*(float*)(0x31E71F2C) = i;
		sleep(1);
	}
	sleep(100);
}

void BEDROCK_UI()
{
	*(int*)0x31E7879C = 0x42800000;
	*(int*)0x31E787A0 = 0x44158000;
	*(int*)0x31F4D3D0 = 0x42B00000;
	*(int*)0x31E788CC = 0x44850000;
	*(int*)0x00A891D0 = 0xC1505C29;
	*(int*)0x31F4D2A0 = 0x42540000;
	*(int*)0x31F4D170 = 0x42540000;
	*(int*)0x31F4D500 = 0x42940000;
	*(int*)0x31E78A4C = 0x44848000;
	*(int*)0x31E78A50 = 0x44158000;
	*(int*)0x31E78B7C = 0x44848000;
	*(int*)0x31E78B80 = 0x44078000;
}

void setLocation(float x, float y, float z, bool noFallDamage)
{
	double xyz1[3] = { x, y, z };
	double xyz2[3] = { x + .6, y + 1.8, z + .6 };
	int theMc = *(int*)0x014CF2E4;
	int localUser = *(int*)(theMc + 0x44);
	int pos = *(int*)(localUser + 0x158);
	int multiJump = 0x00227908;
	if (noFallDamage)
		*(int*)multiJump = 0x41820028;
	int count8 = 0;

	*(double*)(pos + (count8++ * 8)) = xyz1[0];
	*(double*)(pos + (count8++ * 8)) = xyz1[1];
	*(double*)(pos + (count8++ * 8)) = xyz1[2];
	*(double*)(pos + (count8++ * 8)) = xyz2[0];
	*(double*)(pos + (count8++ * 8)) = xyz2[1];
	*(double*)(pos + (count8++ * 8)) = xyz2[2];
}

float colorR = 255, colorG = 0, colorB = 0;

void DoColors() 
{
	if (colorR > 0 && colorB == 0)
	{
		colorR -= 1;
		colorG += 1;
	}
	if (colorG > 0 && colorR == 0)
	{
		colorG -= 1;
		colorB += 1;
	}
	if (colorB > 0 && colorG == 0)
	{
		colorR += 1;
		colorB -= 1;
	}
}

uint32_t colorDo;

void RGB_Background()
{
	colorDo += 1;
	if (colorDo == 30)
	{
		DoColors();
		colorDo = 0;
	}

	*(float*)(0x31E74F50) = colorR / 255.0f;
	*(float*)(0x31E74F54) = colorG / 255.0f;
	*(float*)(0x31E74F58) = colorB / 255.0f;
	sleep(1);
}

void RGB_HUD()
{
	colorDo += 1;
	if (colorDo == 30)
	{
		DoColors();
		colorDo = 0;
	}

	*(float*)(0x30DBAD64) = colorR / 255.0f;
	*(float*)(0x30DBAD68) = colorG / 255.0f;
	*(float*)(0x30DBAD6C) = colorB / 255.0f;
	sleep(1);
}

void RESET_RGB_HUD()
{
	*(int*)0x30DBAD64 = 0x3F800000;
	*(int*)0x30DBAD68 = 0x3F800000;
	*(int*)0x30DBAD6C = 0x3F800000;
}

void NAME_CHANGER()
{
	WriteMemoryBytes8(0x3000ABE4, 0x0000000000000000);
	WriteMemoryBytes8(0x3000ABEC, 0x0000000000000000);

	sleep(50);

	char Name[16];

	Keyboard::oskdialog_mode = Keyboard::MODE_OPEN;
	while (Keyboard::oskdialog_mode != Keyboard::MODE_EXIT)
	{
		Keyboard::keyboard(Name, L"", L"DownCraft SPRX ~ Name Changer  | Enter your new name here:");
	}

	strcpy((char*)Player_Name, Name);
	return;
}

void NAME_GLITCHED()
{
	char* NAME = PS3Lib::ReadString(0x3000ABE4); //get name
	int strlength = std::strlen(NAME); //get number in name in int

	if (strlength == 4) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABE8, &HEX, sizeof(HEX));
	}

	if (strlength == 5) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABE9, &HEX, sizeof(HEX));
	}

	if (strlength == 6) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABEA, &HEX, sizeof(HEX));
	}

	if (strlength == 7) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABEB, &HEX, sizeof(HEX));
	}

	if (strlength == 8) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABEC, &HEX, sizeof(HEX));
	}

	if (strlength == 9) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABED, &HEX, sizeof(HEX));
	}

	if (strlength == 10) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABEE, &HEX, sizeof(HEX));
	}

	if (strlength == 11) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABEF, &HEX, sizeof(HEX));
	}

	if (strlength == 12) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABF0, &HEX, sizeof(HEX));
	}

	if (strlength == 13) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABF1, &HEX, sizeof(HEX));
	}

	if (strlength == 14) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABF2, &HEX, sizeof(HEX));
	}

	if (strlength == 15) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABF3, &HEX, sizeof(HEX));
	}

	if (strlength == 16) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABF4, &HEX, sizeof(HEX));
	}
}

void NAME_CHANGER_COLORED()
{
	char Name[16];

	Keyboard::oskdialog_mode = Keyboard::MODE_OPEN;
	while (Keyboard::oskdialog_mode != Keyboard::MODE_EXIT)
	{
		Keyboard::keyboard(Name, L"", L"Colors: 0 = BLACK, 9 = BLUE, a = GREEN, b = AQUA, c = RED, d = LIGHT PURPLE, e = YELLOW, 6 = GOLD");
	}

	char NAME[] = { 0xC2, 0xA7 };
	write_process(0x3000ABE4, &NAME, sizeof(NAME));

	strcpy((char*)0x3000ABE6, Name); //<== Name Offset
	return;
}

void NAME_CHANGER_LINES()
{
	char Name[16];

	Keyboard::oskdialog_mode = Keyboard::MODE_OPEN;
	while (Keyboard::oskdialog_mode != Keyboard::MODE_EXIT)
	{
		Keyboard::keyboard(Name, L"", L"Name Changer Lines");
	}

	char NAME[] = { 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A };
	write_process(0x3000ABE4, &NAME, sizeof(NAME));

	strcpy((char*)0x3000ABEE, Name); //<== Name Offset
	return;
}

bool InWorld()
{
	return !(*(char*)IsInWorld != 0);
}

void OPTION_TOGGLE(bool toggle)
{
	if (toggle)
	{
		WriteMemoryByte(0x3000AAFC, 0x4F);
		sleep(500);
		WriteMemoryByte(0x3000AAFC, 0x3F);
	}
	else
	{
		WriteMemoryByte(0x3000AAF8, 0x4F);
		sleep(500);
		WriteMemoryByte(0x3000AAF8, 0x3F);
	}
}


void INITIALIZE_START()
{
	sleep(30000);

	strcpy((char*)0x320E8410, "Alone - DownCraft SPRX Premium V3");
	strcpy((char*)0x320E89E0, "Multiplayer - DownCraft SPRX Premium V3");
	//Show actualy game states = 0x017003D8

	WriteMemoryByte(0x00887E3B, 0x00);

	DrawScrollbarColor(4.29497e+09, 1, 1, 1.18744e-07);
	DrawHudColor(6.70532e-30, 1.26218e-29, 1.26218e-29, 1.74219);
	DrawTextColor(1, 1, 1, 4.29497e+09);
	DrawTitleColor(4.29497e+09, 1, 1, 1.18744e-07);
	DrawLineColor(4.29497e+09, 1, 1, 0.0311279);

	//using for move shader we don't need
	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	sleep(2000);

	Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
	Dialog::ProgressBar("Press SELECT + START\nfor change your name in menu", "DownCraft SPRX", 5);

	//add glitched name auto
	char* NAME = PS3Lib::ReadString(0x3000ABE4); //get name
	int strlength = std::strlen(NAME); //get number in name in int

	if (strlength == 4) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABE8, &HEX, sizeof(HEX));
	}

	if (strlength == 5) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABE9, &HEX, sizeof(HEX));
	}

	if (strlength == 6) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABEA, &HEX, sizeof(HEX));
	}

	if (strlength == 7) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABEB, &HEX, sizeof(HEX));
	}

	if (strlength == 8) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABEC, &HEX, sizeof(HEX));
	}

	if (strlength == 9) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABED, &HEX, sizeof(HEX));
	}

	if (strlength == 10) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABEE, &HEX, sizeof(HEX));
	}

	if (strlength == 11) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABEF, &HEX, sizeof(HEX));
	}

	if (strlength == 12) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABF0, &HEX, sizeof(HEX));
	}

	if (strlength == 13) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABF1, &HEX, sizeof(HEX));
	}

	if (strlength == 14) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABF2, &HEX, sizeof(HEX));
	}

	if (strlength == 15) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABF3, &HEX, sizeof(HEX));
	}

	if (strlength == 16) {
		char HEX[] = { 0xC2, 0xA7, 0x33 };
		write_process(0x3000ABF4, &HEX, sizeof(HEX));
	}
}



void BAR_INSTRUCTION(bool toggle)
{
	if (toggle)
	{
		DrawScrollbar(0.558594, 0.40625, 133.438, -500);
		DrawTitle(4.03125, 0.960935, -260, -500);
		DrawLine(6.1875, 0.0703141, 940.75, 772);

		DrawHud(4, 0.625, 370, 330);
		DrawText(1, 1, 201, 312);

		*(char*)0x0155847C = 0x00;
		*(char*)0x00AEF9F0 = 0x40;

		char TEXTS[] = { 0x50, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x31, 0x00, 0x20, 0x00, 0x2B, 0x00, 0x20, 0x00, 0x55, 0x00, 0x50, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		DrawLine(0, 0, 0, 0);
	}
}

void GET64ITEMS()
{
	char HEX[] = { 0x40 };
	char HEX1[] = { 0x01 };

	write_process(0x004B5DF3, &HEX1, sizeof(HEX1));
	write_process(0x323BB9DF, &HEX, sizeof(HEX));
	write_process(0x323BBACF, &HEX, sizeof(HEX));
	write_process(0x323BBBBF, &HEX, sizeof(HEX));
	write_process(0x323BBCAF, &HEX, sizeof(HEX));
	write_process(0x323BBD9F, &HEX, sizeof(HEX));
	write_process(0x323BBEEF, &HEX, sizeof(HEX));
	write_process(0x323BC07F, &HEX, sizeof(HEX));
	write_process(0x323BC16F, &HEX, sizeof(HEX));
	write_process(0x323BC25F, &HEX, sizeof(HEX));
	write_process(0x323BC34F, &HEX, sizeof(HEX));
	write_process(0x323BC43F, &HEX, sizeof(HEX));
	write_process(0x323BC52F, &HEX, sizeof(HEX));
	write_process(0x323BC61F, &HEX, sizeof(HEX));
	write_process(0x323BC70F, &HEX, sizeof(HEX));
	write_process(0x323BC75F, &HEX, sizeof(HEX));
	write_process(0x323BC84F, &HEX, sizeof(HEX));
	write_process(0x323BC93F, &HEX, sizeof(HEX));
	write_process(0x323BCA2F, &HEX, sizeof(HEX));
	write_process(0x323BCB1F, &HEX, sizeof(HEX));
	write_process(0x323BCC0F, &HEX, sizeof(HEX));
	write_process(0x323BCCFF, &HEX, sizeof(HEX));
	write_process(0x323BCE8F, &HEX, sizeof(HEX));
	write_process(0x323BCF7F, &HEX, sizeof(HEX));
	write_process(0x323BD06F, &HEX, sizeof(HEX));
	write_process(0x323BD15F, &HEX, sizeof(HEX));
	write_process(0x323BD24F, &HEX, sizeof(HEX));
	write_process(0x323BD33F, &HEX, sizeof(HEX));
	write_process(0x323BD42F, &HEX, sizeof(HEX));
	write_process(0x323BD51F, &HEX, sizeof(HEX));
	write_process(0x323BD6BF, &HEX, sizeof(HEX));
	write_process(0x323BD7AF, &HEX, sizeof(HEX));
	write_process(0x323BD89F, &HEX, sizeof(HEX));
	write_process(0x323BD98F, &HEX, sizeof(HEX));
	write_process(0x323BDA7F, &HEX, sizeof(HEX));
	write_process(0x323BDB6F, &HEX, sizeof(HEX));
	write_process(0x323BDC5F, &HEX, sizeof(HEX));
	write_process(0x323BDD4F, &HEX, sizeof(HEX));
	write_process(0x323BDE3F, &HEX, sizeof(HEX));
	write_process(0x323BDF2F, &HEX, sizeof(HEX));
	write_process(0x323BE01F, &HEX, sizeof(HEX));
	write_process(0x323BE10F, &HEX, sizeof(HEX));
	write_process(0x323BE1FF, &HEX, sizeof(HEX));
	write_process(0x323BE2EF, &HEX, sizeof(HEX));
	write_process(0x323BE3DF, &HEX, sizeof(HEX));
	write_process(0x323BE4DF, &HEX, sizeof(HEX));
	write_process(0x323BE5CF, &HEX, sizeof(HEX));
	write_process(0x323BE6BF, &HEX, sizeof(HEX));
	write_process(0x323BE7AF, &HEX, sizeof(HEX));
	write_process(0x323BE89F, &HEX, sizeof(HEX));
	write_process(0x323BE98F, &HEX, sizeof(HEX));
	write_process(0x323BEA7F, &HEX, sizeof(HEX));
	write_process(0x323BEB6F, &HEX, sizeof(HEX));
	write_process(0x323BEC5F, &HEX, sizeof(HEX));
	write_process(0x323BED4F, &HEX, sizeof(HEX));
	write_process(0x323BEE3F, &HEX, sizeof(HEX));
	write_process(0x323BEF2F, &HEX, sizeof(HEX));
	write_process(0x323BF01F, &HEX, sizeof(HEX));
	write_process(0x323BF10F, &HEX, sizeof(HEX));
	write_process(0x323BF1FF, &HEX, sizeof(HEX));
	write_process(0x323BF2EF, &HEX, sizeof(HEX));
	write_process(0x323BF3DF, &HEX, sizeof(HEX));
	write_process(0x323BF4CF, &HEX, sizeof(HEX));
	write_process(0x323BF5BF, &HEX, sizeof(HEX));
	write_process(0x323BF6AF, &HEX, sizeof(HEX));
	write_process(0x323BF79F, &HEX, sizeof(HEX));
	write_process(0x323BF88F, &HEX, sizeof(HEX));
	write_process(0x323BF8DF, &HEX, sizeof(HEX));
	write_process(0x323BFA0F, &HEX, sizeof(HEX));
	write_process(0x323BFAFF, &HEX, sizeof(HEX));
	write_process(0x323BFBEF, &HEX, sizeof(HEX));
	write_process(0x323BFCDF, &HEX, sizeof(HEX));
	write_process(0x323BFDCF, &HEX, sizeof(HEX));
	write_process(0x323F1EEF, &HEX, sizeof(HEX));
	write_process(0x323F1F3F, &HEX, sizeof(HEX));
	write_process(0x323FBEEF, &HEX, sizeof(HEX));
	write_process(0x323FBFDF, &HEX, sizeof(HEX));
	write_process(0x323FC0CF, &HEX, sizeof(HEX));
	write_process(0x323FC1BF, &HEX, sizeof(HEX));
	write_process(0x323FC2AF, &HEX, sizeof(HEX));
	write_process(0x323FC39F, &HEX, sizeof(HEX));
	write_process(0x323FC48F, &HEX, sizeof(HEX));
	write_process(0x323FC57F, &HEX, sizeof(HEX));
	write_process(0x323FC66F, &HEX, sizeof(HEX));
	write_process(0x323FC75F, &HEX, sizeof(HEX));
	write_process(0x323FC84F, &HEX, sizeof(HEX));
	write_process(0x323FC93F, &HEX, sizeof(HEX));
	write_process(0x323FCA2F, &HEX, sizeof(HEX));
	write_process(0x323FCB1F, &HEX, sizeof(HEX));
	write_process(0x323FCC0F, &HEX, sizeof(HEX));
	write_process(0x323FCCFF, &HEX, sizeof(HEX));
	write_process(0x323FCDEF, &HEX, sizeof(HEX));
	write_process(0x323FCEDF, &HEX, sizeof(HEX));
	write_process(0x323FCFCF, &HEX, sizeof(HEX));
	write_process(0x323FD0BF, &HEX, sizeof(HEX));
	write_process(0x323FD1AF, &HEX, sizeof(HEX));
	write_process(0x323FD29F, &HEX, sizeof(HEX));
	write_process(0x323FD47F, &HEX, sizeof(HEX));
	write_process(0x323FD66F, &HEX, sizeof(HEX));
	write_process(0x323FD75F, &HEX, sizeof(HEX));
	write_process(0x323FD84F, &HEX, sizeof(HEX));
	write_process(0x32412D8F, &HEX, sizeof(HEX));
	write_process(0x32414C5F, &HEX, sizeof(HEX));
	write_process(0x32414D4F, &HEX, sizeof(HEX));
	write_process(0x32414E3F, &HEX, sizeof(HEX));
	write_process(0x32414F2F, &HEX, sizeof(HEX));
	write_process(0x3241501F, &HEX, sizeof(HEX));
	write_process(0x3241525F, &HEX, sizeof(HEX));
	write_process(0x3241534F, &HEX, sizeof(HEX));
	write_process(0x3241543F, &HEX, sizeof(HEX));
	write_process(0x3241552F, &HEX, sizeof(HEX));
	write_process(0x3241561F, &HEX, sizeof(HEX));
	write_process(0x3241570F, &HEX, sizeof(HEX));
	write_process(0x324157FF, &HEX, sizeof(HEX));
	write_process(0x324158EF, &HEX, sizeof(HEX));
	write_process(0x324159DF, &HEX, sizeof(HEX));
	write_process(0x32415ACF, &HEX, sizeof(HEX));
	write_process(0x32415FDF, &HEX, sizeof(HEX));
	write_process(0x324160CF, &HEX, sizeof(HEX));
	write_process(0x324161BF, &HEX, sizeof(HEX));
	write_process(0x324162AF, &HEX, sizeof(HEX));
	write_process(0x3241639F, &HEX, sizeof(HEX));
	write_process(0x3241648F, &HEX, sizeof(HEX));
	write_process(0x3241657F, &HEX, sizeof(HEX));
	write_process(0x3241666F, &HEX, sizeof(HEX));
	write_process(0x3241684F, &HEX, sizeof(HEX));
	write_process(0x32416B1F, &HEX, sizeof(HEX));
	write_process(0x32416C0F, &HEX, sizeof(HEX));
	write_process(0x3241710F, &HEX, sizeof(HEX));
	write_process(0x3241D95F, &HEX, sizeof(HEX));
}


#pragma endregion

#pragma region "PAGES"

void OpenMenu(bool toggle)
{
	if (toggle)
	{
		MainMenu = true;

		ScrollMainMenu = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//RESET HUD COLORS
		*(int*)0x30DBAD64 = 0x3F800000;
		*(int*)0x30DBAD68 = 0x3F800000;
		*(int*)0x30DBAD6C = 0x3F800000;

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -4.46875, -13, 74.5);
		DrawText(1, 1, -212, -158);
		DrawScrollbar(0.558594, 0.40625, 127.5, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x48, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x2D, 0x00, 0x48, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x6F, 0x00, 0x62, 0x00, 0x62, 0x00, 0x79, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x2D, 0x00, 0x47, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x53, 0x00, 0x65, 0x00, 0x74, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x64, 0x00, 0x69, 0x00, 0x74, 0x00, 0x73, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
		BAR_INSTRUCTION(false);
	}
	else
	{
		MainMenu = false;
		WriteMemoryByte(LockControl, 0x00);
		BAR_INSTRUCTION(true);
	}
}

void HostMenu(bool toggle)
{
	if (toggle)
	{
		HostPage = true;
		ScrollHostMenu = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 132.438, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x69, 0x00, 0x20, 0x00, 0x47, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x44, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4B, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4B, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x79, 0x00, 0x70, 0x00, 0x61, 0x00, 0x73, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4B, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x0A, 0x00, 0x4B, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x72, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x44, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x20, 0x00, 0x48, 0x00, 0x69, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x4B, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x20, 0x00, 0x4B, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4B, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x72, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x78, 0x00, 0x20, 0x00, 0x58, 0x00, 0x50, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x0A, 0x00, 0x57, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x72, 0x00, 0x69, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x61, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x20, 0x00, 0x41, 0x00, 0x72, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x41, 0x00, 0x72, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		HostPage = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void HostMenu1(bool toggle)
{
	if (toggle)
	{
		HostPage1 = true;
		ScrollHostMenu1 = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 122.5, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x61, 0x00, 0x76, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x75, 0x00, 0x70, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x78, 0x00, 0x20, 0x00, 0x50, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x75, 0x00, 0x70, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x75, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x57, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x72, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x75, 0x00, 0x72, 0x00, 0x76, 0x00, 0x69, 0x00, 0x76, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x4B, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x61, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x61, 0x00, 0x76, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x44, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x20, 0x00, 0x48, 0x00, 0x69, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x79, 0x00, 0x70, 0x00, 0x61, 0x00, 0x73, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x78, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x62, 0x00, 0x73, 0x00, 0x20, 0x00, 0x49, 0x00, 0x67, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x69, 0x00, 0x73, 0x00, 0x61, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4B, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x61, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x7A, 0x00, 0x65, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x73, 0x00, 0x20, 0x00, 0x53, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		HostPage1 = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void HostMenu2(bool toggle)
{
	if (toggle)
	{
		HostPage2 = true;
		ScrollHostMenu2 = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 128.438, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x54, 0x00, 0x50, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x67, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x50, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x75, 0x00, 0x72, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x63, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x48, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x57, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x57, 0x00, 0x65, 0x00, 0x62, 0x00, 0x20, 0x00, 0x48, 0x00, 0x61, 0x00, 0x78, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x20, 0x00, 0x47, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x41, 0x00, 0x72, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x78, 0x00, 0x79, 0x00, 0x67, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x61, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x47, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x48, 0x00, 0x65, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x68, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x47, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x57, 0x00, 0x65, 0x00, 0x61, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x69, 0x00, 0x72, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x41, 0x00, 0x72, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x47, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x48, 0x00, 0x65, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x68, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x6E, 0x00, 0x54, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x75, 0x00, 0x63, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x61, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		HostPage2 = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void HostMenu3(bool toggle)
{
	if (toggle)
	{
		HostPage3 = true;
		ScrollHostMenu3 = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 128.438, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x6E, 0x00, 0x54, 0x00, 0x20, 0x00, 0x42, 0x00, 0x69, 0x00, 0x67, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x72, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x6E, 0x00, 0x54, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x6E, 0x00, 0x54, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x45, 0x00, 0x78, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x6E, 0x00, 0x54, 0x00, 0x20, 0x00, 0x47, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x6E, 0x00, 0x54, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x66, 0x00, 0x66, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x69, 0x00, 0x67, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x75, 0x00, 0x63, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x61, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x72, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x69, 0x00, 0x73, 0x00, 0x61, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x44, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x69, 0x00, 0x73, 0x00, 0x61, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x61, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x62, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		HostPage3 = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void NonHostMenu(bool toggle)
{
	if (toggle)
	{
		NonHostPage = true;
		ScrollNonHostMenu = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 130.438, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x75, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x75, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x75, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x75, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x56, 0x00, 0x34, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x69, 0x00, 0x20, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x0A, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x42, 0x00, 0x75, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6B, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x75, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x75, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x77, 0x00, 0x61, 0x00, 0x72, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x0A, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x47, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x73, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x73, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x42, 0x00, 0x79, 0x00, 0x70, 0x00, 0x61, 0x00, 0x73, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x58, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		NonHostPage = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void NonHostMenu1(bool toggle)
{
	if (toggle)
	{
		NonHostPage1 = true;
		ScrollNonHostMenu1 = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 133.438, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x20, 0x00, 0x49, 0x00, 0x44, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x20, 0x00, 0x4B, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x74, 0x00, 0x75, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x65, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x6E, 0x00, 0x79, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x55, 0x00, 0x50, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x53, 0x00, 0x50, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x65, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x72, 0x00, 0x61, 0x00, 0x20, 0x00, 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x75, 0x00, 0x64, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x2D, 0x00, 0x47, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x20, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x55, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x20, 0x00, 0x41, 0x00, 0x46, 0x00, 0x4B, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x69, 0x00, 0x62, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x69, 0x00, 0x62, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x20, 0x00, 0x45, 0x00, 0x78, 0x00, 0x74, 0x00, 0x72, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x0A, 0x00, 0x57, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x48, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		NonHostPage1 = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void NonHostMenu2(bool toggle)
{
	if (toggle)
	{
		NonHostPage2 = true;
		ScrollNonHostMenu2 = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 133.438, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x48, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x74, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x57, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6B, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x72, 0x00, 0x61, 0x00, 0x76, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x62, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x72, 0x00, 0x61, 0x00, 0x20, 0x00, 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x65, 0x00, 0x74, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x54, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x65, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x75, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x70, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x63, 0x00, 0x61, 0x00, 0x66, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x20, 0x00, 0x42, 0x00, 0x45, 0x00, 0x54, 0x00, 0x41, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x61, 0x00, 0x79, 0x00, 0x20, 0x00, 0x2F, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x62, 0x00, 0x79, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00, 0x65, 0x00, 0x74, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x53, 0x00, 0x50, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x73, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x77, 0x00, 0x61, 0x00, 0x79, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x63, 0x00, 0x68, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x65, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x49, 0x00, 0x44, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x50, 0x00, 0x49, 0x00, 0x44, 0x00, 0x0A, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x74, 0x00, 0x72, 0x00, 0x61, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		NonHostPage2 = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void NonHostMenu3(bool toggle)
{
	if (toggle)
	{
		NonHostPage3 = true;
		ScrollNonHostMenu3 = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 133.438, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x57, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x76, 0x00, 0x61, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x63, 0x00, 0x68, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x61, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x67, 0x00, 0x0A, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x63, 0x00, 0x65, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x79, 0x00, 0x20, 0x00, 0x47, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x76, 0x00, 0x69, 0x00, 0x74, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x74, 0x00, 0x75, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x58, 0x00, 0x4D, 0x00, 0x42, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x74, 0x00, 0x75, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x58, 0x00, 0x4D, 0x00, 0x42, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x64, 0x00, 0x64, 0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x57, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x57, 0x00, 0x69, 0x00, 0x74, 0x00, 0x68, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x76, 0x00, 0x73, 0x00, 0x69, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x64, 0x00, 0x64, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x69, 0x00, 0x72, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x57, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x69, 0x00, 0x20, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x75, 0x00, 0x69, 0x00, 0x63, 0x00, 0x69, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x53, 0x00, 0x74, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x65, 0x00, 0x74, 0x00, 0x20, 0x00, 0x36, 0x00, 0x34, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		NonHostPage3 = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void NonHostMenu4(bool toggle)
{
	if (toggle)
	{
		NonHostPage4 = true;
		ScrollNonHostMenu4 = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 133.438, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x65, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x63, 0x00, 0x68, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x48, 0x00, 0x69, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x73, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x42, 0x00, 0x75, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x45, 0x00, 0x67, 0x00, 0x67, 0x00, 0x73, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x68, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x45, 0x00, 0x67, 0x00, 0x67, 0x00, 0x73, 0x00, 0x20, 0x00, 0x46, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x7A, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x65, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x63, 0x00, 0x69, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x61, 0x00, 0x63, 0x00, 0x68, 0x00, 0x20, 0x00, 0x41, 0x00, 0x74, 0x00, 0x74, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x48, 0x00, 0x69, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x4B, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x41, 0x00, 0x75, 0x00, 0x72, 0x00, 0x61, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x42, 0x00, 0x75, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x72, 0x00, 0x69, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x72, 0x00, 0x69, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x56, 0x00, 0x31, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		NonHostPage4 = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void NonHostMenu5(bool toggle)
{
	if (toggle)
	{
		NonHostPage5 = true;
		ScrollNonHostMenu5 = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 133.438, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x48, 0x00, 0x75, 0x00, 0x72, 0x00, 0x74, 0x00, 0x20, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x0A, 0x00, 0x50, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x20, 0x00, 0x58, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x48, 0x00, 0x69, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x41, 0x00, 0x72, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x55, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x61, 0x00, 0x69, 0x00, 0x72, 0x00, 0x20, 0x00, 0x41, 0x00, 0x74, 0x00, 0x74, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x69, 0x00, 0x74, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x78, 0x00, 0x20, 0x00, 0x42, 0x00, 0x45, 0x00, 0x54, 0x00, 0x41, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x53, 0x00, 0x74, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4B, 0x00, 0x42, 0x00, 0x20, 0x00, 0x56, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x69, 0x00, 0x67, 0x00, 0x20, 0x00, 0x4B, 0x00, 0x42, 0x00, 0x20, 0x00, 0x56, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x72, 0x00, 0x61, 0x00, 0x67, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x45, 0x00, 0x67, 0x00, 0x67, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x20, 0x00, 0x45, 0x00, 0x67, 0x00, 0x67, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x57, 0x00, 0x68, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x45, 0x00, 0x67, 0x00, 0x67, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		NonHostPage5 = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void LobbyMenu(bool toggle)
{
	if (toggle)
	{
		LobbyPage = true;
		ScrollLobbyMenu = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 117.719, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x52, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x53, 0x00, 0x75, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x52, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x5A, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x56, 0x00, 0x0A, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4A, 0x00, 0x6F, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x20, 0x00, 0x48, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x53, 0x00, 0x75, 0x00, 0x66, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x72, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x46, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x7A, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00, 0x53, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x61, 0x00, 0x72, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x53, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x6D, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x62, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x53, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x6D, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x62, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x57, 0x00, 0x69, 0x00, 0x74, 0x00, 0x68, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x73, 0x00, 0x68, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6B, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x20, 0x00, 0x56, 0x00, 0x31, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		LobbyPage = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void LobbyMenu1(bool toggle)
{
	if (toggle)
	{
		LobbyPage1 = true;
		ScrollLobbyMenu1 = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 123.375, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x57, 0x00, 0x65, 0x00, 0x61, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x52, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x44, 0x00, 0x72, 0x00, 0x61, 0x00, 0x77, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x32, 0x00, 0x74, 0x00, 0x68, 0x00, 0x20, 0x00, 0x48, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x44, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x73, 0x00, 0x20, 0x00, 0x53, 0x00, 0x77, 0x00, 0x61, 0x00, 0x70, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x20, 0x00, 0x53, 0x00, 0x77, 0x00, 0x61, 0x00, 0x70, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x41, 0x00, 0x64, 0x00, 0x64, 0x00, 0x20, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x20, 0x00, 0x46, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x7A, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6B, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x2F, 0x00, 0x2F, 0x00, 0x2F, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x20, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		LobbyPage1 = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void DrawMenu(bool toggle)
{
	if (toggle)
	{
		DrawPage = true;
		ScrollDrawMenu = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 133.438, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x3F, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x53, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x53, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x69, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x61, 0x00, 0x72, 0x00, 0x72, 0x00, 0x69, 0x00, 0x65, 0x00, 0x72, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x70, 0x00, 0x61, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		DrawPage = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void ItemsOn2Hand(bool toggle)
{
	if (toggle)
	{
		ItemsOn2HandPage = true;
		ScrollItemsOn2Hand = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 133.438, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x3F, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x69, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x53, 0x00, 0x77, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x41, 0x00, 0x70, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x69, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x41, 0x00, 0x78, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x69, 0x00, 0x67, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x00, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		ItemsOn2HandPage = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void DimensionChanger(bool toggle)
{
	if (toggle)
	{
		DimensionChangerPage = true;
		ScrollDimensionChanger = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 122.498, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x3F, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x73, 0x00, 0x65, 0x00, 0x74, 0x00, 0x20, 0x00, 0x44, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x77, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x4F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x77, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x77, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x77, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		DimensionChangerPage = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void BlockSwapper(bool toggle)
{
	if (toggle)
	{
		BlockSwapperPage = true;
		ScrollBlockSwapper = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 122.498, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x3F, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x69, 0x00, 0x72, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x76, 0x00, 0x61, 0x00, 0x20, 0x00, 0x20, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x69, 0x00, 0x72, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x57, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x69, 0x00, 0x72, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x44, 0x00, 0x69, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x20, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x69, 0x00, 0x72, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x69, 0x00, 0x72, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x42, 0x00, 0x61, 0x00, 0x72, 0x00, 0x72, 0x00, 0x69, 0x00, 0x65, 0x00, 0x72, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x69, 0x00, 0x72, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x72, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x69, 0x00, 0x72, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x57, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x69, 0x00, 0x72, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x42, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x69, 0x00, 0x72, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		BlockSwapperPage = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}


void ItemsSwapper(bool toggle)
{
	if (toggle)
	{
		ItemsSwapperPage = true;
		ScrollItemsSwapper = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 113.498, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x3F, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x69, 0x00, 0x72, 0x00, 0x74, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x44, 0x00, 0x65, 0x00, 0x62, 0x00, 0x75, 0x00, 0x67, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x69, 0x00, 0x72, 0x00, 0x74, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x44, 0x00, 0x69, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x69, 0x00, 0x72, 0x00, 0x74, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x57, 0x00, 0x72, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x69, 0x00, 0x72, 0x00, 0x74, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x41, 0x00, 0x72, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x69, 0x00, 0x72, 0x00, 0x74, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x61, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x69, 0x00, 0x72, 0x00, 0x74, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x42, 0x00, 0x65, 0x00, 0x65, 0x00, 0x66, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x20, 0x00, 0x20, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		ItemsSwapperPage = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}


void AddEffect(bool toggle)
{
	if (toggle)
	{
		AddEffectPage = true;
		ScrollAddEffect = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 113.498, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x3F, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x48, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x67, 0x00, 0x75, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x74, 0x00, 0x72, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x74, 0x00, 0x68, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x48, 0x00, 0x65, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x68, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x44, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x75, 0x00, 0x73, 0x00, 0x65, 0x00, 0x61, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x73, 0x00, 0x69, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x63, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x72, 0x00, 0x65, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x73, 0x00, 0x69, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x63, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x57, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x42, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x74, 0x00, 0x68, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x76, 0x00, 0x69, 0x00, 0x73, 0x00, 0x69, 0x00, 0x62, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x48, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		AddEffectPage = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void AddEffect1(bool toggle)
{
	if (toggle)
	{
		AddEffectPage1 = true;
		ScrollAddEffect1 = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 123.498, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x55, 0x00, 0x73, 0x00, 0x65, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x3F, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x57, 0x00, 0x65, 0x00, 0x61, 0x00, 0x6B, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x69, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x57, 0x00, 0x69, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x48, 0x00, 0x65, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x68, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x41, 0x00, 0x62, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x61, 0x00, 0x74, 0x00, 0x75, 0x00, 0x72, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x47, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x76, 0x00, 0x69, 0x00, 0x74, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x75, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6E, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x75, 0x00, 0x69, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x3A, 0x00, 0x20, 0x00, 0x30, 0x00, 0x3A, 0x00, 0x33, 0x00, 0x36, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x3A, 0x00, 0x20, 0x00, 0x31, 0x00, 0x3A, 0x00, 0x34, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x3A, 0x00, 0x20, 0x00, 0x36, 0x00, 0x3A, 0x00, 0x35, 0x00, 0x31, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x3A, 0x00, 0x20, 0x00, 0x31, 0x00, 0x33, 0x00, 0x3A, 0x00, 0x34, 0x00, 0x30, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x3A, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x3A, 0x00, 0x33, 0x00, 0x30, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x3A, 0x00, 0x20, 0x00, 0x32, 0x00, 0x34, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		AddEffectPage1 = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void VisionMenu(bool toggle)
{
	if (toggle)
	{
		VisionsPage = true;
		ScrollVisions = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 133.5, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x58, 0x00, 0x72, 0x00, 0x61, 0x00, 0x79, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x70, 0x00, 0x73, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x6E, 0x00, 0x79, 0x00, 0x20, 0x00, 0x53, 0x00, 0x63, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x65, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x52, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x6B, 0x00, 0x79, 0x00, 0x20, 0x00, 0x52, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x62, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x57, 0x00, 0x54, 0x00, 0x46, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x65, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x69, 0x00, 0x7A, 0x00, 0x65, 0x00, 0x20, 0x00, 0x48, 0x00, 0x55, 0x00, 0x44, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x75, 0x00, 0x72, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x77, 0x00, 0x61, 0x00, 0x76, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x57, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x48, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x57, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x48, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x57, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x48, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x20, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x75, 0x00, 0x72, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x65, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6B, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		VisionsPage = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void VisionMenu1(bool toggle)
{
	if (toggle)
	{
		VisionPage1 = true;
		ScrollVisions1 = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 133.5, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x72, 0x00, 0x61, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x56, 0x00, 0x69, 0x00, 0x62, 0x00, 0x72, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x20, 0x00, 0x57, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x55, 0x00, 0x44, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x76, 0x00, 0x20, 0x00, 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x61, 0x00, 0x70, 0x00, 0x68, 0x00, 0x69, 0x00, 0x63, 0x00, 0x0A, 0x00, 0x50, 0x00, 0x61, 0x00, 0x72, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x20, 0x00, 0x0A, 0x00, 0x50, 0x00, 0x61, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x69, 0x00, 0x67, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x72, 0x00, 0x61, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x66, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x72, 0x00, 0x61, 0x00, 0x20, 0x00, 0x52, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x69, 0x00, 0x67, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x72, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x55, 0x00, 0x44, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x6F, 0x00, 0x61, 0x00, 0x64, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x74, 0x00, 0x61, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6B, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x74, 0x00, 0x65, 0x00, 0x70, 0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x74, 0x00, 0x65, 0x00, 0x70, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x6B, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x44, 0x00, 0x65, 0x00, 0x62, 0x00, 0x75, 0x00, 0x67, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x68, 0x00, 0x61, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6B, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		VisionPage1 = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void VisionMenu2(bool toggle)
{
	if (toggle)
	{
		VisionPage2 = true;
		ScrollVision2 = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 133.5, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x6B, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x50, 0x00, 0x61, 0x00, 0x72, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x69, 0x00, 0x73, 0x00, 0x61, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x20, 0x00, 0x48, 0x00, 0x55, 0x00, 0x44, 0x00, 0x20, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x72, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x20, 0x00, 0x42, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x6B, 0x00, 0x79, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x6F, 0x00, 0x62, 0x00, 0x62, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x57, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x48, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x72, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x69, 0x00, 0x74, 0x00, 0x20, 0x00, 0x44, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x69, 0x00, 0x73, 0x00, 0x61, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x56, 0x00, 0x20, 0x00, 0x57, 0x00, 0x69, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x74, 0x00, 0x20, 0x00, 0x48, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x5A, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x57, 0x00, 0x69, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x74, 0x00, 0x20, 0x00, 0x48, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		VisionPage2 = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void VisionMenu3(bool toggle)
{
	if (toggle)
	{
		VisionPage3 = true;
		ScrollVision3 = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 121.498, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x48, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x42, 0x00, 0x61, 0x00, 0x62, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x44, 0x00, 0x65, 0x00, 0x74, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6B, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x33, 0x00, 0x74, 0x00, 0x68, 0x00, 0x20, 0x00, 0x50, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x33, 0x00, 0x36, 0x00, 0x30, 0x00, 0x20, 0x00, 0x52, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x48, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x75, 0x00, 0x72, 0x00, 0x65, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x78, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x26, 0x00, 0x20, 0x00, 0x53, 0x00, 0x68, 0x00, 0x61, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x72, 0x00, 0x61, 0x00, 0x63, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x69, 0x00, 0x67, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x72, 0x00, 0x61, 0x00, 0x63, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x79, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x50, 0x00, 0x61, 0x00, 0x72, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x20, 0x00, 0x48, 0x00, 0x69, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x6F, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x78, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x74, 0x00, 0x72, 0x00, 0x61, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x48, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		VisionPage3 = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void VisionMenu4(bool toggle)
{
	if (toggle)
	{
		VisionPage4 = true;
		ScrollVision4 = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 132.5, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x69, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x47, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x57, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x20, 0x00, 0x57, 0x00, 0x68, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x57, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x20, 0x00, 0x52, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x62, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x68, 0x00, 0x61, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6B, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x69, 0x00, 0x7A, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x6B, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x6B, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x6F, 0x00, 0x61, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x48, 0x00, 0x55, 0x00, 0x44, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x56, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x53, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6B, 0x00, 0x79, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x47, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x54, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		VisionPage4 = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void NameChangerMenu(bool toggle)
{
	if (toggle)
	{
		NameChangerPage = true;
		ScrollNameChanger = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 132.5, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x47, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x2F, 0x00, 0x20, 0x00, 0x50, 0x00, 0x52, 0x00, 0x45, 0x00, 0x53, 0x00, 0x45, 0x00, 0x54, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D, 0x00, 0x45, 0x00, 0x20, 0x00, 0x5C, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x42, 0x00, 0x43, 0x00, 0x44, 0x00, 0x45, 0x00, 0x46, 0x00, 0x47, 0x00, 0x0A, 0x00, 0x59, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x72, 0x00, 0x20, 0x00, 0x49, 0x00, 0x50, 0x00, 0x20, 0x00, 0x69, 0x00, 0x73, 0x00, 0x2E, 0x00, 0x2E, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x20, 0x00, 0x50, 0x00, 0x72, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x69, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x73, 0x00, 0x61, 0x00, 0x6B, 0x00, 0x69, 0x00, 0x20, 0x00, 0x49, 0x00, 0x73, 0x00, 0x20, 0x00, 0x48, 0x00, 0x65, 0x00, 0x72, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x2A, 0x00, 0x2A, 0x00, 0x2A, 0x00, 0x2A, 0x00, 0x2A, 0x00, 0x2A, 0x00, 0x2A, 0x00, 0x2A, 0x00, 0x2A, 0x00, 0x2A, 0x00, 0x0A, 0x00, 0x5C, 0x00, 0x28, 0x00, 0x2A, 0x00, 0x5F, 0x00, 0x2A, 0x00, 0x29, 0x00, 0x2F, 0x00, 0x0A, 0x00, 0xA9, 0x00, 0x20, 0x00, 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x0A, 0x00, 0xAE, 0x00, 0x20, 0x00, 0x3A, 0x00, 0x33, 0x00, 0x0A, 0x00, 0xA6, 0x00, 0x7C, 0x00, 0x0A, 0x00, 0x24, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x24, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		NameChangerPage = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void MiniGamesMenu(bool toggle)
{
	if (toggle)
	{
		MiniGamesPage = true;
		ScrollMiniGame = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 114.5, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x63, 0x00, 0x65, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x53, 0x00, 0x65, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x61, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x61, 0x00, 0x72, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00, 0x74, 0x00, 0x61, 0x00, 0x72, 0x00, 0x76, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x6E, 0x00, 0x54, 0x00, 0x20, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x44, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x78, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x70, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x44, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x79, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x53, 0x00, 0x75, 0x00, 0x72, 0x00, 0x76, 0x00, 0x69, 0x00, 0x76, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x79, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x20, 0x00, 0x54, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x74, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x6F, 0x00, 0x62, 0x00, 0x62, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x74, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x43, 0x00, 0x61, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x74, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x74, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x75, 0x00, 0x63, 0x00, 0x69, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		MiniGamesPage = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void SettingsMenu(bool toggle)
{
	if (toggle)
	{
		SettingsPage = true;
		ScrollSettings = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 131.5, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x79, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00, 0x75, 0x00, 0x72, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x59, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x67, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x67, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x67, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x67, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x43, 0x00, 0x79, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x67, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x50, 0x00, 0x75, 0x00, 0x72, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x67, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x59, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x43, 0x00, 0x79, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x50, 0x00, 0x75, 0x00, 0x72, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x59, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x61, 0x00, 0x63, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x20, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x67, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		SettingsPage = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void HudColorPage(bool toggle)
{
	if (toggle)
	{
		HudColorsPage = true;
		ScrollHudColors = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 131.5, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x75, 0x00, 0x64, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x75, 0x00, 0x64, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x75, 0x00, 0x64, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x75, 0x00, 0x64, 0x00, 0x20, 0x00, 0x50, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x75, 0x00, 0x64, 0x00, 0x20, 0x00, 0x50, 0x00, 0x75, 0x00, 0x72, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x75, 0x00, 0x64, 0x00, 0x20, 0x00, 0x43, 0x00, 0x79, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x75, 0x00, 0x64, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x75, 0x00, 0x64, 0x00, 0x20, 0x00, 0x59, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x75, 0x00, 0x64, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x75, 0x00, 0x64, 0x00, 0x20, 0x00, 0x57, 0x00, 0x68, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x75, 0x00, 0x64, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x73, 0x00, 0x65, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		HudColorsPage = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

void FOVMenu(bool toggle)
{
	if (toggle)
	{
		FOVPage = true;
		ScrollFOV = 0;

		if (LockHud == true) { WriteMemoryByte(LockControl, 0x01); }

		//New funcs for draw hud
		DrawTitle(4.03125, 0.960935, -260, -186);
		DrawHud(-4.5, -8.59375, -13, 383.125);
		DrawText(1, 1, -212, -20);
		DrawScrollbar(0.558594, 0.40625, 131.5, 205);

		char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x56, 0x00, 0x20, 0x00, 0x31, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x56, 0x00, 0x20, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x56, 0x00, 0x20, 0x00, 0x33, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x56, 0x00, 0x20, 0x00, 0x34, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x56, 0x00, 0x20, 0x00, 0x35, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x56, 0x00, 0x20, 0x00, 0x36, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x56, 0x00, 0x20, 0x00, 0x37, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x56, 0x00, 0x20, 0x00, 0x38, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x56, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x56, 0x00, 0x20, 0x00, 0x5A, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x56, 0x00, 0x20, 0x00, 0x44, 0x00, 0x65, 0x00, 0x66, 0x00, 0x61, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x00 };
		write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));
	}
	else
	{
		FOVPage = false;
		WriteMemoryByte(LockControl, 0x00);
	}
}

#pragma endregion

#pragma region "SELECT OPTIONS"

void SelectOpenMenu()
{
	if (ScrollMainMenu == 0)
	{
		OpenMenu(false);
		sleep(50);
		HostMenu(true);
	}

	if (ScrollMainMenu == 1)
	{
		OpenMenu(false);
		sleep(50);
		NonHostMenu(true);
	}

	if (ScrollMainMenu == 2)
	{
		OpenMenu(false);
		sleep(50);
		LobbyMenu(true);
	}

	if (ScrollMainMenu == 3)
	{
		OpenMenu(false);
		sleep(50);
		VisionMenu(true);
	}

	if (ScrollMainMenu == 4)
	{
		OpenMenu(false);
		sleep(50);
		NameChangerMenu(true);
	}

	if (ScrollMainMenu == 5)
	{
		OpenMenu(false);
		sleep(50);
		MiniGamesMenu(true);
	}

	if (ScrollMainMenu == 6)
	{
		OpenMenu(false);
		sleep(50);
		SettingsMenu(true);
	}

	if (ScrollMainMenu == 7)
	{
		sleep(1000);
		Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
		Dialog::ProgressBar("Creator: Miisaakii\nMenu version V3.0\nPremium Version", "Credits", 5);
		Dialog::End();
	}
}

void SelectHostMenu()
{
	if (ScrollHostMenu == 0)
	{
		if (!GodMode)
		{
			GOD_MODE(true);
			OPTION_TOGGLE(true);
			sleep(200);
			GodMode = true;
		}
		else
		{
			GOD_MODE(false);
			OPTION_TOGGLE(false);
			sleep(200);
			GodMode = false;
		}
	}

	if (ScrollHostMenu == 1)
	{
		if (!DemiGodMode)
		{
			WriteMemoryByte(0x003A4066, 0x88);
			OPTION_TOGGLE(true);
			sleep(200);
			DemiGodMode = true;
		}
		else
		{
			WriteMemoryByte(0x003A4066, 0x08);
			OPTION_TOGGLE(false);
			sleep(200);
			DemiGodMode = false;
		}
	}

	if (ScrollHostMenu == 2)
	{
		if (!InstantDamage)
		{
			WriteMemoryByte(0x003A3FF0, 0x40);
			OPTION_TOGGLE(true);
			sleep(200);
			InstantDamage = true;
		}
		else
		{
			WriteMemoryByte(0x003A3FF0, 0x3F);
			OPTION_TOGGLE(false);
			sleep(200);
			InstantDamage = false;
		}
	}

	if (ScrollHostMenu == 3)
	{
		if (!InstantKill)
		{
			WriteMemoryByte(0x001AC412, 0x28);
			OPTION_TOGGLE(true);
			sleep(200);
			InstantKill = true;
		}
		else
		{
			WriteMemoryByte(0x001AC412, 0x08);
			OPTION_TOGGLE(false);
			sleep(200);
			InstantKill = false;
		}
	}

	if (ScrollHostMenu == 4)
	{
		if (!InstantKillAll)
		{
			WriteMemoryByte(0x003A4066, 0x28);
			OPTION_TOGGLE(true);
			sleep(200);
			InstantKillAll = true;
		}
		else
		{
			WriteMemoryByte(0x003A4066, 0x08);
			OPTION_TOGGLE(false);
			sleep(200);
			InstantKillAll = false;
		}
	}

	if (ScrollHostMenu == 5)
	{
		if (!BypassKillAll)
		{
			WriteMemoryByte(0x00226168, 0x40);
			OPTION_TOGGLE(true);
			sleep(200);
			BypassKillAll = true;
		}
		else
		{
			WriteMemoryByte(0x00226168, 0x41);
			OPTION_TOGGLE(false);
			sleep(200);
			BypassKillAll = false;
		}
	}

	if (ScrollHostMenu == 6)
	{
		if (!KillInFire)
		{
			WriteMemoryByte(0x00226168, 0x40);
			OPTION_TOGGLE(true);
			sleep(200);
			KillInFire = true;
		}
		else
		{
			WriteMemoryByte(0x00226168, 0x41);
			OPTION_TOGGLE(false);
			sleep(200);
			KillInFire = false;
		}
	}

	if (ScrollHostMenu == 7)
	{
		if (!NoDamageHit)
		{
			WriteMemoryByte(0x003A3FF0, 0xFF);
			OPTION_TOGGLE(true);
			sleep(200);
			NoDamageHit = true;
		}
		else
		{
			WriteMemoryByte(0x003A3FF0, 0x3F);
			OPTION_TOGGLE(false);
			sleep(200);
			NoDamageHit = false;
		}
	}

	if (ScrollHostMenu == 8)
	{
		if (!KnockBack)
		{
			WriteMemoryByte(0x003A4018, 0x40);
			OPTION_TOGGLE(true);
			sleep(200);
			KnockBack = true;
		}
		else
		{
			WriteMemoryByte(0x003A4018, 0x3E);
			OPTION_TOGGLE(false);
			sleep(200);
			KnockBack = false;
		}
	}

	if (ScrollHostMenu == 9)
	{
		if (!AntiKnockBack)
		{
			WriteMemoryByte(0x003A4018, 0x00);
			OPTION_TOGGLE(true);
			sleep(200);
			AntiKnockBack = true;
		}
		else
		{
			WriteMemoryByte(0x003A4018, 0x3E);
			OPTION_TOGGLE(false);
			sleep(200);
			AntiKnockBack = false;
		}
	}

	if (ScrollHostMenu == 10)
	{
		if (!ReverseKnockBack)
		{
			WriteMemoryByte(0x003A4018, 0xBF);
			OPTION_TOGGLE(true);
			sleep(200);
			ReverseKnockBack = true;
		}
		else
		{
			WriteMemoryByte(0x003A4018, 0x3E);
			OPTION_TOGGLE(false);
			sleep(200);
			ReverseKnockBack = false;
		}
	}

	if (ScrollHostMenu == 11)
	{
		if (!DropFarItems)
		{
			WriteMemoryByte(0x014C6881, 0xFF);
			OPTION_TOGGLE(true);
			sleep(200);
			DropFarItems = true;
		}
		else
		{
			WriteMemoryByte(0x014C6881, 0x80);
			OPTION_TOGGLE(false);
			sleep(200);
			DropFarItems = false;
		}
	}

	if (ScrollHostMenu == 12)
	{
		if (!MaxXPLevel)
		{
			WriteMemoryByte(0x004B0096, 0x10);
			OPTION_TOGGLE(true);
			sleep(200);
			MaxXPLevel = true;
		}
		else
		{
			WriteMemoryByte(0x004B0096, 0x20);
			OPTION_TOGGLE(false);
			sleep(200);
			MaxXPLevel = false;
		}
	}

	if (ScrollHostMenu == 13)
	{
		if (!WaterJump)
		{
			WriteMemoryByte(0x003ABD69, 0xF9);
			OPTION_TOGGLE(true);
			sleep(200);
			WaterJump = true;
		}
		else
		{
			WriteMemoryByte(0x003ABD69, 0xE9);
			OPTION_TOGGLE(false);
			sleep(200);
			WaterJump = false;
		}
	}

	if (ScrollHostMenu == 14)
	{
		if (!DriftBoat)
		{
			WriteMemoryByte(0x002278E4, 0x41);
			OPTION_TOGGLE(true);
			sleep(200);
			DriftBoat = true;
		}
		else
		{
			WriteMemoryByte(0x002278E4, 0x40);
			OPTION_TOGGLE(false);
			sleep(200);
			DriftBoat = false;
		}
	}

	if (ScrollHostMenu == 15)
	{
		if (!StopArrows)
		{
			WriteMemoryByte(0x000FB55C, 0x80);
			OPTION_TOGGLE(true);
			sleep(200);
			StopArrows = true;
		}
		else
		{
			WriteMemoryByte(0x000FB55C, 0x40);
			OPTION_TOGGLE(false);
			sleep(200);
			StopArrows = false;
		}
	}

	if (ScrollHostMenu == 16)
	{
		if (!RemoveArrows)
		{
			WriteMemoryByte(0x000FB644, 0x41);
			OPTION_TOGGLE(true);
			sleep(200);
			RemoveArrows = true;
		}
		else
		{
			WriteMemoryByte(0x000FB644, 0x40);
			OPTION_TOGGLE(false);
			sleep(200);
			RemoveArrows = false;
		}
	}

	if (ScrollHostMenu == 17)
	{
		if (!PotionsFlying)
		{
			WriteMemoryByte(0x0065FB60, 0x2D);
			OPTION_TOGGLE(true);
			sleep(200);
			PotionsFlying = true;
		}
		else
		{
			WriteMemoryByte(0x0065FB60, 0x3D);
			OPTION_TOGGLE(false);
			sleep(200);
			PotionsFlying = false;
		}
	}

	if (ScrollHostMenu == 18)
	{
		HostMenu(false);
		sleep(100);
		HostMenu1(true);
		sleep(100);
	}
}

void SelectHostMenu1()
{
	if (ScrollHostMenu1 == 0)
	{
		if (!PotionsNoGravity)
		{
			WriteMemoryByte(0x0065FB60, 0x4D);
			OPTION_TOGGLE(true);
			sleep(200);
			PotionsNoGravity = true;
		}
		else
		{
			WriteMemoryByte(0x0065FB60, 0x3D);
			OPTION_TOGGLE(false);
			sleep(200);
			PotionsNoGravity = false;
		}
	}

	if (ScrollHostMenu1 == 1)
	{
		if (!InfinitePickupItems)
		{
			WriteMemoryByte(0x00224B13, 0x00);
			OPTION_TOGGLE(true);
			sleep(200);
			InfinitePickupItems = true;
		}
		else
		{
			WriteMemoryByte(0x00224B13, 0x01);
			OPTION_TOGGLE(false);
			sleep(200);
			InfinitePickupItems = false;
		}
	}

	if (ScrollHostMenu1 == 2)
	{
		if (!MaxPickupItems)
		{
			WriteMemoryByte(0x00310AD4, 0x41);
			OPTION_TOGGLE(true);
			sleep(200);
			MaxPickupItems = true;
		}
		else
		{
			WriteMemoryByte(0x00310AD4, 0x40);
			OPTION_TOGGLE(false);
			sleep(200);
			MaxPickupItems = false;
		}
	}

	if (ScrollHostMenu1 == 3)
	{
		if (!InfiniteBlocks)
		{
			WriteMemoryByte(0x0010673F, 0x01);
			OPTION_TOGGLE(true);
			sleep(200);
			InfiniteBlocks = true;
		}
		else
		{
			WriteMemoryByte(0x0010673F, 0x00);
			OPTION_TOGGLE(false);
			sleep(200);
			InfiniteBlocks = false;
		}
	}

	if (ScrollHostMenu1 == 4)
	{
		if (!BurnInWater)
		{
			WriteMemoryByte(0x00225EA8, 0x41);
			OPTION_TOGGLE(true);
			sleep(200);
			BurnInWater = true;
		}
		else
		{
			WriteMemoryByte(0x00225EA8, 0x40);
			OPTION_TOGGLE(false);
			sleep(200);
			BurnInWater = false;
		}
	}

	if (ScrollHostMenu1 == 5)
	{
		if (!RemoveFire)
		{
			WriteMemoryByte(0x00225E80, 0x40);
			OPTION_TOGGLE(true);
			sleep(200);
			RemoveFire = true;
		}
		else
		{
			WriteMemoryByte(0x00225E80, 0x41);
			OPTION_TOGGLE(false);
			sleep(200);
			RemoveFire = false;
		}
	}

	if (ScrollHostMenu1 == 6)
	{
		if (!CreativeSlot)
		{
			WriteMemoryByte(0x002F034B, 0x01);
			WriteMemoryByte(0x002F039B, 0x00);
			OPTION_TOGGLE(true);
			sleep(200);
			CreativeSlot = true;
		}
		else
		{
			WriteMemoryByte(0x002F034B, 0x00);
			WriteMemoryByte(0x002F039B, 0x01);
			OPTION_TOGGLE(false);
			sleep(200);
			CreativeSlot = false;
		}
	}

	if (ScrollHostMenu1 == 7)
	{
		if (!SurvivalSlot)
		{
			WriteMemoryByte(0x002F037B, 0x01);
			WriteMemoryByte(0x002F036B, 0x00);
			OPTION_TOGGLE(true);
			sleep(200);
			SurvivalSlot = true;
		}
		else
		{
			WriteMemoryByte(0x002F037B, 0x00);
			WriteMemoryByte(0x002F036B, 0x01);
			OPTION_TOGGLE(false);
			sleep(200);
			SurvivalSlot = false;
		}
	}

	if (ScrollHostMenu1 == 8)
	{
		if (!KillSpawnEntity)
		{
			WriteMemoryByte(0x005BF34E, 0x48);
			OPTION_TOGGLE(true);
			sleep(200);
			KillSpawnEntity = true;
		}
		else
		{
			WriteMemoryByte(0x005BF34E, 0x08);
			OPTION_TOGGLE(false);
			sleep(200);
			KillSpawnEntity = false;
		}
	}

	if (ScrollHostMenu1 == 9)
	{
		if (!StopBlockGravity)
		{
			WriteMemoryByte(0x00246A2C, 0xFF);
			OPTION_TOGGLE(true);
			sleep(200);
			StopBlockGravity = true;
		}
		else
		{
			WriteMemoryByte(0x00246A2C, 0x3F);
			OPTION_TOGGLE(false);
			sleep(200);
			StopBlockGravity = false;
		}
	}

	if (ScrollHostMenu1 == 10)
	{
		if (!NoDelayHit)
		{
			WriteMemoryByte(0x003A3FF0, 0x20);
			OPTION_TOGGLE(true);
			sleep(200);
			NoDelayHit = true;
		}
		else
		{
			WriteMemoryByte(0x003A3FF0, 0x00);
			OPTION_TOGGLE(false);
			sleep(200);
			NoDelayHit = false;
		}
	}

	if (ScrollHostMenu1 == 11)
	{
		if (!BypassMaxItems)
		{
			WriteMemoryByte(0x00310AFC, 0x41);
			OPTION_TOGGLE(true);
			sleep(200);
			BypassMaxItems = true;
		}
		else
		{
			WriteMemoryByte(0x00310AFC, 0x40);
			OPTION_TOGGLE(false);
			sleep(200);
			BypassMaxItems = false;
		}
	}

	if (ScrollHostMenu1 == 12)
	{
		if (!InfiniteFood)
		{
			WriteMemoryByte(0x0043E9F7, 0x00);
			OPTION_TOGGLE(true);
			sleep(200);
			InfiniteFood = true;
		}
		else
		{
			WriteMemoryByte(0x0043E9F7, 0x01);
			OPTION_TOGGLE(false);
			sleep(200);
			InfiniteFood = false;
		}
	}

	if (ScrollHostMenu1 == 13)
	{
		if (!MobsIgnoreMe)
		{
			char HEX[] = { 0x3F, 0x00 };
			write_process(0x00A98F50, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			MobsIgnoreMe = true;
		}
		else
		{
			char HEX[] = { 0x3D, 0x8C };
			write_process(0x00A98F50, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			MobsIgnoreMe = false;
		}
	}

	if (ScrollHostMenu1 == 14)
	{
		if (!DisablePortals)
		{
			WriteMemoryByte(0x002379E7, 0x00);
			OPTION_TOGGLE(true);
			sleep(200);
			DisablePortals = true;
		}
		else
		{
			WriteMemoryByte(0x002379E7, 0x01);
			OPTION_TOGGLE(false);
			sleep(200);
			DisablePortals = false;
		}
	}

	if (ScrollHostMenu1 == 15)
	{
		if (!KillOnRespawn)
		{
			char HEX[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x003A8678, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			KillOnRespawn = true;
		}
		else
		{
			char HEX[] = { 0xF8, 0x21, 0xFF, 0x81 };
			write_process(0x003A8678, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			KillOnRespawn = false;
		}
	}

	if (ScrollHostMenu1 == 16)
	{
		if (!FreezeAllEntity)
		{
			char HEX[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x003A9FE8, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			FreezeAllEntity = true;
		}
		else
		{
			char HEX[] = { 0xF8, 0x21, 0xFF, 0x81 };
			write_process(0x003A9FE8, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			FreezeAllEntity = false;
		}
	}

	if (ScrollHostMenu1 == 17)
	{
		if (!NetherPortalsStone)
		{
			char HEX[] = { 0x32, 0x18, 0x11, 0xC0 };
			write_process(0x014C89FC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			NetherPortalsStone = true;
		}
		else
		{
			char HEX[] = { 0x32, 0x18, 0x5E, 0x701 };
			write_process(0x014C89FC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			NetherPortalsStone = false;
		}
	}

	if (ScrollHostMenu1 == 18)
	{
		HostMenu1(false);
		sleep(50);
		HostMenu2(true);
	}
}

void SelectHostMenu2()
{
	if (ScrollHostMenu2 == 0)
	{
		if (!StopEndermanTP)
		{
			char HEX[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x003B30A8, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			StopEndermanTP = true;
		}
		else
		{
			char HEX[] = { 0xF8, 0x21, 0xFE, 0xB1 };
			write_process(0x003B30A8, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			StopEndermanTP = false;
		}
	}

	if (ScrollHostMenu2 == 1)
	{
		if (!IgnoringPressure)
		{
			char HEX[] = { 0x38, 0x60, 0x00, 0x01 };
			write_process(0x00237BC8, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			IgnoringPressure = true;
		}
		else
		{
			char HEX[] = { 0x38, 0x60, 0x00, 0x00 };
			write_process(0x00237BC8, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			IgnoringPressure = false;
		}
	}

	if (ScrollHostMenu2 == 2)
	{
		if (!AllEnchant)
		{
			char HEX[] = { 0x10 };
			write_process(0x00218A4F, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			AllEnchant = true;
		}
		else
		{
			char HEX[] = { 0x00 };
			write_process(0x00218A4F, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			AllEnchant = false;
		}
	}

	if (ScrollHostMenu2 == 3)
	{
		if (!ItemsOnHead)
		{
			char HEX[] = { 0x40 };
			write_process(0x00428704, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			ItemsOnHead = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00428704, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			ItemsOnHead = false;
		}
	}

	if (ScrollHostMenu2 == 4)
	{
		if (!BoatNoWork)
		{
			char HEX[] = { 0x41 };
			write_process(0x000E0F90, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			BoatNoWork = true;
		}
		else
		{
			char HEX[] = { 0x40 };
			write_process(0x000E0F90, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			BoatNoWork = false;
		}
	}

	if (ScrollHostMenu2 == 5)
	{
		if (!NoWebHax)
		{
			char HEX[] = { 0x00 };
			write_process(0x00234F9F, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			NoWebHax = true;
		}
		else
		{
			char HEX[] = { 0x01 };
			write_process(0x00234F9F, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			NoWebHax = false;
		}
	}

	if (ScrollHostMenu2 == 6)
	{
		if (!EntityGodMode)
		{
			char HEX[] = { 0x40 };
			write_process(0x003A3F6C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			EntityGodMode = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x003A3F6C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			EntityGodMode = false;
		}
	}

	if (ScrollHostMenu2 == 7)
	{
		if (!SpectralArrows)
		{
			char HEX[] = { 0x32, 0x20, 0x8D, 0xA0 };
			write_process(0x014C90D4, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			SpectralArrows = true;
		}
		else
		{
			char HEX[] = { 0x32, 0x1E, 0xAD, 0xA0 };
			write_process(0x014C90D4, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			SpectralArrows = false;
		}
	}

	if (ScrollHostMenu2 == 8)
	{
		if (!InfiniteOxygen)
		{
			char HEX[] = { 0x41 };
			write_process(0x0039DE28, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			InfiniteOxygen = true;
		}
		else
		{
			char HEX[] = { 0x40 };
			write_process(0x0039DE28, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			InfiniteOxygen = false;
		}
	}

	if (ScrollHostMenu2 == 9)
	{
		if (!SpectatorGameMode)
		{
			char HEX[] = { 0x32, 0x3A, 0x84, 0xC0 };
			write_process(0x014C9048, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			SpectatorGameMode = true;
		}
		else
		{
			char HEX[] = { 0x32, 0x39, 0x4B, 0xD0 };
			write_process(0x014C9048, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			SpectatorGameMode = false;
		}
	}

	if (ScrollHostMenu2 == 10)
	{
		if (!AutoRegenHealth)
		{
			char HEX[] = { 0x68, 0x63, 0x00, 0x00 };
			write_process(0x002ADCE8, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			AutoRegenHealth = true;
		}
		else
		{
			char HEX[] = { 0x68, 0x63, 0x00, 0x01 };
			write_process(0x002ADCE8, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			AutoRegenHealth = false;
		}
	}

	if (ScrollHostMenu2 == 11)
	{
		if (!LockGameMode)
		{
			char HEX[] = { 0x41 };
			write_process(0x002F03D0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			LockGameMode = true;
		}
		else
		{
			char HEX[] = { 0x40 };
			write_process(0x002F03D0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			LockGameMode = false;
		}
	}

	if (ScrollHostMenu2 == 12)
	{
		if (!LockWeather)
		{
			char HEX[] = { 0x41 };
			write_process(0x00393E84, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			LockWeather = true;
		}
		else
		{
			char HEX[] = { 0x40 };
			write_process(0x00393E84, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			LockWeather = false;
		}
	}

	if (ScrollHostMenu2 == 13)
	{
		if (!FastBow)
		{
			char HEX[] = { 0xE0, 0x18, 0x18 };
			write_process(0x000FB4C5, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			FastBow = true;
		}
		else
		{
			char HEX[] = { 0xE0, 0x08, 0x18 };
			write_process(0x000FB4C5, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			FastBow = false;
		}
	}

	if (ScrollHostMenu2 == 14)
	{
		if (!DirectionArrows)
		{
			char HEX[] = { 0x45 };
			write_process(0x000FB55C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			DirectionArrows = true;
		}
		else
		{
			char HEX[] = { 0x40 };
			write_process(0x000FB55C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			DirectionArrows = false;
		}
	}

	if (ScrollHostMenu2 == 15)
	{
		if (!GodModeForMe)
		{
			char HEX[] = { 0x00 };
			write_process(0x002F0273, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			GodModeForMe = true;
		}
		else
		{
			char HEX[] = { 0x01 };
			write_process(0x002F0273, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			GodModeForMe = false;
		}
	}

	if (ScrollHostMenu2 == 16)
	{
		if (!TotemGiveHealth)
		{
			char HEX[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x003A52B0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			TotemGiveHealth = true;
		}
		else
		{
			char HEX[] = { 0x3F, 0x80, 0x00, 0x00 };
			write_process(0x003A52B0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			TotemGiveHealth = false;
		}
	}

	if (ScrollHostMenu2 == 17)
	{
		if (!TntNuclear)
		{
			char HEX[] = { 0x42, 0x80, 0x00, 0x00 };
			write_process(0x0051E0D0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			TntNuclear = true;
		}
		else
		{
			char HEX[] = { 0x40, 0x80, 0x00, 0x00 };
			write_process(0x0051E0D0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			TntNuclear = false;
		}
	}

	if (ScrollHostMenu2 == 18)
	{
		HostMenu2(false);
		sleep(100);
		HostMenu3(true);
		sleep(100);
	}
}

void SelectHostMenu3()
{
	if (ScrollHostMenu3 == 0)
	{
		if (!TntBigParticles)
		{
			char HEX[] = { 0x40 };
			write_process(0x00245E58, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			TntBigParticles = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00245E58, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			TntBigParticles = false;
		}
	}

	if (ScrollHostMenu3 == 1)
	{
		if (!TntFlying)
		{
			char HEX[] = { 0x2F, 0xA4 };
			write_process(0x0051E558, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			TntFlying = true;
		}
		else
		{
			char HEX[] = { 0x3F, 0xA4 };
			write_process(0x0051E558, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			TntFlying = false;
		}
	}

	if (ScrollHostMenu3 == 2)
	{
		if (!TntInstantExplode)
		{
			char HEX[] = { 0x40 };
			write_process(0x0051E6A0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			TntInstantExplode = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x0051E6A0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			TntInstantExplode = false;
		}
	}

	if (ScrollHostMenu3 == 3)
	{
		if (!TntGoInGround)
		{
			char HEX[] = { 0x4F };
			write_process(0x0051E558, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			TntGoInGround = true;
		}
		else
		{
			char HEX[] = { 0x3F };
			write_process(0x0051E558, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			TntGoInGround = false;
		}
	}

	if (ScrollHostMenu3 == 4)
	{
		if (!TntSoundOff)
		{
			char HEX[] = { 0xFF, 0x60, 0x18, 0x90 };
			write_process(0x00245BE4, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			TntSoundOff = true;
		}
		else
		{
			char HEX[] = { 0xFF, 0x60, 0x08, 0x90 };
			write_process(0x00245BE4, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			TntSoundOff = false;
		}
	}

	if (ScrollHostMenu3 == 5)
	{
		if (!BigCreeper)
		{
			char HEX[] = { 0x41 };
			write_process(0x001CC81C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			BigCreeper = true;
		}
		else
		{
			char HEX[] = { 0x40 };
			write_process(0x001CC81C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			BigCreeper = false;
		}
	}

	if (ScrollHostMenu3 == 6)
	{
		if (!CreeperNuclear)
		{
			char HEX[] = { 0x3F, 0xFF };
			write_process(0x001CC7E0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			CreeperNuclear = true;
		}
		else
		{
			char HEX[] = { 0x3F, 0x80 };
			write_process(0x001CC7E0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			CreeperNuclear = false;
		}
	}

	if (ScrollHostMenu3 == 7)
	{
		if (!CreeperFire)
		{
			char HEX[] = { 0x39, 0x40, 0x00, 0x10 };
			write_process(0x001CC894, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			CreeperFire = true;
		}
		else
		{
			char HEX[] = { 0x39, 0x40, 0x00, 0x00 };
			write_process(0x001CC894, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			CreeperFire = false;
		}
	}

	if (ScrollHostMenu3 == 8)
	{
		if (!DisableTotem)
		{
			char HEX[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x003A52B8, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			DisableTotem = true;
		}
		else
		{
			char HEX[] = { 0xF8, 0x21, 0xFF, 0x41 };
			write_process(0x003A52B8, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			DisableTotem = false;
		}
	}

	if (ScrollHostMenu3 == 9)
	{
		if (!GlitchedDeadEntity)
		{
			char HEX[] = { 0x18 };
			write_process(0x00EA89E2, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			GlitchedDeadEntity = true;
		}
		else
		{
			char HEX[] = { 0x08 };
			write_process(0x00EA89E2, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			GlitchedDeadEntity = false;
		}
	}

	if (ScrollHostMenu3 == 10)
	{
		if (!DisableSpawnMobs)
		{
			char HEX[] = { 0x40 };
			write_process(0x004619E4, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			DisableSpawnMobs = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x004619E4, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			DisableSpawnMobs = false;
		}
	}
}

void SelectNonHost()
{
	if (ScrollNonHostMenu == 0)
	{
		if (!SuperSpeed)
		{
			char HEX[] = { 0xFF, 0xFF, 0xFF };
			write_process(0x003ABD49, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			SuperSpeed = true;
		}
		else
		{
			char HEX[] = { 0x26, 0xAD, 0x89 };
			write_process(0x003ABD49, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			SuperSpeed = false;
		}
	}

	if (ScrollNonHostMenu == 1)
	{
		if (!SuperSpeedV2)
		{
			char HEX[] = { 0x00 };
			write_process(0x003AA999, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			SuperSpeedV2 = true;
		}
		else
		{
			char HEX[] = { 0x68 };
			write_process(0x003AA999, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			SuperSpeedV2 = false;
		}
	}

	if (ScrollNonHostMenu == 2)
	{
		if (!SuperSpeedV3)
		{
			char HEX[] = { 0x3F, 0x10, 0x23, 0x50 };
			write_process(0x003ABD48, &HEX, sizeof(HEX));

			char HEX1[] = { 0x00 };
			write_process(0x003AA999, &HEX1, sizeof(HEX1));
			OPTION_TOGGLE(true);
			sleep(200);
			SuperSpeedV3 = true;
		}
		else
		{
			char HEX[] = { 0x3E, 0x26, 0xAD, 0x89 };
			write_process(0x003ABD48, &HEX, sizeof(HEX));

			char HEX1[] = { 0x68 };
			write_process(0x003AA999, &HEX1, sizeof(HEX1));
			OPTION_TOGGLE(false);
			sleep(200);
			SuperSpeedV3 = false;
		}
	}

	if (ScrollNonHostMenu == 3)
	{
		if (!SuperSpeedV4)
		{
			char HEX[] = { 0x3F, 0xFF, 0x00, 0x01 };
			write_process(0x003ABD48, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			SuperSpeedV4 = true;
		}
		else
		{
			char HEX[] = { 0x3E, 0x26, 0xAD, 0x89 };
			write_process(0x003ABD48, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			SuperSpeedV4 = false;
		}
	}

	if (ScrollNonHostMenu == 4)
	{
		if (!MultiJump)
		{
			char HEX[] = { 0x14 };
			write_process(0x0022790B, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			MultiJump = true;
		}
		else
		{
			char HEX[] = { 0x18 };
			write_process(0x0022790B, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			MultiJump = false;
		}
	}

	if (ScrollNonHostMenu == 5)
	{
		if (!JumpForBuild)
		{
			char HEX[] = { 0xFC, 0x80 };
			write_process(0x002271F4, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			JumpForBuild = true;
		}
		else
		{
			char HEX[] = { 0xFC, 0x20 };
			write_process(0x002271F4, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			JumpForBuild = false;
		}
	}

	if (ScrollNonHostMenu == 6)
	{
		if (!JumpInSky)
		{
			char HEX[] = { 0x40 };
			write_process(0x00011ADC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			JumpInSky = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00011ADC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			JumpInSky = false;
		}
	}

	if (ScrollNonHostMenu == 7)
	{
		if (!SuperJump)
		{
			char HEX[] = { 0x3F, 0x47, 0x7F, 0x42 };
			write_process(0x003AA77C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			SuperJump = true;
		}
		else
		{
			char HEX[] = { 0x3E, 0xD7, 0x0A, 0x3D };
			write_process(0x003AA77C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			SuperJump = false;
		}
	}

	if (ScrollNonHostMenu == 8)
	{
		if (!SuperJumpV2)
		{
			char HEX[] = { 0x3F };
			write_process(0x003AA77C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			SuperJumpV2 = true;
		}
		else
		{
			char HEX[] = { 0x3E };
			write_process(0x003AA77C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			SuperJumpV2 = false;
		}
	}

	if (ScrollNonHostMenu == 9)
	{
		if (!JumpForward)
		{
			char HEX[] = { 0x80 };
			write_process(0x003AA999, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			JumpForward = true;
		}
		else
		{
			char HEX[] = { 0x68 };
			write_process(0x003AA999, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			JumpForward = false;
		}
	}

	if (ScrollNonHostMenu == 10)
	{
		if (!RemoveJump)
		{
			char HEX[] = { 0xF4 };
			write_process(0x003ABDC9, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			RemoveJump = true;
		}
		else
		{
			char HEX[] = { 0xB4 };
			write_process(0x003ABDC9, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			RemoveJump = false;
		}
	}

	if (ScrollNonHostMenu == 11)
	{
		if (!JumpSpeed)
		{
			char HEX[] = { 0xA0 };
			write_process(0x003AA999, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			JumpSpeed = true;
		}
		else
		{
			char HEX[] = { 0x68 };
			write_process(0x003AA999, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			JumpSpeed = false;
		}
	}

	if (ScrollNonHostMenu == 12)
	{
		if (!SwimFly)
		{
			char HEX[] = { 0x3B, 0x40, 0x00, 0x10 };
			write_process(0x00390410, &HEX, sizeof(HEX));

			char HEX1[] = { 0x3D };
			write_process(0x003ABD44, &HEX1, sizeof(HEX1));
			OPTION_TOGGLE(true);
			sleep(200);
			SwimFly = true;
		}
		else
		{
			char HEX[] = { 0x3B, 0x40, 0x00, 0x00 };
			write_process(0x00390410, &HEX, sizeof(HEX));

			char HEX1[] = { 0x3C };
			write_process(0x003ABD44, &HEX1, sizeof(HEX1));
			OPTION_TOGGLE(false);
			sleep(200);
			SwimFly = false;
		}
	}

	if (ScrollNonHostMenu == 13)
	{
		if (!MovementSwim)
		{
			char HEX[] = { 0xBC };
			write_process(0x003ABD44, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			MovementSwim = true;
		}
		else
		{
			char HEX[] = { 0x3C };
			write_process(0x003ABD44, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			MovementSwim = false;
		}
	}

	if (ScrollNonHostMenu == 14)
	{
		if (!SwimGlitch)
		{
			char HEX[] = { 0x40 };
			write_process(0x00B0229C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			SwimGlitch = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00B0229C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			SwimGlitch = false;
		}
	}

	if (ScrollNonHostMenu == 15)
	{
		if (!NoColission)
		{
			char HEX[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
			write_process(0x00011230, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			NoColission = true;
		}
		else
		{
			char HEX[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
			write_process(0x00011230, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			NoColission = false;
		}
	}

	if (ScrollNonHostMenu == 16)
	{
		if (!NoColissionBypass)
		{
			char HEX[] = { 0x40 };
			write_process(0x002271B0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			NoColissionBypass = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x002271B0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			NoColissionBypass = false;
		}
	}

	if (ScrollNonHostMenu == 17)
	{
		if (!FlyModeX)
		{
			char HEX[] = { 0x40 };
			write_process(0x00B023EC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			FlyModeX = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00B023EC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			FlyModeX = false;
		}
	}

	if (ScrollNonHostMenu == 18)
	{
		NonHostMenu(false);
		sleep(100);
		NonHostMenu1(true);
		sleep(100);
	}
}

void SelectNonHost1()
{
	if (ScrollNonHostMenu1 == 0)
	{
		if (!ItemsIDs)
		{
			char HEX[] = { 0x40 };
			write_process(0x003097C8, &HEX, sizeof(HEX));

			char HEX1[] = { 0x40 };
			write_process(0x003097B8, &HEX1, sizeof(HEX1));
			OPTION_TOGGLE(true);
			sleep(200);
			ItemsIDs = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x003097C8, &HEX, sizeof(HEX));

			char HEX1[] = { 0x40 };
			write_process(0x003097B8, &HEX1, sizeof(HEX1));
			OPTION_TOGGLE(false);
			sleep(200);
			ItemsIDs = false;
		}
	}

	if (ScrollNonHostMenu1 == 1)
	{
		if (!AntiKick)
		{
			char HEX[] = { 0x40 };
			write_process(0x00AEE434, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			AntiKick = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00AEE434, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			AntiKick = false;
		}
	}

	if (ScrollNonHostMenu1 == 2)
	{
		if (!StuckInBlock)
		{
			char HEX[] = { 0x40 };
			write_process(0x00389B3C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			StuckInBlock = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00389B3C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			StuckInBlock = false;
		}
	}

	if (ScrollNonHostMenu1 == 3)
	{
		if (!ChangePosView)
		{
			char HEX[] = { 0x40 };
			write_process(0x00A99420, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			ChangePosView = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00A99420, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			ChangePosView = false;
		}
	}

	if (ScrollNonHostMenu1 == 4)
	{
		if (!FunnySound)
		{
			char HEX[] = { 0xFF };
			write_process(0x00AEB090, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			FunnySound = true;
		}
		else
		{
			char HEX[] = { 0x3F };
			write_process(0x00AEB090, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			FunnySound = false;
		}
	}

	if (ScrollNonHostMenu1 == 5)
	{
		if (!FloatUP)
		{
			char HEX[] = { 0x3F };
			write_process(0x003ABDC8, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			FloatUP = true;
		}
		else
		{
			char HEX[] = { 0xBF };
			write_process(0x003ABDC8, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			FloatUP = false;
		}
	}

	if (ScrollNonHostMenu1 == 6)
	{
		if (!ESPCheast)
		{
			char HEX[] = { 0x3E, 0xFF };
			write_process(0x00A9C2B4, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			ESPCheast = true;
		}
		else
		{
			char HEX[] = { 0x3F, 0x80 };
			write_process(0x00A9C2B4, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			ESPCheast = false;
		}
	}

	if (ScrollNonHostMenu1 == 7)
	{
		if (!CameraDown)
		{
			char HEX[] = { 0xFC, 0x02, 0x10 };
			write_process(0x004B1CE0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			CameraDown = true;
		}
		else
		{
			char HEX[] = { 0xFC, 0x01, 0x10 };
			write_process(0x004B1CE0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			CameraDown = false;
		}
	}

	if (ScrollNonHostMenu1 == 8)
	{
		if (!InstantMine)
		{
			char HEX[] = { 0xBF };
			write_process(0x00AEB090, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			InstantMine = true;
		}
		else
		{
			char HEX[] = { 0x3F };
			write_process(0x00AEB090, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			InstantMine = false;
		}
	}

	if (ScrollNonHostMenu1 == 9)
	{
		if (!InfiniteCraft)
		{
			char HEX[] = { 0x01 };
			write_process(0x0098871F, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			InfiniteCraft = true;
		}
		else
		{
			char HEX[] = { 0x00 };
			write_process(0x0098871F, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			InfiniteCraft = false;
		}
	}

	if (ScrollNonHostMenu1 == 10)
	{
		if (!HudMiniGames)
		{
			char HEX[] = { 0x41 };
			write_process(0x00AD8480, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			HudMiniGames = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00AD8480, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			HudMiniGames = false;
		}
	}

	if (ScrollNonHostMenu1 == 11)
	{
		if (!AntiTeleport)
		{
			char HEX[] = { 0xFF, 0xFF, 0xFF, 0xFF };
			write_process(0x003AFB60, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			AntiTeleport = true;
		}
		else
		{
			char HEX[] = { 0x3F, 0x7A, 0xE1, 0x48 };
			write_process(0x003AFB60, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			AntiTeleport = false;
		}
	}

	if (ScrollNonHostMenu1 == 12)
	{
		if (!UFOMode)
		{
			char HEX[] = { 0x3F, 0x00, 0x7A, 0xFF };
			write_process(0x003ABDD0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			UFOMode = true;
		}
		else
		{
			char HEX[] = { 0x3F, 0xEF, 0x5C, 0x29 };
			write_process(0x003ABDD0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			UFOMode = false;
		}
	}

	if (ScrollNonHostMenu1 == 13)
	{
		if (!AntiAFK)
		{
			char HEX[] = { 0x3F, 0x80 };
			write_process(0x002267B0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			AntiAFK = true;
		}
		else
		{
			char HEX[] = { 0x00, 0x00 };
			write_process(0x002267B0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			AntiAFK = false;
		}
	}

	if (ScrollNonHostMenu1 == 14)
	{
		if (!SensibilityFast)
		{
			char HEX[] = { 0x42, 0xFF };
			write_process(0x00ABA948, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			SensibilityFast = true;
		}
		else
		{
			char HEX[] = { 0x42, 0x48 };
			write_process(0x00ABA948, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			SensibilityFast = false;
		}
	}

	if (ScrollNonHostMenu1 == 15)
	{
		if (!SensiblityExtrem)
		{
			char HEX[] = { 0x45, 0xFF };
			write_process(0x00ABA948, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			SensiblityExtrem = true;
		}
		else
		{
			char HEX[] = { 0x42, 0x48 };
			write_process(0x00ABA948, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			SensiblityExtrem = false;
		}
	}

	if (ScrollNonHostMenu1 == 16)
	{
		if (!WalkAlone)
		{
			char HEX[] = { 0xFF, 0x40 };
			write_process(0x003ABE18, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			WalkAlone = true;
		}
		else
		{
			char HEX[] = { 0xFF, 0x20 };
			write_process(0x003ABE18, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			WalkAlone = false;
		}
	}

	if (ScrollNonHostMenu1 == 17)
	{
		if (!NameOverHead)
		{
			char HEX[] = { 0x4C };
			write_process(0x00AD8158, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			NameOverHead = true;
		}
		else
		{
			char HEX[] = { 0x2C };
			write_process(0x00AD8158, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			NameOverHead = false;
		}
	}

	if (ScrollNonHostMenu1 == 18)
	{
		NonHostMenu1(false);
		sleep(100);
		NonHostMenu2(true);
		sleep(100);
	}
}

void SelectNonHost2()
{
	if (ScrollNonHostMenu2 == 0)
	{
		if (!NameOverHeadV2)
		{
			char HEX[] = { 0xFF, 0xC0, 0xE0, 0x90 };
			write_process(0x00AD8110, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			NameOverHeadV2 = true;
		}
		else
		{
			char HEX[] = { 0xFF, 0xC0, 0x10, 0x90 };
			write_process(0x00AD8110, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			NameOverHeadV2 = false;
		}
	}

	if (ScrollNonHostMenu2 == 1)
	{
		if (!StaticMovement)
		{
			char HEX[] = { 0xFF, 0xA0, 0x18, 0x90 };
			write_process(0x00A98FA4, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			StaticMovement = true;
		}
		else
		{
			char HEX[] = { 0xFF, 0xA0, 0x08, 0x90 };
			write_process(0x00A98FA4, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			StaticMovement = false;
		}
	}

	if (ScrollNonHostMenu2 == 2)
	{
		if (!WalkInSky)
		{
			char HEX[] = { 0x40 };
			write_process(0x00011B00, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			WalkInSky = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00011B00, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			WalkInSky = false;
		}
	}

	if (ScrollNonHostMenu2 == 3)
	{
		if (!GravityMoon)
		{
			char HEX[] = { 0x40 };
			write_process(0x003ABF88, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			GravityMoon = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x003ABF88, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			GravityMoon = false;
		}
	}

	if (ScrollNonHostMenu2 == 4)
	{
		if (!LookForback)
		{
			char HEX[] = { 0x23 };
			write_process(0x00A97F2C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			LookForback = true;
		}
		else
		{
			char HEX[] = { 0x43 };
			write_process(0x00A97F2C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			LookForback = false;
		}
	}

	if (ScrollNonHostMenu2 == 5)
	{
		if (!CameraDownR3)
		{
			char HEX[] = { 0xFC, 0x00, 0xF8, 0x90 };
			write_process(0x004B1D60, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			CameraDownR3 = true;
		}
		else
		{
			char HEX[] = { 0xFC, 0x20, 0xF8, 0x90 };
			write_process(0x004B1D60, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			CameraDownR3 = false;
		}
	}

	if (ScrollNonHostMenu2 == 6)
	{
		if (!BetterTime)
		{
			char HEX[] = { 0x0F };
			write_process(0x00A9A6DC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			BetterTime = true;
		}
		else
		{
			char HEX[] = { 0x3F };
			write_process(0x00A9A6DC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			BetterTime = false;
		}
	}

	if (ScrollNonHostMenu2 == 7)
	{
		if (!SeeOutMap)
		{
			char HEX[] = { 0xDF };
			write_process(0x00A97F34, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			SeeOutMap = true;
		}
		else
		{
			char HEX[] = { 0x3F };
			write_process(0x00A97F34, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			SeeOutMap = false;
		}
	}

	if (ScrollNonHostMenu2 == 8)
	{
		if (!ScaffoldBETA)
		{
			char HEX[] = { 0x50 };
			write_process(0x0022C7FC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			ScaffoldBETA = true;
		}
		else
		{
			char HEX[] = { 0x40 };
			write_process(0x0022C7FC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			ScaffoldBETA = false;
		}
	}

	if (ScrollNonHostMenu2 == 9)
	{
		if (!DayNight)
		{
			char HEX[] = { 0x2F };
			write_process(0x014C6880, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			DayNight = true;
		}
		else
		{
			char HEX[] = { 0x3F };
			write_process(0x014C6880, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			DayNight = false;
		}
	}

	if (ScrollNonHostMenu2 == 10)
	{
		if (!LabyMode)
		{
			char MOD[] = { 0xBF, 0x0F };
			write_process(0x00AD14EC, &MOD, sizeof(MOD));

			char MOD1[] = { 0xBF, 0x23 };
			write_process(0x00AD0274, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4C };
			write_process(0x00AD8158, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x82 };
			write_process(0x00B01DEC, &MOD3, sizeof(MOD3));

			char MOD4[] = { 0x40 };
			write_process(0x003097C8, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0x40 };
			write_process(0x003097B8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x38, 0x80, 0x00, 0x01 };
			write_process(0x0090B5F0, &MOD6, sizeof(MOD6));

			char MOD7[] = { 0x3F, 0xFF };
			write_process(0x00AD5A5C, &MOD7, sizeof(MOD7));

			char MOD8[] = { 0x40 };
			write_process(0x00227BDC, &MOD8, sizeof(MOD8));
			OPTION_TOGGLE(true);
			sleep(200);
			LabyMode = true;
		}
		else
		{
			char MOD[] = { 0x3F, 0x0F };
			write_process(0x00AD14EC, &MOD, sizeof(MOD));

			char MOD1[] = { 0x3F, 0x23 };
			write_process(0x00AD0274, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x2C };
			write_process(0x00AD8158, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x41, 0x82 };
			write_process(0x00B01DEC, &MOD3, sizeof(MOD3));

			char MOD4[] = { 0x41 };
			write_process(0x003097C8, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0x41 };
			write_process(0x003097B8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x38, 0x80, 0x00, 0x00 };
			write_process(0x0090B5F0, &MOD6, sizeof(MOD6));

			char MOD7[] = { 0x3F, 0x80 };
			write_process(0x00AD5A5C, &MOD7, sizeof(MOD7));

			char MOD8[] = { 0x41 };
			write_process(0x00227BDC, &MOD8, sizeof(MOD8));
			OPTION_TOGGLE(false);
			sleep(200);
			LabyMode = false;
		}
	}

	if (ScrollNonHostMenu2 == 11)
	{
		if (!ESPPlayers)
		{
			char HEX[] = { 0x41 };
			write_process(0x00AD5B60, &HEX, sizeof(HEX));

			char HEX1[] = { 0x6F, 0xFF };
			write_process(0x00AD5A5C, &HEX1, sizeof(HEX1));
			OPTION_TOGGLE(true);
			sleep(200);
			ESPPlayers = true;
		}
		else
		{
			char HEX[] = { 0x40 };
			write_process(0x00AD5B60, &HEX, sizeof(HEX));

			char HEX1[] = { 0x3F, 0x80 };
			write_process(0x00AD5A5C, &HEX1, sizeof(HEX1));
			OPTION_TOGGLE(false);
			sleep(200);
			ESPPlayers = false;
		}
	}

	if (ScrollNonHostMenu2 == 12)
	{
		if (!CanFly)
		{
			char HEX[] = { 0x40 };
			write_process(0x00B02378, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			CanFly = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00B02378, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			CanFly = false;
		}
	}

	if (ScrollNonHostMenu2 == 13)
	{
		if (!NoColissionEntity)
		{
			char HEX[] = { 0x41 };
			write_process(0x000108AC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			NoColissionEntity = true;
		}
		else
		{
			char HEX[] = { 0x40 };
			write_process(0x000108AC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			NoColissionEntity = false;
		}
	}

	if (ScrollNonHostMenu2 == 14)
	{
		if (!AlwaysOnCrouch)
		{
			char HEX[] = { 0x01 };
			write_process(0x00B0142B, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			AlwaysOnCrouch = true;
		}
		else
		{
			char HEX[] = { 0x00 };
			write_process(0x00B0142B, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			AlwaysOnCrouch = false;
		}
	}

	if (ScrollNonHostMenu2 == 15)
	{
		if (!GetPlayersIDS)
		{
			char HEX[] = { 0x01 };
			write_process(0x004B5DF3, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			GetPlayersIDS = true;
		}
		else
		{
			char HEX[] = { 0x00 };
			write_process(0x004B5DF3, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			GetPlayersIDS = false;
		}
	}

	if (ScrollNonHostMenu2 == 16)
	{
		if (!SpoofNPID)
		{
			sleep(200);
			SpoofNPID = true;
		}
		else
		{
			sleep(200);
			SpoofNPID = false;
		}
	}

	if (ScrollNonHostMenu2 == 17)
	{
		if (!PlayersOnElytra)
		{
			char HEX[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x003B3008, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			PlayersOnElytra = true;
		}
		else
		{
			char HEX[] = { 0xF8, 0x21, 0xFF, 0x91 };
			write_process(0x003B3008, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			PlayersOnElytra = false;
		}
	}

	if (ScrollNonHostMenu2 == 18)
	{
		NonHostMenu2(false);
		sleep(100);
		NonHostMenu3(true);
		sleep(100);
	}
}

void SelectNonHost3()
{
	if (ScrollNonHostMenu3 == 0)
	{
		if (!WaterSlowDown)
		{
			char HEX[] = { 0x3F, 0x7C, 0xCC, 0xCD };
			write_process(0x0003AA964, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			WaterSlowDown = true;
		}
		else
		{
			char HEX[] = { 0x3F, 0x4C, 0xCC, 0xCD };
			write_process(0x0003AA964, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			WaterSlowDown = false;
		}
	}

	if (ScrollNonHostMenu3 == 1)
	{
		if (!JumpInLava)
		{
			char HEX[] = { 0x3F, 0xF4, 0x7A, 0xE1 };
			write_process(0x003AA940, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			JumpInLava = true;
		}
		else
		{
			char HEX[] = { 0x3F, 0xBA, 0xCC, 0xCD };
			write_process(0x003AA940, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			JumpInLava = false;
		}
	}

	if (ScrollNonHostMenu3 == 2)
	{
		if (!CrouchMovement)
		{
			char HEX[] = { 0x0F };
			write_process(0x00B0143F, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			CrouchMovement = true;
		}
		else
		{
			char HEX[] = { 0x0E };
			write_process(0x00B0143F, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			CrouchMovement = false;
		}
	}

	if (ScrollNonHostMenu3 == 3)
	{
		if (!FakeLag)
		{
			OPTION_TOGGLE(true);
			sleep(200);
			FakeLag = true;
		}
		else
		{
			OPTION_TOGGLE(false);
			sleep(200);
			FakeLag = false;
		}
	}

	if (ScrollNonHostMenu3 == 4)
	{
		if (!PosPlaceBlock)
		{
			char HEX[] = { 0x28 };
			write_process(0x0022C85A, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			PosPlaceBlock = true;
		}
		else
		{
			char HEX[] = { 0x08 };
			write_process(0x0022C85A, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			PosPlaceBlock = false;
		}
	}

	if (ScrollNonHostMenu3 == 5)
	{
		if (!DestroyGame)
		{
			char HEX[] = { 0x48 };
			write_process(0x00B21C96, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			DestroyGame = true;
		}
		else
		{
			char HEX[] = { 0x08 };
			write_process(0x00B21C96, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			DestroyGame = false;
		}
	}

	if (ScrollNonHostMenu3 == 6)
	{
		if (!Levitation)
		{
			char HEX[] = { 0xBF };
			write_process(0x003ABDD0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			Levitation = true;
		}
		else
		{
			char HEX[] = { 0x3F };
			write_process(0x003ABDD0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			Levitation = false;
		}
	}

	if (ScrollNonHostMenu3 == 7)
	{
		if (!ReturnInXMB)
		{
			char HEX[] = { 0x40 };
			write_process(0x00AD8320, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			ReturnInXMB = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00AD8320, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			ReturnInXMB = false;
		}
	}

	if (ScrollNonHostMenu3 == 8)
	{
		if (!ReturnInXMBV2)
		{
			char HEX[] = { 0x40 };
			write_process(0x00785DBC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			ReturnInXMBV2 = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00785DBC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			ReturnInXMBV2 = false;
		}
	}

	if (ScrollNonHostMenu3 == 9)
	{
		if (!AddFakeClone)
		{
			char HEX[] = { 0x40 };
			write_process(0x00AEFA74, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			AddFakeClone = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00AEFA74, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			AddFakeClone = false;
		}
	}

	if (ScrollNonHostMenu3 == 10)
	{
		if (!WalkWithInventory)
		{
			OPTION_TOGGLE(true);
			sleep(200);
			WalkWithInventory = true;
		}
		else
		{
			OPTION_TOGGLE(false);
			sleep(200);
			WalkWithInventory = false;
		}
	}

	if (ScrollNonHostMenu3 == 11)
	{
		if (!InvisiblePlayers)
		{
			char HEX[] = { 0x40 };
			write_process(0x00011ADC, &HEX, sizeof(HEX));

			char HEX1[] = { 0x3F, 0xFF };
			write_process(0x003ABDD0, &HEX1, sizeof(HEX1));
			OPTION_TOGGLE(true);
			sleep(200);
			InvisiblePlayers = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00011ADC, &HEX, sizeof(HEX));

			char HEX1[] = { 0x3F, 0xEF };
			write_process(0x003ABDD0, &HEX1, sizeof(HEX1));
			OPTION_TOGGLE(false);
			sleep(200);
			InvisiblePlayers = false;
		}
	}

	if (ScrollNonHostMenu3 == 12)
	{
		if (!AutoLadder)
		{
			char HEX[] = { 0x01 };
			write_process(0x003A74F3, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			AutoLadder = true;
		}
		else
		{
			char HEX[] = { 0x00 };
			write_process(0x003A74F3, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			AutoLadder = false;
		}
	}

	if (ScrollNonHostMenu3 == 13)
	{
		if (!AirToWater)
		{
			char HEX[] = { 0x40 };
			write_process(0x001D7FCC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			AirToWater = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x001D7FCC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			AirToWater = false;
		}
	}

	if (ScrollNonHostMenu3 == 14)
	{
		if (!MultiJumpV2)
		{
			char HEX[] = { 0x02 };
			write_process(0x003B000A, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			MultiJumpV2 = true;
		}
		else
		{
			char HEX[] = { 0x01 };
			write_process(0x003B000A, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			MultiJumpV2 = false;
		}
	}

	if (ScrollNonHostMenu3 == 15)
	{
		if (!SuicideMode)
		{
			char HEX[] = { 0x3F, 0xFF };
			write_process(0x003ABDD0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			SuicideMode = true;
		}
		else
		{
			char HEX[] = { 0x3F, 0xEF };
			write_process(0x003ABDD0, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			SuicideMode = false;
		}
	}

	if (ScrollNonHostMenu3 == 16)
	{
		if (!GameSpeedStatic)
		{
			char HEX[] = { 0x41 };
			write_process(0x00AEFE64, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			GameSpeedStatic = true;
		}
		else
		{
			char HEX[] = { 0x40 };
			write_process(0x00AEFE64, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			GameSpeedStatic = false;
		}
	}

	if (ScrollNonHostMenu3 == 17)
	{
		if (!Get64Items)
		{
			GET64ITEMS();
			OPTION_TOGGLE(true);
			sleep(200);
			Get64Items = true;
		}
		else
		{
			//s
			OPTION_TOGGLE(false);
			sleep(200);
			Get64Items = false;
		}
	}

	if (ScrollNonHostMenu3 == 18)
	{
		NonHostMenu3(false);
		sleep(100);
		NonHostMenu4(true);
		sleep(100);
	}
}

void SelectNonHost4()
{
	if (ScrollNonHostMenu4 == 0)
	{
		if (!AutoJump)
		{
			char HEX[] = { 0x41 };
			write_process(0x00B01BAC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			AutoJump = true;
		}
		else
		{
			char HEX[] = { 0x40 };
			write_process(0x00B01BAC, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			AutoJump = false;
		}
	}

	if (ScrollNonHostMenu4 == 1)
	{
		if (!AutoChangeView)
		{
			char HEX[] = { 0x40 };
			write_process(0x00AEF56C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			AutoChangeView = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00AEF56C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			AutoChangeView = false;
		}
	}

	if (ScrollNonHostMenu4 == 2)
	{
		if (!AutoCrouch)
		{
			char HEX[] = { 0x40 };
			write_process(0x00AEF514, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			AutoCrouch = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00AEF514, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			AutoCrouch = false;
		}
	}

	if (ScrollNonHostMenu4 == 3)
	{
		if (!AutoMine)
		{
			char MOD[] = { 0x40 };
			write_process(0x00AEC42C, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			AutoMine = true;
		}
		else
		{
			char MOD[] = { 0x41 };
			write_process(0x00AEC42C, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			AutoMine = false;
		}
	}

	if (ScrollNonHostMenu4 == 4)
	{
		if (!AutoHit)
		{
			char HEX[] = { 0x40 };
			write_process(0x00AEC34C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			AutoHit = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00AEC34C, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			AutoHit = false;
		}
	}

	if (ScrollNonHostMenu4 == 5)
	{
		if (!AutoTossItems)
		{
			char HEX[] = { 0x40 };
			write_process(0x00AEF428, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			AutoTossItems = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00AEF428, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			AutoTossItems = false;
		}
	}

	if (ScrollNonHostMenu4 == 6)
	{
		if (!AutoBuild)
		{
			char HEX[] = { 0x40 };
			write_process(0x00AECF10, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			AutoBuild = true;
		}
		else
		{
			char HEX[] = { 0x41 };
			write_process(0x00AECF10, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			AutoBuild = false;
		}
	}

	if (ScrollNonHostMenu4 == 7)
	{
		if (!BatEggsCrash)
		{
			char HEX[] = { 0x08 };
			write_process(0x324193B9, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			BatEggsCrash = true;
		}
		else
		{
			char HEX[] = { 0x00 };
			write_process(0x324193B9, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			BatEggsCrash = false;
		}
	}

	if (ScrollNonHostMenu4 == 8)
	{
		if (!BatEggsFreeze)
		{
			char HEX[] = { 0x01 };
			write_process(0x324193B9, &HEX, sizeof(HEX));
			OPTION_TOGGLE(true);
			sleep(200);
			BatEggsFreeze = true;
		}
		else
		{
			char HEX[] = { 0x00 };
			write_process(0x324193B9, &HEX, sizeof(HEX));
			OPTION_TOGGLE(false);
			sleep(200);
			BatEggsFreeze = false;
		}
	}

	if (ScrollNonHostMenu4 == 9)
	{
		if (!GetSpecialItems)
		{
			char HEX[] = { 0x32, 0x1B, 0xB4, 0x20 };
			write_process(0x3241B6B4, &HEX, sizeof(HEX));

			char HEX1[] = { 0x32, 0x1B, 0xB7, 0xF0 };
			write_process(0x3241B7A4, &HEX1, sizeof(HEX1));

			char HEX2[] = { 0x32, 0x1D, 0x45, 0x90 };
			write_process(0x3241B894, &HEX2, sizeof(HEX2));

			char HEX3[] = { 0x32, 0x1D, 0x9B, 0x10 };
			write_process(0x3241B984, &HEX3, sizeof(HEX3));

			char HEX4[] = { 0x32, 0x1D, 0x9D, 0xE0 };
			write_process(0x3241BA74, &HEX4, sizeof(HEX4));

			char HEX5[] = { 0x32, 0x1D, 0x70, 0x00 };
			write_process(0x3241BB64, &HEX5, sizeof(HEX5));

			char HEX6[] = { 0x32, 0x20, 0x8D, 0xA0 };
			write_process(0x3241BC54, &HEX6, sizeof(HEX6));

			char HEX7[] = { 0x32, 0x1B, 0xE3, 0xA0 };
			write_process(0x3241BD44, &HEX7, sizeof(HEX7));

			char HEX8[] = { 0x32, 0x1B, 0xE9, 0xF0 };
			write_process(0x3241BE34, &HEX8, sizeof(HEX8));

			char HEX9[] = { 0x32, 0x1B, 0xEC, 0xE0 };
			write_process(0x3241BF24, &HEX9, sizeof(HEX9));

			char HEX10[] = { 0x32, 0x1B, 0xEF, 0xD0 };
			write_process(0x3241C014, &HEX10, sizeof(HEX10));

			char HEX11[] = { 0x32, 0x1B, 0xF2, 0xC0 };
			write_process(0x3241C104, &HEX11, sizeof(HEX11));

			char HEX12[] = { 0x32, 0x1B, 0xF5, 0x10 };
			write_process(0x3241B3D4, &HEX12, sizeof(HEX12));

			char HEX13[] = { 0x32, 0x1B, 0xF7, 0x60 };
			write_process(0x3241B284, &HEX13, sizeof(HEX13));

			char HEX14[] = { 0x32, 0x1B, 0xF9, 0xB0 };
			write_process(0x3241B134, &HEX14, sizeof(HEX14));

			char HEX15[] = { 0x32, 0x1B, 0xFC, 0x00 };
			write_process(0x3241AFE4, &HEX15, sizeof(HEX15));

			char HEX16[] = { 0x32, 0x1B, 0xFE, 0x50 };
			write_process(0x3241AE94, &HEX16, sizeof(HEX16));

			char HEX17[] = { 0x32, 0x1C, 0x00, 0xA0 };
			write_process(0x3241AD44, &HEX17, sizeof(HEX17));

			char HEX18[] = { 0x32, 0x1C, 0x84, 0xF0 };
			write_process(0x3241ABF4, &HEX18, sizeof(HEX18));

			char HEX19[] = { 0x32, 0x1C, 0x89, 0x90 };
			write_process(0x3241AAA4, &HEX19, sizeof(HEX19));

			char HEX20[] = { 0x32, 0x1D, 0x2B, 0x90 };
			write_process(0x3241A954, &HEX20, sizeof(HEX20));

			char HEX21[] = { 0x32, 0x1D, 0xA7, 0xA0 };
			write_process(0x3241A804, &HEX21, sizeof(HEX21));

			char HEX22[] = { 0x32, 0x1D, 0xC0, 0x70 };
			write_process(0x3241A6B4, &HEX22, sizeof(HEX22));

			char HEX23[] = { 0x32, 0x1E, 0x8D, 0x20 };
			write_process(0x3241A564, &HEX23, sizeof(HEX23));

			char HEX24[] = { 0x32, 0x1E, 0x8F, 0x70 };
			write_process(0x3241A414, &HEX24, sizeof(HEX24));

			char HEX25[] = { 0x32, 0x1E, 0x91, 0xC0 };
			write_process(0x3241A2C4, &HEX25, sizeof(HEX25));

			char HEX26[] = { 0x32, 0x1E, 0x94, 0x10 };
			write_process(0x3241A174, &HEX26, sizeof(HEX26));

			char HEX27[] = { 0x32, 0x1E, 0x96, 0x60 };
			write_process(0x3241A024, &HEX27, sizeof(HEX27));

			char HEX28[] = { 0x32, 0x1E, 0x98, 0xB0 };
			write_process(0x32419ED4, &HEX28, sizeof(HEX28));

			char HEX29[] = { 0x32, 0x20, 0x8F, 0xF0 };
			write_process(0x32419D84, &HEX29, sizeof(HEX29));

			char HEX30[] = { 0x32, 0x1B, 0xC1, 0x60 };
			write_process(0x324199F4, &HEX30, sizeof(HEX30));

			char HEX31[] = { 0x32, 0x1B, 0xDA, 0x60 };
			write_process(0x324198A4, &HEX31, sizeof(HEX31));

			char HEX32[] = { 0x32, 0x1B, 0xDC, 0xB0 };
			write_process(0x32419754, &HEX32, sizeof(HEX32));

			char HEX33[] = { 0x32, 0x1B, 0xDF, 0x00 };
			write_process(0x32419604, &HEX33, sizeof(HEX33));

			char HEX34[] = { 0x32, 0x1F, 0xB4, 0xC0 };
			write_process(0x324194B4, &HEX34, sizeof(HEX34));

			char HEX35[] = { 0x32, 0x20, 0x01, 0xC0 };
			write_process(0x32419364, &HEX35, sizeof(HEX35));

			char HEX36[] = { 0x32, 0x20, 0x0B, 0xE0 };
			write_process(0x32419214, &HEX36, sizeof(HEX36));

			char HEX37[] = { 0x32, 0x20, 0x32, 0x80 };
			write_process(0x324190C4, &HEX37, sizeof(HEX37));

			char HEX38[] = { 0x32, 0x20, 0x64, 0x20 };
			write_process(0x32418F74, &HEX38, sizeof(HEX38));
			OPTION_TOGGLE(true);
			sleep(200);
			GetSpecialItems = true;
		}
		else
		{
			OPTION_TOGGLE(false);
			sleep(200);
			GetSpecialItems = false;
		}
	}

	if (ScrollNonHostMenu4 == 10)
	{
		if (!ReachAttack)
		{
			char MODZ[] = { 0x80 };
			write_process(0x00A95FB9, &MODZ, sizeof(MODZ));

			char MOD[] = { 0x80 };
			write_process(0x00A95FC1, &MOD, sizeof(MOD));

			char MO[] = { 0x43, 0xA0, 0x00, 0x00 };
			write_process(0x00B351D8, &MO, sizeof(MO));

			char MA[] = { 0x43, 0xA0, 0x00, 0x00 };
			write_process(0x00B351DC, &MA, sizeof(MA));
			OPTION_TOGGLE(true);
			sleep(200);
			ReachAttack = true;
		}
		else
		{
			char MODZ[] = { 0x18 };
			write_process(0x00A95FB9, &MODZ, sizeof(MODZ));

			char MOD[] = { 0x08 };
			write_process(0x00A95FC1, &MOD, sizeof(MOD));

			char MO[] = { 0x40, 0xA0, 0x00, 0x00 };
			write_process(0x00B351D8, &MO, sizeof(MO));

			char MA[] = { 0x40, 0x90, 0x00, 0x00 };
			write_process(0x00B351DC, &MA, sizeof(MA));
			OPTION_TOGGLE(false);
			sleep(200);
			ReachAttack = false;
		}
	}

	if (ScrollNonHostMenu4 == 11)
	{
		if (!AutoSprint)
		{
			char SPEED[] = { 0x40 };
			write_process(0x00B01DEC, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(true);
			sleep(200);
			AutoSprint = true;
		}
		else
		{
			char SPEED[] = { 0x41 };
			write_process(0x00B01DEC, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(false);
			sleep(200);
			AutoSprint = false;
		}
	}

	if (ScrollNonHostMenu4 == 12)
	{
		if (!AutoSprintV2)
		{
			char SPEED[] = { 0x00 };
			write_process(0x00B01EEF, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(true);
			sleep(200);
			AutoSprintV2 = true;
		}
		else
		{
			char SPEED[] = { 0x01 };
			write_process(0x00B01EEF, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(false);
			sleep(200);
			AutoSprintV2 = false;
		}
	}

	if (ScrollNonHostMenu4 == 13)
	{
		if (!InstantHit)
		{
			char SPEED[] = { 0xFF };
			write_process(0x00AEBED4, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(true);
			sleep(200);
			InstantHit = true;
		}
		else
		{
			char SPEED[] = { 0x3E };
			write_process(0x00AEBED4, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(false);
			sleep(200);
			InstantHit = false;
		}
	}

	if (ScrollNonHostMenu4 == 14)
	{
		if (!KillAura)
		{
			char SPEED[] = { 0xFF };
			write_process(0x00233290, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(true);
			sleep(200);
			KillAura = true;
		}
		else
		{
			char SPEED[] = { 0x00 };
			write_process(0x00233290, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(false);
			sleep(200);
			KillAura = false;
		}
	}

	if (ScrollNonHostMenu4 == 15)
	{
		if (!FastBuild)
		{
			char SPEED[] = { 0x40 };
			write_process(0x00AECE70, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(true);
			sleep(200);
			FastBuild = true;
		}
		else
		{
			char SPEED[] = { 0x41 };
			write_process(0x00AECE70, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(false);
			sleep(200);
			FastBuild = false;
		}
	}

	if (ScrollNonHostMenu4 == 16)
	{
		if (!CriticalMode)
		{
			char SPEED[] = { 0x3F, 0xAF };
			write_process(0x003ABDD0, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(true);
			sleep(200);
			CriticalMode = true;
		}
		else
		{
			char SPEED[] = { 0x3F, 0xEF };
			write_process(0x003ABDD0, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(false);
			sleep(200);
			CriticalMode = false;
		}
	}

	if (ScrollNonHostMenu4 == 17)
	{
		if (!CriticalModeV1)
		{
			char MOD[] = { 0x3E, 0x27 };
			write_process(0x003AA77C, &MOD, sizeof(MOD));

			char MOD2[] = { 0xFF };
			write_process(0x00233290, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0xFF, 0xFF };
			write_process(0x00AEBED4, &MOD3, sizeof(MOD3));

			char MOD4[] = { 0x41 };
			write_process(0x00B01BAC, &MOD4, sizeof(MOD4));
			OPTION_TOGGLE(true);
			sleep(200);
			CriticalModeV1 = true;
		}
		else
		{
			char MOD[] = { 0x3E, 0xD7 };
			write_process(0x003AA77C, &MOD, sizeof(MOD));

			char MOD2[] = { 0x00 };
			write_process(0x00233290, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x3E, 0x80 };
			write_process(0x00AEBED4, &MOD3, sizeof(MOD3));

			char MOD4[] = { 0x40 };
			write_process(0x00B01BAC, &MOD4, sizeof(MOD4));
			OPTION_TOGGLE(false);
			sleep(200);
			CriticalModeV1 = false;
		}
	}

	if (ScrollNonHostMenu4 == 18)
	{
		NonHostMenu4(false);
		sleep(100);
		NonHostMenu5(true);
		sleep(100);
	}
}

void SelectNonHost5()
{
	if (ScrollNonHostMenu5 == 0)
	{
		if (!NoSlowDown)
		{
			char SPEED[] = { 0x4F };
			write_process(0x003AFB60, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(true);
			sleep(200);
			NoSlowDown = true;
		}
		else
		{
			char SPEED[] = { 0x3F };
			write_process(0x003AFB60, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(false);
			sleep(200);
			NoSlowDown = false;
		}
	}

	if (ScrollNonHostMenu5 == 1)
	{
		if (!RemoveHurtCam)
		{
			char SPEED[] = { 0x00, 0x00 };
			write_process(0x00A972B0, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(true);
			sleep(200);
			RemoveHurtCam = true;
		}
		else
		{
			char SPEED[] = { 0x40, 0x49 };
			write_process(0x00A972B0, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(false);
			sleep(200);
			RemoveHurtCam = false;
		}
	}

	if (ScrollNonHostMenu5 == 2)
	{
		if (!PressXForHit)
		{
			char SPEED[] = { 0x0F };
			write_process(0x00AEEB83, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(true);
			sleep(200);
			PressXForHit = true;
		}
		else
		{
			char SPEED[] = { 0x01 };
			write_process(0x00AEEB83, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(false);
			sleep(200);
			PressXForHit = false;
		}
	}

	if (ScrollNonHostMenu5 == 3)
	{
		if (!ShowArmor)
		{
			char SPEED[] = { 0x38, 0x80, 0x00, 0x01 };
			write_process(0x0090B5F0, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(true);
			sleep(200);
			ShowArmor = true;
		}
		else
		{
			char SPEED[] = { 0x38, 0x80, 0x00, 0x00 };
			write_process(0x0090B5F0, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(false);
			sleep(200);
			ShowArmor = false;
		}
	}

	if (ScrollNonHostMenu5 == 4)
	{
		if (!UnfairAttack)
		{
			char SPEED[] = { 0xBE };
			write_process(0x00AEBED4, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(true);
			sleep(200);
			UnfairAttack = true;
		}
		else
		{
			char SPEED[] = { 0x3E };
			write_process(0x00AEBED4, &SPEED, sizeof(SPEED));
			OPTION_TOGGLE(false);
			sleep(200);
			UnfairAttack = false;
		}
	}

	if (ScrollNonHostMenu5 == 5)
	{
		if (!HitboxBETA)
		{
			char MOD[] = { 0x01 };
			write_process(0x0003AE03, &MOD, sizeof(MOD));

			char MOD1[] = { 0xFF };
			write_process(0x00233290, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			HitboxBETA = true;
		}
		else
		{
			char MOD[] = { 0x00 };
			write_process(0x0003AE03, &MOD, sizeof(MOD));

			char MOD1[] = { 0x00 };
			write_process(0x00233290, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			HitboxBETA = false;
		}
	}

	if (ScrollNonHostMenu5 == 6)
	{
		if (!BlockStaticCrack)
		{
			char MOD[] = { 0x01 };
			write_process(0x00AE3C3F, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			BlockStaticCrack = true;
		}
		else
		{
			char MOD[] = { 0x00 };
			write_process(0x00AE3C3F, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			BlockStaticCrack = false;
		}
	}

	if (ScrollNonHostMenu5 == 7)
	{
		if (!NoKB)
		{
			char MOD[] = { 0xD3, 0x23, 0x01, 0x30 };
			write_process(0x002335C8, &MOD, sizeof(MOD));

			char MOD1[] = { 0xD8, 0x43, 0x01, 0x38 };
			write_process(0x002335CC, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0xD3, 0x63, 0x01, 0x40 };
			write_process(0x002335D0, &MOD2, sizeof(MOD2));
			OPTION_TOGGLE(true);
			sleep(200);
			NoKB = true;
		}
		else
		{
			char MOD[] = { 0xD8, 0x23, 0x01, 0x30 };
			write_process(0x002335C8, &MOD, sizeof(MOD));

			char MOD1[] = { 0xD8, 0x43, 0x01, 0x38 };
			write_process(0x002335CC, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0xD8, 0x63, 0x01, 0x40 };
			write_process(0x002335D0, &MOD2, sizeof(MOD2));
			OPTION_TOGGLE(false);
			sleep(200);
			NoKB = false;
		}
	}

	if (ScrollNonHostMenu5 == 8)
	{
		if (!BigKB)
		{
			char MOD[] = { 0xD3, 0x23, 0x01, 0x30 };
			write_process(0x002335C8, &MOD, sizeof(MOD));

			char MOD1[] = { 0xD8, 0x43, 0x01, 0x38 };
			write_process(0x002335CC, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0xD9, 0x63, 0x01, 0x40 };
			write_process(0x002335D0, &MOD2, sizeof(MOD2));
			OPTION_TOGGLE(true);
			sleep(200);
			BigKB = true;
		}
		else
		{
			char MOD[] = { 0xD8, 0x23, 0x01, 0x30 };
			write_process(0x002335C8, &MOD, sizeof(MOD));

			char MOD1[] = { 0xD8, 0x43, 0x01, 0x38 };
			write_process(0x002335CC, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0xD8, 0x63, 0x01, 0x40 };
			write_process(0x002335D0, &MOD2, sizeof(MOD2));
			OPTION_TOGGLE(false);
			sleep(200);
			BigKB = false;
		}
	}

	if (ScrollNonHostMenu5 == 9)
	{
		if (!DragonEggs)
		{
			char MOD[] = { 0x30, 0x99, 0xE7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C };
			write_process(0x32418D18, &MOD, sizeof(MOD));

			OPTION_TOGGLE(true);
			sleep(200);
			DragonEggs = true;
		}
		else
		{
			char MOD[] = { 0x30, 0x99, 0xD3, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E };
			write_process(0x32418D18, &MOD, sizeof(MOD));

			OPTION_TOGGLE(false);
			sleep(200);
			DragonEggs = false;
		}
	}

	if (ScrollNonHostMenu5 == 10)
	{
		if (!GolemsEggs)
		{
			char MOD[] = { 0x30, 0x99, 0xF6, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E };
			write_process(0x32418D18, &MOD, sizeof(MOD));

			OPTION_TOGGLE(true);
			sleep(200);
			GolemsEggs = true;
		}
		else
		{
			char MOD[] = { 0x30, 0x99, 0xD3, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E };
			write_process(0x32418D18, &MOD, sizeof(MOD));

			OPTION_TOGGLE(false);
			sleep(200);
			GolemsEggs = false;
		}
	}

	if (ScrollNonHostMenu5 == 11)
	{
		if (!WhiterEggs)
		{
			char MOD[] = { 0x77, 0x00, 0x69, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06 };
			write_process(0x32418A79, &MOD, sizeof(MOD));

			OPTION_TOGGLE(true);
			sleep(200);
			WhiterEggs = true;
		}
		else
		{
			char MOD[] = { 0x73, 0x00, 0x68, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07 };
			write_process(0x32418A79, &MOD, sizeof(MOD));

			OPTION_TOGGLE(false);
			sleep(200);
			WhiterEggs = false;
		}
	}
}

void SelectLobby()
{
	if (ScrollLobbyMenu == 0)
	{
		if (!AllPlayersFastMine)
		{
			char MOD[] = { 0xFF, 0xE0, 0x28, 0x90 };
			write_process(0x0010E0C4, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			AllPlayersFastMine = true;
		}
		else
		{
			char MOD[] = { 0xFF, 0xE0, 0x08, 0x90 };
			write_process(0x0010E0C4, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			AllPlayersFastMine = false;
		}
	}

	if (ScrollLobbyMenu == 1)
	{
		if (!AllPlayersCantMine)
		{
			char MOD[] = { 0xFF, 0xE0, 0x18, 0x90 };
			write_process(0x0010E0C4, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			AllPlayersCantMine = true;
		}
		else
		{
			char MOD[] = { 0xFF, 0xE0, 0x08, 0x90 };
			write_process(0x0010E0C4, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			AllPlayersCantMine = false;
		}
	}

	if (ScrollLobbyMenu == 2)
	{
		if (!AllPlayersCantRun)
		{
			char MOD[] = { 0xFF, 0xE0, 0x00, 0x90 };
			write_process(0x00018CE4, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			AllPlayersCantRun = true;
		}
		else
		{
			char MOD[] = { 0xFF, 0xE0, 0x08, 0x90 };
			write_process(0x00018CE4, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			AllPlayersCantRun = false;
		}
	}

	if (ScrollLobbyMenu == 3)
	{
		if (!AllPlayersSpeed)
		{
			char MOD[] = { 0xFF, 0xE0, 0x28, 0x90 };
			write_process(0x00018CE4, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			AllPlayersSpeed = true;
		}
		else
		{
			char MOD[] = { 0xFF, 0xE0, 0x08, 0x90 };
			write_process(0x00018CE4, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			AllPlayersSpeed = false;
		}
	}

	if (ScrollLobbyMenu == 4)
	{
		if (!AllPlayersSuperRun)
		{
			char MOD[] = { 0x58 };
			write_process(0x004668B6, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			AllPlayersSuperRun = true;
		}
		else
		{
			char MOD[] = { 0x08 };
			write_process(0x004668B6, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			AllPlayersSuperRun = false;
		}
	}

	if (ScrollLobbyMenu == 5)
	{
		if (!AllPlayersZoomFOV)
		{
			OPTION_TOGGLE(true);
			sleep(200);
			AllPlayersZoomFOV = true;
		}
		else
		{
			OPTION_TOGGLE(false);
			sleep(200);
			AllPlayersZoomFOV = false;
		}
	}

	if (ScrollLobbyMenu == 6)
	{
		if (!PlayersCantJoin)
		{
			char MOD[] = { 0x01 };
			write_process(0x0098871F, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			PlayersCantJoin = true;
		}
		else
		{
			char MOD[] = { 0x00 };
			write_process(0x0098871F, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			PlayersCantJoin = false;
		}
	}

	if (ScrollLobbyMenu == 7)
	{
		if (!AllChangeHand)
		{
			char MOD[] = { 0x30, 0x01, 0x87, 0xF0 };
			write_process(0x0151F2F0, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			AllChangeHand = true;
		}
		else
		{
			char MOD[] = { 0x30, 0x01, 0x87, 0xF8 };
			write_process(0x0151F2F0, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			AllChangeHand = false;
		}
	}

	if (ScrollLobbyMenu == 8)
	{
		if (!AllPlayersSuffocate)
		{
			char MOD[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			AllPlayersSuffocate = true;
		}
		else
		{
			char MOD[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			AllPlayersSuffocate = false;
		}
	}

	if (ScrollLobbyMenu == 9)
	{
		if (!AllPlayersInFire)
		{
			char MOD[] = { 0x40 };
			write_process(0x00225FA0, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			AllPlayersInFire = true;
		}
		else
		{
			char MOD[] = { 0x41 };
			write_process(0x00225FA0, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			AllPlayersInFire = false;
		}
	}

	if (ScrollLobbyMenu == 10)
	{
		if (!AllFreezePS3)
		{
			char MODz[] = { 0x40 };
			char MODzz[] = { 0xCF, 0x80 };

			write_process(0x00AEE434, &MODz, sizeof(MODz));
			write_process(0x00393E34, &MODzz, sizeof(MODzz));
			OPTION_TOGGLE(true);
			sleep(200);
			AllFreezePS3 = true;

			sleep(3000);

			char MOD[] = { 0x4F, 0x80 };
			char MOD1[] = { 0x2F, 0x80 };
			char MOD2[] = { 0x3F, 0x80 };
			char MOD3[] = { 0x41 };

			write_process(0x00393E34, &MOD, sizeof(MOD));
			write_process(0x00393E34, &MOD1, sizeof(MOD1));
			write_process(0x00393E34, &MOD2, sizeof(MOD2));
			sleep(2000);
			write_process(0x00AEE434, &MOD3, sizeof(MOD3));
			OPTION_TOGGLE(false);
			sleep(200);
			AllFreezePS3 = false;
		}
	}

	if (ScrollLobbyMenu == 11)
	{
		if (!DarkStorm)
		{
			char MOD[] = { 0x3F, 0xFF };
			write_process(0x00393E34, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			DarkStorm = true;
		}
		else
		{
			char MOD[] = { 0x3F, 0x80 };
			write_process(0x00393E34, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			DarkStorm = false;
		}
	}

	if (ScrollLobbyMenu == 12)
	{
		if (!RainbowStorm)
		{
			char MOD[] = { 0x4F, 0x80 };
			write_process(0x00393E34, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			RainbowStorm = true;
		}
		else
		{
			char MOD[] = { 0x3F, 0x80 };
			write_process(0x00393E34, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			RainbowStorm = false;
		}
	}

	if (ScrollLobbyMenu == 13)
	{
		if (!RainToSnow)
		{
			char MOD[] = { 0x7E };
			write_process(0x01310954, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			RainToSnow = true;
		}
		else
		{
			char MOD[] = { 0x3E };
			write_process(0x01310954, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			RainToSnow = false;
		}
	}

	if (ScrollLobbyMenu == 14)
	{
		if (!RainbowWithSnow)
		{
			char MOD[] = { 0x7E };
			write_process(0x01310954, &MOD, sizeof(MOD));

			char MOD1[] = { 0x4F };
			write_process(0x00393E34, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			RainbowWithSnow = true;
		}
		else
		{
			char MOD[] = { 0x3E };
			write_process(0x01310954, &MOD, sizeof(MOD));

			char MOD1[] = { 0x3F };
			write_process(0x00393E34, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			RainbowWithSnow = false;
		}
	}

	if (ScrollLobbyMenu == 15)
	{
		if (!FlashSky)
		{
			char MOD1[] = { 0xFF, 0x80 };
			write_process(0x00393E34, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			FlashSky = true;
		}
		else
		{
			char MOD1[] = { 0x3F };
			write_process(0x00393E34, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			FlashSky = false;
		}
	}

	if (ScrollLobbyMenu == 16)
	{
		if (!LightningBoldV1)
		{
			char MOD1[] = { 0x01 };
			write_process(0x0098871F, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			LightningBoldV1 = true;
		}
		else
		{
			char MOD1[] = { 0x00 };
			write_process(0x0098871F, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			LightningBoldV1 = false;
		}
	}

	if (ScrollLobbyMenu == 17)
	{
		if (!LightningBoldV2)
		{
			char MOD1[] = { 0x01 };
			write_process(0x0098871F, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0xFF };
			write_process(0x00393E34, &MOD2, sizeof(MOD2));
			OPTION_TOGGLE(true);
			sleep(200);
			LightningBoldV2 = true;
		}
		else
		{
			char MOD1[] = { 0x00 };
			write_process(0x0098871F, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x3F };
			write_process(0x00393E34, &MOD2, sizeof(MOD2));
			OPTION_TOGGLE(false);
			sleep(200);
			LightningBoldV2 = false;
		}
	}

	if (ScrollLobbyMenu == 18)
	{
		LobbyMenu(false);
		sleep(100);
		LobbyMenu1(true);
		sleep(100);
	}
}

void SelectLobby1()
{
	if (ScrollLobbyMenu1 == 0)
	{
		if (!InfosLastPlayers)
		{
			char* NAME = PS3Lib::ReadString(0x30F46AC4);
			char* REGION = PS3Lib::ReadString(0x30F46AD8);

			sleep(1000);

			Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
			Dialog::ProgressBar(NAME, REGION, 3);
			Dialog::End();
			InfosLastPlayers = true;
			InfosLastPlayers = false;
		}
	}

	if (ScrollLobbyMenu1 == 1)
	{
		if (!WeatherRaining)
		{
			char MOD1[] = { 0x48 };
			write_process(0x00A9B23E, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			WeatherRaining = true;
		}
		else
		{
			char MOD1[] = { 0x08 };
			write_process(0x00A9B23E, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			WeatherRaining = false;
		}
	}

	if (ScrollLobbyMenu1 == 2)
	{
		LobbyMenu1(false);
		sleep(100);
		DrawMenu(true);
		sleep(100);
	}

	if (ScrollLobbyMenu1 == 3)
	{
		LobbyMenu1(false);
		sleep(100);
		ItemsOn2Hand(true);
		sleep(100);
	}

	if (ScrollLobbyMenu1 == 4)
	{
		LobbyMenu1(false);
		sleep(100);
		DimensionChanger(true);
		sleep(100);
	}

	if (ScrollLobbyMenu1 == 5)
	{
		LobbyMenu1(false);
		sleep(100);
		BlockSwapper(true);
		sleep(100);
	}

	if (ScrollLobbyMenu1 == 6)
	{
		LobbyMenu1(false);
		sleep(100);
		ItemsSwapper(true);
		sleep(100);
	}

	if (ScrollLobbyMenu1 == 7)
	{
		LobbyMenu1(false);
		sleep(100);
		AddEffect(true);
		sleep(100);
	}

	if (ScrollLobbyMenu1 == 8)
	{
		if (!AntiFreezeSkins)
		{
			char MOD1[] = { 0x40 };
			write_process(0x004B3C20, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x004B3A60, &MOD2, sizeof(MOD2));
			OPTION_TOGGLE(true);
			sleep(200);
			AntiFreezeSkins = true;
		}
		else
		{
			char MOD1[] = { 0x41 };
			write_process(0x004B3C20, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0xF8, 0x21, 0xFE, 0x81 };
			write_process(0x004B3A60, &MOD2, sizeof(MOD2));
			OPTION_TOGGLE(false);
			sleep(200);
			AntiFreezeSkins = false;
		}
	}
}

void SelectDraw()
{
	if (ScrollDrawMenu == 0)
	{
		if (!HowToUseItDraw)
		{
			sleep(1000);
			Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
			Dialog::ProgressBar("Take a diamond hoe, and use it the block will change.", "How To Use It ?", 5);
			Dialog::End();
			HowToUseItDraw = true;
			HowToUseItDraw = false;
		}
	}

	if (ScrollDrawMenu == 1)
	{
		if (!DrawWithRedSandStone)
		{
			char MOD1[] = { 0x32, 0x19, 0xAE, 0x10 };
			write_process(0x014C8A28, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			DrawWithRedSandStone = true;
		}
		else
		{
			char MOD1[] = { 0x32, 0x19, 0xAE, 0x10 };
			write_process(0x014C8A28, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			DrawWithRedSandStone = false;
		}
	}

	if (ScrollDrawMenu == 2)
	{
		if (!DrawWithAir)
		{
			char MOD1[] = { 0x32, 0x18, 0x10, 0x20 };
			write_process(0x014C8A28, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			DrawWithAir = true;
		}
		else
		{
			char MOD1[] = { 0x32, 0x19, 0xAE, 0x10 };
			write_process(0x014C8A28, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			DrawWithAir = false;
		}
	}

	if (ScrollDrawMenu == 3)
	{
		if (!DrawWithCommandBlock)
		{
			char MOD1[] = { 0x32, 0x19, 0xED, 0xB0 };
			write_process(0x014C8A28, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			DrawWithCommandBlock = true;
		}
		else
		{
			char MOD1[] = { 0x32, 0x19, 0xAE, 0x10 };
			write_process(0x014C8A28, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			DrawWithCommandBlock = false;
		}
	}

	if (ScrollDrawMenu == 4)
	{
		if (!DrawWithBarriere)
		{
			char MOD1[] = { 0x32, 0x19, 0x93, 0xC0 };
			write_process(0x014C8A28, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			DrawWithBarriere = true;
		}
		else
		{
			char MOD1[] = { 0x32, 0x19, 0xAE, 0x10 };
			write_process(0x014C8A28, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			DrawWithBarriere = false;
		}
	}

	if (ScrollDrawMenu == 5)
	{
		if (!DrawWithSpawner)
		{
			char MOD1[] = { 0x32, 0x18, 0x6C, 0x40 };
			write_process(0x014C8A28, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			DrawWithSpawner = true;
		}
		else
		{
			char MOD1[] = { 0x32, 0x19, 0xAE, 0x10 };
			write_process(0x014C8A28, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			DrawWithSpawner = false;
		}
	}
}

void SelectItemsOn2Hand()
{
	if (ScrollItemsOn2Hand == 0)
	{
		if (!HowToUseIt2thHand)
		{
			sleep(1000);
			Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
			Dialog::ProgressBar("Take a items and place it on your seconds hand.", "How To Use It ?", 5);
			Dialog::End();
			HowToUseIt2thHand = true;
			HowToUseIt2thHand = false;
		}
	}

	if (ScrollItemsOn2Hand == 1)
	{
		if (!DiamondSwordOnHand)
		{
			char MOD1[] = { 0x32, 0x1E, 0xD5, 0x20 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			DiamondSwordOnHand = true;
		}
		else
		{
			char MOD1[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			DiamondSwordOnHand = false;
		}
	}

	if (ScrollItemsOn2Hand == 2)
	{
		if (!BowOnHand)
		{
			char MOD1[] = { 0x32, 0x1E, 0xA9, 0xD0 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			BowOnHand = true;
		}
		else
		{
			char MOD1[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			BowOnHand = false;
		}
	}

	if (ScrollItemsOn2Hand == 3)
	{
		if (!GoldenAppleOnHand)
		{
			char MOD1[] = { 0x32, 0x1F, 0x5F, 0x80 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			GoldenAppleOnHand = true;
		}
		else
		{
			char MOD1[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			GoldenAppleOnHand = false;
		}
	}

	if (ScrollItemsOn2Hand == 4)
	{
		if (!DiamondAxeOnHand)
		{
			char MOD1[] = { 0x32, 0X1E, 0xDE, 0x70 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			DiamondAxeOnHand = true;
		}
		else
		{
			char MOD1[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			DiamondAxeOnHand = false;
		}
	}

	if (ScrollItemsOn2Hand == 5)
	{
		if (!SignOnHand)
		{
			char MOD1[] = { 0x32, 0x1F, 0x61, 0xE0 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			SignOnHand = true;
		}
		else
		{
			char MOD1[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			SignOnHand = false;
		}
	}
}

void SelectDimensionChanger()
{
	if (ScrollDimensionChanger == 0)
	{
		if (!HowToUseItDimension)
		{
			sleep(1000);
			Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
			Dialog::ProgressBar("Change your dimension\nuse a portal and the dimension will change.\nWARNING /!\ sometimes you can crash with", "How To Use It ?", 5);
			Dialog::End();
			HowToUseItDimension = true;
			HowToUseItDimension = false;
		}
	}

	if (ScrollDimensionChanger == 1)
	{
		if (!ResetAllDimension)
		{
			char MOD1[] = { 0x30, 0xDC, 0x40, 0x50 };
			write_process(0x0151DBEC, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x30, 0xDC, 0x41, 0x90 };
			write_process(0x0151DBF0, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x30, 0xDC, 0x41, 0xD0 };
			write_process(0x0151DBF4, &MOD3, sizeof(MOD3));
			OPTION_TOGGLE(true);
			sleep(200);
			ResetAllDimension = true;
			ResetAllDimension = false;
		}
	}

	if (ScrollDimensionChanger == 2)
	{
		if (!OverworldToEnd)
		{
			char MOD1[] = { 0x30, 0xDC, 0x41, 0xD0 };
			write_process(0x0151DBEC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			OverworldToEnd = true;
			OverworldToEnd = false;
		}
	}

	if (ScrollDimensionChanger == 3)
	{
		if (!OverworldToNether)
		{
			char MOD1[] = { 0x30, 0xDC, 0x41, 0x90 };
			write_process(0x0151DBEC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			OverworldToNether = true;
			OverworldToNether = false;
		}
	}

	if (ScrollDimensionChanger == 4)
	{
		if (!NetherToOverworld)
		{
			char MOD1[] = { 0x30, 0xDC, 0x40, 0x50 };
			write_process(0x0151DBF0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			NetherToOverworld = true;
			NetherToOverworld = false;
		}
	}

	if (ScrollDimensionChanger == 5)
	{
		if (!NetherToEnd)
		{
			char MOD1[] = { 0x30, 0xDC, 0x41, 0xD0 };
			write_process(0x0151DBF4, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			NetherToEnd = true;
			NetherToEnd = false;
		}
	}

	if (ScrollDimensionChanger == 6)
	{
		if (!EndToOverworld)
		{
			char MOD1[] = { 0x30, 0xDC, 0x40, 0x50 };
			write_process(0x0151DBF4, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			EndToOverworld = true;
			EndToOverworld = false;
		}
	}

	if (ScrollDimensionChanger == 7)
	{
		if (!EndToNether)
		{
			char MOD1[] = { 0x30, 0xDC, 0x41, 0x90 };
			write_process(0x0151DBEC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			EndToNether = true;
			EndToNether = false;
		}
	}
}

void SelectBlockSwapper()
{
	if (ScrollBlockSwapper == 0)
	{
		if (!HowToUseItBlockSwapper)
		{
			sleep(1000);
			Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
			Dialog::ProgressBar("Use a options and reload your world\nAll blocks already placed on the world will be changed.", "How To Use It ?", 5);
			Dialog::End();
			HowToUseItBlockSwapper = true;
			HowToUseItBlockSwapper = false;
		}
	}

	if (ScrollBlockSwapper == 1)
	{
		if (!AirToLava)
		{
			char MOD[] = { 0x32, 0x18, 0x20, 0xF0 };
			write_process(0x014C8930, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			AirToLava = true;
		}
		else
		{
			char MOD[] = { 0x32, 0x18, 0x10, 0x20 };
			write_process(0x014C8930, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			AirToLava = false;
		}
	}

	if (ScrollBlockSwapper == 2)
	{
		if (!SwapAirToWater)
		{
			char MOD[] = { 0x32, 0x18, 0x1D, 0x70 };
			write_process(0x014C8930, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			SwapAirToWater = true;
		}
		else
		{
			char MOD[] = { 0x32, 0x18, 0x10, 0x20 };
			write_process(0x014C8930, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			SwapAirToWater = false;
		}
	}

	if (ScrollBlockSwapper == 3)
	{
		if (!AirToDiamond)
		{
			char MOD[] = { 0x32, 0x18, 0xB5, 0xB0 };
			write_process(0x014C8930, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			AirToDiamond = true;
		}
		else
		{
			char MOD[] = { 0x32, 0x18, 0x10, 0x20 };
			write_process(0x014C8930, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			AirToDiamond = false;
		}
	}

	if (ScrollBlockSwapper == 4)
	{
		if (!AirToCommandBlock)
		{
			char MOD[] = { 0x32, 0x19, 0xED, 0xB0 };
			write_process(0x014C8930, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			AirToCommandBlock = true;
		}
		else
		{
			char MOD[] = { 0x32, 0x18, 0x10, 0x20 };
			write_process(0x014C8930, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			AirToCommandBlock = false;
		}
	}

	if (ScrollBlockSwapper == 5)
	{
		if (!AirToBarriere)
		{
			char MOD[] = { 0x32, 0x19, 0x93, 0xC0 };
			write_process(0x014C8930, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			AirToBarriere = true;
		}
		else
		{
			char MOD[] = { 0x32, 0x18, 0x10, 0x20 };
			write_process(0x014C8930, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			AirToBarriere = false;
		}
	}

	if (ScrollBlockSwapper == 6)
	{
		if (!AirToFire)
		{
			char MOD[] = { 0x32, 0x18, 0x62, 0xA0 };
			write_process(0x014C8930, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			AirToFire = true;
		}
		else
		{
			char MOD[] = { 0x32, 0x18, 0x10, 0x20 };
			write_process(0x014C8930, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			AirToFire = false;
		}
	}

	if (ScrollBlockSwapper == 8)
	{
		if (!AirToBed)
		{
			char MOD[] = { 0x32, 0x18, 0x37, 0x80 };
			write_process(0x014C8930, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			AirToBed = true;
		}
		else
		{
			char MOD[] = { 0x32, 0x18, 0x10, 0x20 };
			write_process(0x014C8930, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			AirToBed = false;
		}
	}

	if (ScrollBlockSwapper == 9)
	{
		if (!AirToPortals)
		{
			char MOD[] = { 0x32, 0x19, 0x29, 0x40 };
			write_process(0x014C8930, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			AirToPortals = true;
		}
		else
		{
			char MOD[] = { 0x32, 0x18, 0x10, 0x20 };
			write_process(0x014C8930, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			AirToPortals = false;
		}
	}
}


void SelectItemsSwapper()
{
	if (ScrollItemsSwapper == 0)
	{
		if (!DirtToDebugFour)
		{
			char MOD[] = { 0x32, 0x20, 0xCF, 0xB0 };
			write_process(0x014C893C, &MOD, sizeof(MOD));
			OPTION_TOGGLE(true);
			sleep(200);
			DirtToDebugFour = true;
		}
		else
		{
			char MOD[] = { 0x32, 0x18, 0x14, 0x70 };
			write_process(0x014C893C, &MOD, sizeof(MOD));
			OPTION_TOGGLE(false);
			sleep(200);
			DirtToDebugFour = false;
		}
	}
}

void SelectAddEffect()
{
	if (ScrollAddEffect == 0)
	{
		if (!HowToUseItAddEffect)
		{
			sleep(1000);
			Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
			Dialog::ProgressBar("Select the effect you want\nAll players will take damage and get the effect.", "How To Use It ?", 5);
			Dialog::End();
			HowToUseItAddEffect = true;
			HowToUseItAddEffect = false;
		}
	}

	if (ScrollAddEffect == 1)
	{
		if (!EffectSpeed)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0x8C, 0xD0 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectSpeed = true;
			EffectSpeed = false;
		}
	}

	if (ScrollAddEffect == 2)
	{
		if (!EffectSlowness)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0x8D, 0x10 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectSlowness = true;
			EffectSlowness = false;
		}
	}

	if (ScrollAddEffect == 3)
	{
		if (!EffectHaste)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0x95, 0x40 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectHaste = true;
			EffectHaste = false;
		}
	}

	if (ScrollAddEffect == 4)
	{
		if (!EffectMineFatigue)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0x96, 0x90 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectMineFatigue = true;
			EffectMineFatigue = false;
		}
	}

	if (ScrollAddEffect == 5)
	{
		if (!EffectStrength)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0x97, 0xE0 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectStrength = true;
			EffectStrength = false;
		}
	}

	if (ScrollAddEffect == 6)
	{
		if (!EffectInstantHealth)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0x99, 0x40 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectInstantHealth = true;
			EffectInstantHealth = false;
		}
	}

	if (ScrollAddEffect == 7)
	{
		if (!EffectInstantDamage)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0x9A, 0x40 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectInstantDamage = true;
			EffectInstantDamage = false;
		}
	}

	if (ScrollAddEffect == 8)
	{
		if (!EffectJumpBoost)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0x9B, 0x40 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectJumpBoost = true;
			EffectJumpBoost = false;
		}
	}

	if (ScrollAddEffect == 9)
	{
		if (!EffectNausea)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0x9C, 0x40 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectNausea = true;
			EffectNausea = false;
		}
	}

	if (ScrollAddEffect == 10)
	{
		if (!EffectRegen)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectRegen = true;
			EffectRegen = false;
		}
	}

	if (ScrollAddEffect == 11)
	{
		if (!EffectResistance)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0x9E, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectResistance = true;
			EffectResistance = false;
		}
	}

	if (ScrollAddEffect == 12)
	{
		if (!EffectFireResistances)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0x9F, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectFireResistances = true;
			EffectFireResistances = false;
		}
	}

	if (ScrollAddEffect == 13)
	{
		if (!EffectWaterBreathing)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0xA0, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectWaterBreathing = true;
			EffectWaterBreathing = false;
		}
	}

	if (ScrollAddEffect == 14)
	{
		if (!EffectInvisiblity)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0x9C, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectInvisiblity = true;
			EffectInvisiblity = false;
		}
	}

	if (ScrollAddEffect == 15)
	{
		if (!EffectBlindness)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0xA2, 0x90 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectBlindness = true;
			EffectBlindness = false;
		}
	}

	if (ScrollAddEffect == 16)
	{
		if (!EffectNightVision)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0xA3, 0x90 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectNightVision = true;
			EffectNightVision = false;
		}
	}

	if (ScrollAddEffect == 17)
	{
		if (!EffectHunger)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0xA4, 0x90 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectHunger = true;
			EffectHunger = false;
		}
	}

	if (ScrollAddEffect == 18)
	{
		AddEffect(false);
		sleep(100);
		AddEffect1(true);
		sleep(100);
	}
}

void SelectAddEffect1()
{
	if (ScrollAddEffect1 == 0)
	{
		if (!HowToUseItAddEffect)
		{
			sleep(1000);
			Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
			Dialog::ProgressBar("Select the effect you want\nAll players will take damage and get the effect.", "How To Use It ?", 5);
			Dialog::End();
			HowToUseItAddEffect = true;
			HowToUseItAddEffect = false;
		}
	}

	if (ScrollAddEffect1 == 1)
	{
		if (!EffectWeakness)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0xA5, 0x90 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectWeakness = true;
			EffectWeakness = false;
		}
	}

	if (ScrollAddEffect1 == 2)
	{
		if (!EffectPoison)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0x93, 0xE0 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectPoison = true;
			EffectPoison = false;
		}
	}

	if (ScrollAddEffect1 == 3)
	{
		if (!EffectWither)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0xA0, 0xC0 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectWither = true;
			EffectWither = false;
		}
	}

	if (ScrollAddEffect1 == 4)
	{
		if (!EffectHealthBoost)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0x93, 0x30 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectHealthBoost = true;
			EffectHealthBoost = false;
		}
	}

	if (ScrollAddEffect1 == 5)
	{
		if (!EffectAbsorption)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0xAB, 0x30 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectAbsorption = true;
			EffectAbsorption = false;
		}
	}

	if (ScrollAddEffect1 == 6)
	{
		if (!EffectSaturation)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0xAC, 0x30 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectSaturation = true;
			EffectSaturation = false;
		}
	}

	if (ScrollAddEffect1 == 7)
	{
		if (!EffectGlowing)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0xAD, 0x30 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectGlowing = true;
			EffectGlowing = false;
		}
	}

	if (ScrollAddEffect1 == 8)
	{
		if (!EffectLevitation)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0xAE, 0x30 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectLevitation = true;
			EffectLevitation = false;
		}
	}

	if (ScrollAddEffect1 == 9)
	{
		if (!EffectLuck)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0xAF, 0x30 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectLuck = true;
			EffectLuck = false;
		}
	}

	if (ScrollAddEffect1 == 10)
	{
		if (!EffectUnluck)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0xB0, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectUnluck = true;
			EffectUnluck = false;
		}
	}

	if (ScrollAddEffect1 == 11)
	{
		if (!EffectConduitPower)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0xB1, 0xD0 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectConduitPower = true;
			EffectConduitPower = false;
		}
	}

	if (ScrollAddEffect1 == 12)
	{
		if (!EffectSlowFalling)
		{
			char MOD1[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0022FDC8, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MOD3, sizeof(MOD3));

			char MOD7[] = { 0x32, 0x1B, 0xB3, 0x20 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));

			sleep(2000);

			char MOD4[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0xF8, 0x21, 0xFF, 0x11 };
			write_process(0x0022FDC8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD6, sizeof(MOD6));

			char MOD8[] = { 0x32, 0x1B, 0x9D, 0x80 }; //EFFECT
			write_process(0x014C9B48, &MOD7, sizeof(MOD7));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectSlowFalling = true;
			EffectSlowFalling = false;
		}
	}

	if (ScrollAddEffect1 == 13)
	{
		if (!EffectTime1)
		{
			char MOD1[] = { 0x38, 0xA0, 0x03, 0x20 };
			write_process(0x003A55EC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectTime1 = true;
		}
		else
		{
			char MOD1[] = { 0x38, 0xA0, 0x03, 0x20 };
			write_process(0x003A55EC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			EffectTime1 = false;
		}
	}

	if (ScrollAddEffect1 == 14)
	{
		if (!EffectTime2)
		{
			char MOD1[] = { 0x38, 0xA0, 0x08, 0x20 };
			write_process(0x003A55EC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectTime2 = true;
		}
		else
		{
			char MOD1[] = { 0x38, 0xA0, 0x03, 0x20 };
			write_process(0x003A55EC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			EffectTime2 = false;
		}
	}

	if (ScrollAddEffect1 == 15)
	{
		if (!EffectTime3)
		{
			char MOD1[] = { 0x38, 0xA0, 0x20, 0x20 };
			write_process(0x003A55EC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectTime3 = true;
		}
		else
		{
			char MOD1[] = { 0x38, 0xA0, 0x03, 0x20 };
			write_process(0x003A55EC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			EffectTime3 = false;
		}
	}

	if (ScrollAddEffect1 == 16)
	{
		if (!EffectTime4)
		{
			char MOD1[] = { 0x38, 0xA0, 0x40, 0x20 };
			write_process(0x003A55EC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectTime4 = true;
		}
		else
		{
			char MOD1[] = { 0x38, 0xA0, 0x03, 0x20 };
			write_process(0x003A55EC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			EffectTime4 = false;
		}
	}

	if (ScrollAddEffect1 == 17)
	{
		if (!EffectTime5)
		{
			char MOD1[] = { 0x38, 0xA0, 0x60, 0x20 };
			write_process(0x003A55EC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectTime5 = true;
		}
		else
		{
			char MOD1[] = { 0x38, 0xA0, 0x03, 0x20 };
			write_process(0x003A55EC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			EffectTime5 = false;
		}
	}

	if (ScrollAddEffect1 == 18)
	{
		if (!EffectTime6)
		{
			char MOD1[] = { 0x38, 0xA0, 0x70, 0x80 };
			write_process(0x003A55EC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			EffectTime6 = true;
		}
		else
		{
			char MOD1[] = { 0x38, 0xA0, 0x03, 0x20 };
			write_process(0x003A55EC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			EffectTime6 = false;
		}
	}
}

void SelectVision()
{
	if (ScrollVisions == 0)
	{
		if (!XRAY)
		{
			char MOD1[] = { 0xFC, 0x80, 0x30, 0x90 };
			write_process(0x00A99154, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			XRAY = true;
		}
		else
		{
			char MOD1[] = { 0xFC, 0x60, 0x30, 0x90 };
			write_process(0x00A99154, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			XRAY = false;
		}
	}

	if (ScrollVisions == 1)
	{
		if (!NightVision)
		{
			char MOD1[] = { 0x7F };
			write_process(0x00A9A6C8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			NightVision = true;
		}
		else
		{
			char MOD1[] = { 0x3F };
			write_process(0x00A9A6C8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			NightVision = false;
		}
	}

	if (ScrollVisions == 2)
	{
		if (!Apocalipse)
		{
			char MOD1[] = { 0xBF, 0xFF };
			write_process(0x00AD5EC8, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0xCD, 0xC0, 0x00, 0x00 };
			write_process(0x00410734, &MOD2, sizeof(MOD2));
			OPTION_TOGGLE(true);
			sleep(200);
			Apocalipse = true;
		}
		else
		{
			char MOD1[] = { 0xBF, 0x80 };
			write_process(0x00AD5EC8, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x40, 0xC0, 0x00, 0x00 };
			write_process(0x00410734, &MOD2, sizeof(MOD2));
			OPTION_TOGGLE(false);
			sleep(200);
			Apocalipse = false;
		}
	}

	if (ScrollVisions == 3)
	{
		if (!FunnyScreen)
		{
			char MOD1[] = { 0x50, 0x80 };
			write_process(0x00AD5EC8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			FunnyScreen = true;
		}
		else
		{
			char MOD1[] = { 0xBF, 0x80 };
			write_process(0x00AD5EC8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			FunnyScreen = false;
		}
	}

	if (ScrollVisions == 4)
	{
		if (!HorrorView)
		{
			char MOD1[] = { 0x4F, 0x80, 0x00, 0x00 };
			write_process(0x00A9A6C8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			HorrorView = true;
		}
		else
		{
			char MOD1[] = { 0x3F, 0x80, 0x00, 0x00 };
			write_process(0x00A9A6C8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			HorrorView = false;
		}
	}

	if (ScrollVisions == 5)
	{
		if (!AnimationRun)
		{
			char MOD1[] = { 0xBF, 0x80 };
			write_process(0x003ACEF4, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			AnimationRun = true;
		}
		else
		{
			char MOD1[] = { 0x3F, 0x80 };
			write_process(0x003ACEF4, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			AnimationRun = false;
		}
	}

	if (ScrollVisions == 6)
	{
		if (!SkyRainbow)
		{
			OPTION_TOGGLE(true);
			sleep(200);
			SkyRainbow = true;
		}
		else
		{
			OPTION_TOGGLE(false);
			sleep(200);
			SkyRainbow = false;
		}
	}

	if (ScrollVisions == 7)
	{
		if (!WTFView)
		{
			OPTION_TOGGLE(true);
			sleep(200);
			WTFView = true;
		}
		else
		{
			OPTION_TOGGLE(false);
			sleep(200);
			WTFView = false;
		}
	}

	if (ScrollVisions == 8)
	{
		if (!SizeHUD)
		{
			char MOD1[] = { 0x41, 0x82 };
			write_process(0x0090FAC8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			SizeHUD = true;
		}
		else
		{
			char MOD1[] = { 0x40, 0x82 };
			write_process(0x0090FAC8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			SizeHUD = false;
		}
	}

	if (ScrollVisions == 9)
	{
		if (!BrokenTexture)
		{
			char MOD1[] = { 0xAF };
			write_process(0x00A98F4C, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			BrokenTexture = true;
		}
		else
		{
			char MOD1[] = { 0x40 };
			write_process(0x00A98F4C, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			BrokenTexture = false;
		}
	}

	if (ScrollVisions == 10)
	{
		if (!ShockWave)
		{
			char MOD1[] = { 0xFF };
			write_process(0x00A98F40, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			ShockWave = true;
		}
		else
		{
			char MOD1[] = { 0x00 };
			write_process(0x00A98F40, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			ShockWave = false;
		}
	}

	if (ScrollVisions == 11)
	{
		if (!WallHack)
		{
			char MOD1[] = { 0x05 };
			write_process(0x30012913, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			WallHack = true;
		}
		else
		{
			char MOD1[] = { 0x07 };
			write_process(0x30012913, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			WallHack = false;
		}
	}

	if (ScrollVisions == 12)
	{
		if (!WallHackV2)
		{
			char MOD1[] = { 0x40 };
			write_process(0x00A98F50, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			WallHackV2 = true;
		}
		else
		{
			char MOD1[] = { 0x3D };
			write_process(0x00A98F50, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			WallHackV2 = false;
		}
	}

	if (ScrollVisions == 13)
	{
		if (!WallHackV3)
		{
			char MOD1[] = { 0x3F, 0x00 };
			write_process(0x00A98F50, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			WallHackV3 = true;
		}
		else
		{
			char MOD1[] = { 0x3D, 0x8C };
			write_process(0x00A98F50, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			WallHackV3 = false;
		}
	}

	if (ScrollVisions == 14)
	{
		if (!PlasticTexture)
		{
			char MOD1[] = { 0x01 };
			write_process(0x30012913, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			PlasticTexture = true;
		}
		else
		{
			char MOD1[] = { 0x07 };
			write_process(0x30012913, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			PlasticTexture = false;
		}
	}

	if (ScrollVisions == 15)
	{
		if (!GhostTexture)
		{
			char MOD1[] = { 0x02 };
			write_process(0x30012913, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			GhostTexture = true;
		}
		else
		{
			char MOD1[] = { 0x07 };
			write_process(0x30012913, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			GhostTexture = false;
		}
	}

	if (ScrollVisions == 16)
	{
		if (!BlueFog)
		{
			char MOD1[] = { 0x0F };
			write_process(0x014C67D8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			BlueFog = true;
		}
		else
		{
			char MOD1[] = { 0x3F };
			write_process(0x014C67D8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			BlueFog = false;
		}
	}

	if (ScrollVisions == 17)
	{
		if (!BestSky)
		{
			char MOD1[] = { 0x3F, 0x10 };
			write_process(0x00410738, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x7F };
			write_process(0x0038C658, &MOD2, sizeof(MOD2));
			OPTION_TOGGLE(true);
			sleep(200);
			BestSky = true;
		}
		else
		{
			char MOD1[] = { 0x3F, 0x80 };
			write_process(0x00410738, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x3F };
			write_process(0x0038C658, &MOD2, sizeof(MOD2));
			OPTION_TOGGLE(false);
			sleep(200);
			BestSky = false;
		}
	}

	if (ScrollVisions == 18)
	{
		VisionMenu(false);
		sleep(50);
		VisionMenu1(true);
	}
}

void SelectVision1()
{
	if (ScrollVisions1 == 0)
	{
		if (!ShakeCamera)
		{
			char MOD1[] = { 0xFF, 0x0A, 0x28, 0x90 };
			write_process(0x00A98FA4, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			ShakeCamera = true;
		}
		else
		{
			char MOD1[] = { 0xFF, 0xA0, 0x08, 0x90 };
			write_process(0x00A98FA4, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			ShakeCamera = false;
		}
	}

	if (ScrollVisions1 == 1)
	{
		if (!MoreLight)
		{
			char MOD1[] = { 0x4F, 0xFF };
			write_process(0x00A9A6D8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			MoreLight = true;
		}
		else
		{
			char MOD1[] = { 0x3F, 0xC0 };
			write_process(0x00A9A6D8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			MoreLight = false;
		}
	}

	if (ScrollVisions1 == 2)
	{
		if (!FlatItems)
		{
			char MOD1[] = { 0x01 };
			write_process(0x000924FF, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			FlatItems = true;
		}
		else
		{
			char MOD1[] = { 0x00 };
			write_process(0x000924FF, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			FlatItems = false;
		}
	}

	if (ScrollVisions1 == 3)
	{
		if (!VibrateWalk)
		{
			char MOD1[] = { 0x40 };
			write_process(0x004A3D99, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			VibrateWalk = true;
		}
		else
		{
			char MOD1[] = { 0x20 };
			write_process(0x004A3D99, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			VibrateWalk = false;
		}
	}

	if (ScrollVisions1 == 4)
	{
		if (!HUDInvDown)
		{
			char MOD1[] = { 0x40 };
			write_process(0x0090FB6C, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			HUDInvDown = true;
		}
		else
		{
			char MOD1[] = { 0x20 };
			write_process(0x0090FB6C, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			HUDInvDown = false;
		}
	}

	if (ScrollVisions1 == 5)
	{
		if (!SmallGraphic)
		{
			char MOD1[] = { 0x40 };
			write_process(0x00A98EF4, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			SmallGraphic = true;
		}
		else
		{
			char MOD1[] = { 0x20 };
			write_process(0x00A98EF4, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			SmallGraphic = false;
		}
	}

	if (ScrollVisions1 == 6)
	{
		if (!ParticlesFly)
		{
			char MOD1[] = { 0x0F };
			write_process(0x00B52100, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			ParticlesFly = true;
		}
		else
		{
			char MOD1[] = { 0x3F };
			write_process(0x00B52100, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			ParticlesFly = false;
		}
	}

	if (ScrollVisions1 == 7)
	{
		if (!PaperMode)
		{
			char MOD1[] = { 0x1F };
			write_process(0x00AD5ECC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			PaperMode = true;
		}
		else
		{
			char MOD1[] = { 0x3F };
			write_process(0x00AD5ECC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			PaperMode = false;
		}
	}

	if (ScrollVisions1 == 8)
	{
		if (!BigModel)
		{
			char MOD1[] = { 0x3F, 0xFF };
			write_process(0x00AD5ECC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			BigModel = true;
		}
		else
		{
			char MOD1[] = { 0x3F, 0x80 };
			write_process(0x00AD5ECC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			BigModel = false;
		}
	}

	if (ScrollVisions1 == 9)
	{
		if (!CameraLeft)
		{
			char MOD1[] = { 0x40 };
			write_process(0x00A991AC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			CameraLeft = true;
		}
		else
		{
			char MOD1[] = { 0x41 };
			write_process(0x00A991AC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			CameraLeft = false;
		}
	}

	if (ScrollVisions1 == 10)
	{
		if (!CameraRight)
		{
			char MOD1[] = { 0x40 };
			write_process(0x00A99050, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			CameraRight = true;
		}
		else
		{
			char MOD1[] = { 0x41 };
			write_process(0x00A99050, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			CameraRight = false;
		}
	}

	if (ScrollVisions1 == 11)
	{
		if (!BigParticles)
		{
			char MOD1[] = { 0x3F, 0xFF };
			write_process(0x014C6880, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			BigParticles = true;
		}
		else
		{
			char MOD1[] = { 0x3F, 0x80 };
			write_process(0x014C6880, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			BigParticles = false;
		}
	}

	if (ScrollVisions1 == 12)
	{
		if (!HUDLoading)
		{
			char MOD1[] = { 0x01 };
			write_process(0x014CE214, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			HUDLoading = true;
		}
		else
		{
			char MOD1[] = { 0x00 };
			write_process(0x014CE214, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			HUDLoading = false;
		}
	}

	if (ScrollVisions1 == 13)
	{
		if (!StarsInSky)
		{
			char MOD1[] = { 0x7F };
			write_process(0x0038C658, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			StarsInSky = true;
		}
		else
		{
			char MOD1[] = { 0x3F };
			write_process(0x0038C658, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			StarsInSky = false;
		}
	}

	if (ScrollVisions1 == 14)
	{
		if (!FootStepFast)
		{
			char MOD1[] = { 0x3F, 0xFF };
			write_process(0x002267F0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			FootStepFast = true;
		}
		else
		{
			char MOD1[] = { 0x3F, 0x19 };
			write_process(0x002267F0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			FootStepFast = false;
		}
	}

	if (ScrollVisions1 == 15)
	{
		if (!FootStepSlow)
		{
			char MOD1[] = { 0x2F, 0x19 };
			write_process(0x002267F0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			FootStepSlow = true;
		}
		else
		{
			char MOD1[] = { 0x3F, 0x19 };
			write_process(0x002267F0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			FootStepSlow = false;
		}
	}

	if (ScrollVisions1 == 16)
	{
		if (!SkinDebug)
		{
			char MOD1[] = { 0x03 };
			write_process(0x30012AB3, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			SkinDebug = true;
		}
		else
		{
			char MOD1[] = { 0x04 };
			write_process(0x30012AB3, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			SkinDebug = false;
		}
	}

	if (ScrollVisions1 == 17)
	{
		if (!ShadowSkin)
		{
			char MOD1[] = { 0xFC, 0x40 };
			write_process(0x003AD910, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			ShadowSkin = true;
		}
		else
		{
			char MOD1[] = { 0xFC, 0x80 };
			write_process(0x003AD910, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			ShadowSkin = false;
		}
	}

	if (ScrollVisions1 == 18)
	{
		VisionMenu1(false);
		sleep(100);
		VisionMenu2(true);
		sleep(100);
	}
}

void SelectVision2()
{
	if (ScrollVision2 == 0)
	{
		if (!SkinPlayersRed)
		{
			char MOD1[] = { 0x41 };
			write_process(0x00AD5B60, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			SkinPlayersRed = true;
		}
		else
		{
			char MOD1[] = { 0x40 };
			write_process(0x00AD5B60, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			SkinPlayersRed = false;
		}
	}

	if (ScrollVision2 == 1)
	{
		if (!ParticleFly)
		{
			char MOD1[] = { 0xBF };
			write_process(0x00B52100, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			ParticleFly = true;
		}
		else
		{
			char MOD1[] = { 0x3F };
			write_process(0x00B52100, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			ParticleFly = false;
		}
	}

	if (ScrollVision2 == 2)
	{
		if (!LineBlockMove)
		{
			char MOD1[] = { 0x48 };
			write_process(0x00B259DE, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			LineBlockMove = true;
		}
		else
		{
			char MOD1[] = { 0x08 };
			write_process(0x00B259DE, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			LineBlockMove = false;
		}
	}

	if (ScrollVision2 == 3)
	{
		if (!DisablePlayers)
		{
			char MOD1[] = { 0x48 };
			write_process(0x001D3BF2, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			DisablePlayers = true;
		}
		else
		{
			char MOD1[] = { 0x08 };
			write_process(0x001D3BF2, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			DisablePlayers = false;
		}
	}

	if (ScrollVision2 == 4)
	{
		if (!SmallText)
		{
			char MOD1[] = { 0x48 };
			write_process(0x0079E326, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			SmallText = true;
		}
		else
		{
			char MOD1[] = { 0x08 };
			write_process(0x0079E326, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			SmallText = false;
		}
	}

	if (ScrollVision2 == 5)
	{
		if (!PosHudText)
		{
			char MOD1[] = { 0x58 };
			write_process(0x0079E8DE, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			PosHudText = true;
		}
		else
		{
			char MOD1[] = { 0x08 };
			write_process(0x0079E8DE, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			PosHudText = false;
		}
	}

	if (ScrollVision2 == 6)
	{
		if (!ArmsBroken)
		{
			char MOD1[] = { 0x48 };
			write_process(0x00AD6172, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			ArmsBroken = true;
		}
		else
		{
			char MOD1[] = { 0x08 };
			write_process(0x00AD6172, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			ArmsBroken = false;
		}
	}

	if (ScrollVision2 == 7)
	{
		if (!BlackFog)
		{
			char MOD1[] = { 0x28 };
			write_process(0x00AA1B76, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			BlackFog = true;
		}
		else
		{
			char MOD1[] = { 0x08 };
			write_process(0x00AA1B76, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			BlackFog = false;
		}
	}

	if (ScrollVision2 == 8)
	{
		if (!SkyNether)
		{
			char MOD1[] = { 0x41 };
			write_process(0x00B22050, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			SkyNether = true;
		}
		else
		{
			char MOD1[] = { 0x40 };
			write_process(0x00B22050, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			SkyNether = false;
		}
	}

	if (ScrollVision2 == 9)
	{
		if (!SmokeLobby)
		{
			char MOD1[] = { 0x01 };
			write_process(0x00B24177, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			SmokeLobby = true;
		}
		else
		{
			char MOD1[] = { 0x00 };
			write_process(0x00B24177, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			SmokeLobby = false;
		}
	}

	if (ScrollVision2 == 10)
	{
		if (!LookUnderWorld)
		{
			char MOD1[] = { 0x20 };
			write_process(0x00A98A91, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			LookUnderWorld = true;
		}
		else
		{
			char MOD1[] = { 0x40 };
			write_process(0x00A98A91, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			LookUnderWorld = false;
		}
	}

	if (ScrollVision2 == 11)
	{
		if (!FreeCam)
		{
			char MOD1[] = { 0x40 };
			write_process(0x00A98A95, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			FreeCam = true;
		}
		else
		{
			char MOD1[] = { 0x30 };
			write_process(0x00A98A95, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			FreeCam = false;
		}
	}

	if (ScrollVision2 == 12)
	{
		if (!RemoveHand)
		{
			char MOD1[] = { 0x38, 0x60, 0x00, 0x01 };
			write_process(0x00AF10A8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			RemoveHand = true;
		}
		else
		{
			char MOD1[] = { 0x38, 0x60, 0x00, 0x00 };
			write_process(0x00AF10A8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			RemoveHand = false;
		}
	}

	if (ScrollVision2 == 13)
	{
		if (!TornadeParticles)
		{
			char MOD1[] = { 0x58 };
			write_process(0x00B50B32, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			TornadeParticles = true;
		}
		else
		{
			char MOD1[] = { 0x08 };
			write_process(0x00B50B32, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			TornadeParticles = false;
		}
	}

	if (ScrollVision2 == 14)
	{
		if (!HitDamageRed)
		{
			char MOD1[] = { 0xD0 };
			write_process(0x00AD5B7A, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			HitDamageRed = true;
		}
		else
		{
			char MOD1[] = { 0xC0 };
			write_process(0x00AD5B7A, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			HitDamageRed = false;
		}
	}

	if (ScrollVision2 == 15)
	{
		if (!DisableFog)
		{
			char MOD1[] = { 0xFF, 0x00 };
			write_process(0x003A3FF0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			DisableFog = true;
		}
		else
		{
			char MOD1[] = { 0x3F, 0x80 };
			write_process(0x003A3FF0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			DisableFog = false;
		}
	}

	if (ScrollVision2 == 16)
	{
		if (!FOVWithoutHand)
		{
			char MOD1[] = { 0x68 };
			write_process(0x00987502, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			FOVWithoutHand = true;
		}
		else
		{
			char MOD1[] = { 0x08 };
			write_process(0x00987502, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			FOVWithoutHand = false;
		}
	}

	if (ScrollVision2 == 17)
	{
		if (!ZOOMWithoutHand)
		{
			char MOD1[] = { 0xF8 };
			write_process(0x00987502, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			ZOOMWithoutHand = true;
		}
		else
		{
			char MOD1[] = { 0x08 };
			write_process(0x00987502, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			ZOOMWithoutHand = false;
		}
	}

	if (ScrollVision2 == 18)
	{
		VisionMenu2(false);
		sleep(100);
		VisionMenu3(true);
		sleep(100);
	}
}

void SelectVision3()
{
	if (ScrollVision3 == 0)
	{
		if (!IronHelmetOnAll)
		{
			char MOD1[] = { 0x00 };
			write_process(0x002FE983, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			IronHelmetOnAll = true;
		}
		else
		{
			char MOD1[] = { 0x01 };
			write_process(0x002FE983, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			IronHelmetOnAll = false;
		}
	}

	if (ScrollVision3 == 1)
	{
		if (!EntityToBaby)
		{
			char MOD1[] = { 0x01 };
			write_process(0x0039F52F, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			EntityToBaby = true;
		}
		else
		{
			char MOD1[] = { 0x00 };
			write_process(0x0039F52F, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			EntityToBaby = false;
		}
	}

	if (ScrollVision3 == 2)
	{
		if (!RemoveDetailedSkins)
		{
			char MOD1[] = { 0x38, 0x60, 0x00, 0x00 };
			write_process(0x004B2468, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			RemoveDetailedSkins = true;
		}
		else
		{
			char MOD1[] = { 0x38, 0x60, 0x00, 0x01 };
			write_process(0x004B2468, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			RemoveDetailedSkins = false;
		}
	}

	if (ScrollVision3 == 3)
	{
		if (!AimOn3thPerson)
		{
			char MOD1[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x0090FA30, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			AimOn3thPerson = true;
		}
		else
		{
			char MOD1[] = { 0xF8, 0x21, 0xF5, 0x41 };
			write_process(0x0090FA30, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			AimOn3thPerson = false;
		}
	}

	if (ScrollVision3 == 4)
	{
		if (!RenderEntity)
		{
			char MOD1[] = { 0x48, 0xFF, 0x00, 0x00 };
			write_process(0x0022CE40, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			RenderEntity = true;
		}
		else
		{
			char MOD1[] = { 0x40, 0x48, 0x00, 0x00 };
			write_process(0x0022CE40, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			RenderEntity = false;
		}
	}

	if (ScrollVision3 == 5)
	{
		if (!RotationHead)
		{
			char MOD1[] = { 0xC3 };
			write_process(0x00224FD4, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x43 };
			write_process(0x00224FD8, &MOD2, sizeof(MOD2));
			OPTION_TOGGLE(true);
			sleep(200);
			RotationHead = true;
		}
		else
		{
			char MOD1[] = { 0xC2 };
			write_process(0x00224FD4, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x42 };
			write_process(0x00224FD8, &MOD2, sizeof(MOD2));
			OPTION_TOGGLE(false);
			sleep(200);
			RotationHead = false;
		}
	}

	if (ScrollVision3 == 6)
	{
		if (!TextureToBlack)
		{
			char MOD1[] = { 0x40 };
			write_process(0x00A73854, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			TextureToBlack = true;
		}
		else
		{
			char MOD1[] = { 0x41 };
			write_process(0x00A73854, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			TextureToBlack = false;
		}
	}

	if (ScrollVision3 == 7)
	{
		if (!GammaToMax)
		{
			char MOD1[] = { 0x3F, 0xFF };
			write_process(0x00A9C2B4, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			GammaToMax = true;
		}
		else
		{
			char MOD1[] = { 0x3F, 0x80 };
			write_process(0x00A9C2B4, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			GammaToMax = false;
		}
	}

	if (ScrollVision3 == 8)
	{
		if (!NameAndShadowToBlack)
		{
			char MOD1[] = { 0x40 };
			write_process(0x00A73878, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			NameAndShadowToBlack = true;
		}
		else
		{
			char MOD1[] = { 0x41 };
			write_process(0x00A73878, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			NameAndShadowToBlack = false;
		}
	}

	if (ScrollVision3 == 9)
	{
		if (!AnimationCharacter)
		{
			char MOD1[] = { 0x40 };
			write_process(0x00A89AC8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			AnimationCharacter = true;
		}
		else
		{
			char MOD1[] = { 0x41 };
			write_process(0x00A89AC8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			AnimationCharacter = false;
		}
	}

	if (ScrollVision3 == 10)
	{
		if (!BigAnimCharacter)
		{
			char MOD1[] = { 0xF0 };
			write_process(0x00A8919D, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0xF0 };
			write_process(0x00A891A1, &MOD2, sizeof(MOD2));
			OPTION_TOGGLE(true);
			sleep(200);
			BigAnimCharacter = true;
		}
		else
		{
			char MOD1[] = { 0x40 };
			write_process(0x00A8919D, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x40 };
			write_process(0x00A891A1, &MOD2, sizeof(MOD2));
			OPTION_TOGGLE(false);
			sleep(200);
			BigAnimCharacter = false;
		}
	}

	if (ScrollVision3 == 11)
	{
		if (!RotationBody)
		{
			char MOD1[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x003AF338, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			RotationBody = true;
		}
		else
		{
			char MOD1[] = { 0xF8, 0x21, 0xFF, 0x71 };
			write_process(0x003AF338, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			RotationBody = false;
		}
	}

	if (ScrollVision3 == 12)
	{
		if (!EntityBodyLight)
		{
			char MOD1[] = { 0x40 };
			write_process(0x00AD66C0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			EntityBodyLight = true;
		}
		else
		{
			char MOD1[] = { 0x41 };
			write_process(0x00AD66C0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			EntityBodyLight = false;
		}
	}

	if (ScrollVision3 == 13)
	{
		if (!NetherVision)
		{
			char MOD1[] = { 0x40 };
			write_process(0x00B018D0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			NetherVision = true;
		}
		else
		{
			char MOD1[] = { 0x41 };
			write_process(0x00B018D0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			NetherVision = false;
		}
	}

	if (ScrollVision3 == 14)
	{
		if (!ParticlesHitSpam)
		{
			char MOD1[] = { 0x00 };
			write_process(0x00B520F7, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			ParticlesHitSpam = true;
		}
		else
		{
			char MOD1[] = { 0x01 };
			write_process(0x00B520F7, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			ParticlesHitSpam = false;
		}
	}

	if (ScrollVision3 == 15)
	{
		if (!RobloxAnimation)
		{
			char MOD1[] = { 0xC3 };
			write_process(0x002341D0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			RobloxAnimation = true;
		}
		else
		{
			char MOD1[] = { 0xC0 };
			write_process(0x002341D0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			RobloxAnimation = false;
		}
	}

	if (ScrollVision3 == 16)
	{
		if (!Elytra)
		{
			char MOD1[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x003B3008, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			Elytra = true;
		}
		else
		{
			char MOD1[] = { 0xF8, 0x21, 0xFF, 0x91 };
			write_process(0x003B3008, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			Elytra = false;
		}
	}

	if (ScrollVision3 == 17)
	{
		if (!MoveHeadNoBody)
		{
			char MOD1[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x003AF338, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			MoveHeadNoBody = true;
		}
		else
		{
			char MOD1[] = { 0xF8, 0x21, 0xFF, 0x71 };
			write_process(0x003AF338, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			MoveHeadNoBody = false;
		}
	}

	if (ScrollVision3 == 18)
	{
		VisionMenu3(false);
		sleep(50);
		VisionMenu4(true);
	}
}

void SelectVision4()
{
	if (ScrollVision4 == 0)
	{
		if (!StopAnimations)
		{
			char MOD1[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x003ACF00, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			StopAnimations = true;
		}
		else
		{
			char MOD1[] = { 0xF8, 0x21, 0xFF, 0x71 };
			write_process(0x003ACF00, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			StopAnimations = false;
		}
	}

	if (ScrollVision4 == 1)
	{
		if (!GiantGamePlay)
		{
			char MOD1[] = { 0x40 };
			write_process(0x00A98EBC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			GiantGamePlay = true;
		}
		else
		{
			char MOD1[] = { 0x41 };
			write_process(0x00A98EBC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			GiantGamePlay = false;
		}
	}

	if (ScrollVision4 == 2)
	{
		if (!WorldLightWhite)
		{
			char MOD1[] = { 0x02 };
			write_process(0x300136D3, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			WorldLightWhite = true;
		}
		else
		{
			char MOD1[] = { 0x06 };
			write_process(0x300136D3, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			WorldLightWhite = false;
		}
	}

	if (ScrollVision4 == 3)
	{
		if (!WorldRainbowLight)
		{
			char MOD1[] = { 0x3F, 0xFF };
			write_process(0x00A9A6C8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			WorldRainbowLight = true;
		}
		else
		{
			char MOD1[] = { 0x3F, 0x80 };
			write_process(0x00A9A6C8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			WorldRainbowLight = false;
		}
	}

	if (ScrollVision4 == 4)
	{
		if (!ShadowSkins)
		{
			char MOD1[] = { 0x2F };
			write_process(0x003AD388, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			ShadowSkins = true;
		}
		else
		{
			char MOD1[] = { 0x3F };
			write_process(0x003AD388, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			ShadowSkins = false;
		}
	}

	if (ScrollVision4 == 5)
	{
		if (!DoubleName)
		{
			char MOD1[] = { 0x01 };
			write_process(0x00979BCF, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			DoubleName = true;
		}
		else
		{
			char MOD1[] = { 0x00 };
			write_process(0x00979BCF, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			DoubleName = false;
		}
	}

	if (ScrollVision4 == 6)
	{
		if (!OptimizeChunks)
		{
			char MOD1[] = { 0x40, 0xD7, 0x00, 0x00 };
			write_process(0x00B21C60, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			OptimizeChunks = true;
		}
		else
		{
			char MOD1[] = { 0x40, 0x30, 0x00, 0x00 };
			write_process(0x00B21C60, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			OptimizeChunks = false;
		}
	}

	if (ScrollVision4 == 7)
	{
		if (!StopChunksLoad)
		{
			char MOD1[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x00B2437C, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			StopChunksLoad = true;
		}
		else
		{
			char MOD1[] = { 0xF8, 0x21, 0xFF, 0x71 };
			write_process(0x00B2437C, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			StopChunksLoad = false;
		}
	}

	if (ScrollVision4 == 8)
	{
		if (!RealJumpAnim)
		{
			char MOD1[] = { 0xBF };
			write_process(0x014C6728, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			RealJumpAnim = true;
		}
		else
		{
			char MOD1[] = { 0x3F };
			write_process(0x014C6728, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			RealJumpAnim = false;
		}
	}

	if (ScrollVision4 == 9)
	{
		VisionMenu4(false);
		sleep(100);
		HudColorPage(true);
	}

	if (ScrollVision4 == 10)
	{
		VisionMenu4(false);
		sleep(100);
		FOVMenu(true);
	}
}

void SelectNameChanger()
{
	if (ScrollNameChanger == 0)
	{
		char RESET[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x36, 0x75, 0x73, 0x70, 0x73, 0x33, 0x00, 0x01 };
		write_process(0x3000ABE4, &RESET, sizeof(RESET));
		NAME_CHANGER();
	}

	if (ScrollNameChanger == 1)
	{
		char RESET[] = { 0x62, 0x36, 0x75, 0x73, 0x70, 0x73, 0x33, 0x00, 0x01 };
		write_process(0x3000ABF8, &RESET, sizeof(RESET));
		NAME_GLITCHED();
	}

	if (ScrollNameChanger == 2)
	{
		char RESET[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x36, 0x75, 0x73, 0x70, 0x73, 0x33, 0x00, 0x01 };
		write_process(0x3000ABE4, &RESET, sizeof(RESET));
		NAME_CHANGER_COLORED();
	}

	if (ScrollNameChanger == 3)
	{
		char RESET[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x36, 0x75, 0x73, 0x70, 0x73, 0x33, 0x00, 0x01 };
		write_process(0x3000ABE4, &RESET, sizeof(RESET));
		NAME_CHANGER_LINES();
	}

	if (ScrollNameChanger == 4)
	{

	}

	if (ScrollNameChanger == 5)
	{

	}

	if (ScrollNameChanger == 6)
	{
		char RESET[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x36, 0x75, 0x73, 0x70, 0x73, 0x33, 0x00, 0x01 };
		write_process(0x3000ABE4, &RESET, sizeof(RESET));
		strcpy((char*)Player_Name, "DownCraft");
	}

	if (ScrollNameChanger == 7)
	{
		char RESET[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x36, 0x75, 0x73, 0x70, 0x73, 0x33, 0x00, 0x01 };
		write_process(0x3000ABE4, &RESET, sizeof(RESET));
		strcpy((char*)Player_Name, "A\nB\nC\nD\nE\nF\nG\nH\nI\nJ\nK\nL\nM\nN\nO\nP\nQ\nR\nS\nT\nU\nV\nW\nX\nY\nZ");
	}

	if (ScrollNameChanger == 8)
	{
		char RESET[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x36, 0x75, 0x73, 0x70, 0x73, 0x33, 0x00, 0x01 };
		write_process(0x3000ABE4, &RESET, sizeof(RESET));
		strcpy((char*)Player_Name, "Your IP is: 125.58.46.741");
	}

	if (ScrollNameChanger == 9)
	{
		char RESET[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x36, 0x75, 0x73, 0x70, 0x73, 0x33, 0x00, 0x01 };
		write_process(0x3000ABE4, &RESET, sizeof(RESET));
		strcpy((char*)Player_Name, "\n\nSPRX\n V3\n Premium");
	}

	if (ScrollNameChanger == 10)
	{
		char RESET[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x36, 0x75, 0x73, 0x70, 0x73, 0x33, 0x00, 0x01 };
		write_process(0x3000ABE4, &RESET, sizeof(RESET));
		strcpy((char*)Player_Name, "\n\n\nMisaki\nis\nhere\n");
	}

	if (ScrollNameChanger == 11)
	{
		char RESET[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x36, 0x75, 0x73, 0x70, 0x73, 0x33, 0x00, 0x01 };
		write_process(0x3000ABE4, &RESET, sizeof(RESET));
		strcpy((char*)Player_Name, "");
	}

	if (ScrollNameChanger == 12)
	{
		char RESET[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x36, 0x75, 0x73, 0x70, 0x73, 0x33, 0x00, 0x01 };
		write_process(0x3000ABE4, &RESET, sizeof(RESET));
		strcpy((char*)Player_Name, "Hello\nEveryone\nIm\nJust\nA\nUser\nOf\nThe\nNew\nSPRX\nDownCraft");
	}

	if (ScrollNameChanger == 13)
	{
		char RESET[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x36, 0x75, 0x73, 0x70, 0x73, 0x33, 0x00, 0x01 };
		write_process(0x3000ABE4, &RESET, sizeof(RESET));
		strcpy((char*)Player_Name, "**********");
	}

	if (ScrollNameChanger == 14)
	{
		char RESET[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x36, 0x75, 0x73, 0x70, 0x73, 0x33, 0x00, 0x01 };
		write_process(0x3000ABE4, &RESET, sizeof(RESET));
		strcpy((char*)Player_Name, "\(*_*)/");
	}

	if (ScrollNameChanger == 15)
	{
		char RESET[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x36, 0x75, 0x73, 0x70, 0x73, 0x33, 0x00, 0x01 };
		write_process(0x3000ABE4, &RESET, sizeof(RESET));
		strcpy((char*)Player_Name, "© DownCraft SPRX");
	}

	if (ScrollNameChanger == 16)
	{
		char RESET[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x36, 0x75, 0x73, 0x70, 0x73, 0x33, 0x00, 0x01 };
		write_process(0x3000ABE4, &RESET, sizeof(RESET));
		strcpy((char*)Player_Name, "®️ :3");
	}

	if (ScrollNameChanger == 17)
	{
		char RESET[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x36, 0x75, 0x73, 0x70, 0x73, 0x33, 0x00, 0x01 };
		write_process(0x3000ABE4, &RESET, sizeof(RESET));
		strcpy((char*)Player_Name, "¦|");
	}

	if (ScrollNameChanger == 18)
	{
		char RESET[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x36, 0x75, 0x73, 0x70, 0x73, 0x33, 0x00, 0x01 };
		write_process(0x3000ABE4, &RESET, sizeof(RESET));
		strcpy((char*)Player_Name, "$SPRX$");
	}
}

void SelectMiniGame()
{
	if (ScrollMiniGame == 0)
	{
		if (!CanCraft)
		{
			char MOD1[] = { 0x01 };
			write_process(0x00AED18F, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x01 };
			write_process(0x0098871F, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x01 };
			write_process(0x007D75A3, &MOD3, sizeof(MOD3));

			char MOD4[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x007D767C, &MOD4, sizeof(MOD4));
			OPTION_TOGGLE(true);
			sleep(200);
			CanCraft = true;
		}
		else
		{
			char MOD1[] = { 0x00 };
			write_process(0x00AED18F, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x00 };
			write_process(0x0098871F, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x00 };
			write_process(0x007D75A3, &MOD3, sizeof(MOD3));

			char MOD4[] = { 0xF8, 0x21, 0xFF, 0x81 };
			write_process(0x007D767C, &MOD4, sizeof(MOD4));
			OPTION_TOGGLE(false);
			sleep(200);
			CanCraft = false;
		}
	}

	if (ScrollMiniGame == 1)
	{
		if (!CanPlaceBlock)
		{
			char MOD1[] = { 0x01 };
			write_process(0x007D75A3, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			CanPlaceBlock = true;
		}
		else
		{
			char MOD1[] = { 0x00 };
			write_process(0x007D75A3, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			CanPlaceBlock = false;
		}
	}

	if (ScrollMiniGame == 2)
	{
		if (!CanSeeSpectator)
		{
			char MOD1[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x007D86A0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			CanSeeSpectator = true;
		}
		else
		{
			char MOD1[] = { 0xF8, 0x21, 0xFF, 0x81 };
			write_process(0x007D86A0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			CanSeeSpectator = false;
		}
	}

	if (ScrollMiniGame == 3)
	{
		if (!PlayersAreStarved)
		{
			char MOD1[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x007D7AA0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			PlayersAreStarved = true;
		}
		else
		{
			char MOD1[] = { 0xF8, 0x21, 0xFF, 0x71 };
			write_process(0x007D7AA0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			PlayersAreStarved = false;
		}
	}

	if (ScrollMiniGame == 4)
	{
		if (!AllowPortals)
		{
			char MOD1[] = { 0x38, 0x60, 0x00, 0x00 };
			write_process(0x007DC3BC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			AllowPortals = true;
		}
		else
		{
			char MOD1[] = { 0x38, 0x60, 0x00, 0x01 };
			write_process(0x007DC3BC, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			AllowPortals = false;
		}
	}

	if (ScrollMiniGame == 5)
	{
		if (!TntCanDestroy)
		{
			char MOD1[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x007D8FB8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			TntCanDestroy = true;
		}
		else
		{
			char MOD1[] = { 0xF8, 0x21, 0xFF, 0x81 };
			write_process(0x007D8FB8, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			TntCanDestroy = false;
		}
	}

	if (ScrollMiniGame == 6)
	{
		if (!MaxPlayersSmallMap)
		{
			char MOD1[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x007D7984, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			MaxPlayersSmallMap = true;
		}
		else
		{
			char MOD1[] = { 0xF8, 0x21, 0xFF, 0x81 };
			write_process(0x007D7984, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			MaxPlayersSmallMap = false;
		}
	}

	if (ScrollMiniGame == 7)
	{
		if (!CreativeInventory)
		{
			char MOD1[] = { 0x01 };
			write_process(0x00AED18F, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			CreativeInventory = true;
		}
		else
		{
			char MOD1[] = { 0x00 };
			write_process(0x00AED18F, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			CreativeInventory = false;
		}
	}

	if (ScrollMiniGame == 8)
	{
		if (!CanDestroyBlocks)
		{
			char MOD1[] = { 0x01 };
			write_process(0x007D75FF, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			CanDestroyBlocks = true;
		}
		else
		{
			char MOD1[] = { 0x00 };
			write_process(0x007D75FF, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			CanDestroyBlocks = false;
		}
	}

	if (ScrollMiniGame == 9)
	{
		if (!GameModeToSurvival)
		{
			char MOD1[] = { 0x4E, 0x80, 0x00, 0x20 };
			write_process(0x007D88C0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(true);
			sleep(200);
			GameModeToSurvival = true;
		}
		else
		{
			char MOD1[] = { 0xF8, 0x21, 0xFF, 0x81 };
			write_process(0x007D88C0, &MOD1, sizeof(MOD1));
			OPTION_TOGGLE(false);
			sleep(200);
			GameModeToSurvival = false;
		}
	}

	if (ScrollMiniGame == 10)
	{
		if (!InventoryCreaTumble)
		{
			InventoryCreaTumble = true;
			sleep(1000);
			Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
			Dialog::ProgressBar("Press  +  for enable / disable the Inventory Creative !", "Tips", 5);
			Dialog::End();
		}
		else
		{
			InventoryCreaTumble = false;
		}
	}

	if (ScrollMiniGame == 11)
	{
		char MOD1[] = { 0x41 };
		write_process(0x00B01BAC, &MOD1, sizeof(MOD1));
		char MOD2[] = { 0x40 };
		write_process(0x00011ADC, &MOD2, sizeof(MOD2));

		sleep(1000);

		setLocation(-343, 57, -341, true);

		sleep(5000);

		char MOD3[] = { 0x40 };
		write_process(0x00B01BAC, &MOD3, sizeof(MOD3));
		char MOD4[] = { 0x41 };
		write_process(0x00011ADC, &MOD4, sizeof(MOD4));
	}

	if (ScrollMiniGame == 12)
	{
		char MOD1[] = { 0x41 };
		write_process(0x00B01BAC, &MOD1, sizeof(MOD1));
		char MOD2[] = { 0x40 };
		write_process(0x00011ADC, &MOD2, sizeof(MOD2));

		sleep(1000);

		setLocation(-222, 66, 287, true);

		sleep(5000);

		char MOD3[] = { 0x40 };
		write_process(0x00B01BAC, &MOD3, sizeof(MOD3));
		char MOD4[] = { 0x41 };
		write_process(0x00011ADC, &MOD4, sizeof(MOD4));
	}

	if (ScrollMiniGame == 13)
	{
		char MOD1[] = { 0x41 };
		write_process(0x00B01BAC, &MOD1, sizeof(MOD1));
		char MOD2[] = { 0x40 };
		write_process(0x00011ADC, &MOD2, sizeof(MOD2));

		sleep(1000);

		setLocation(219, 65, -220, true);

		sleep(5000);

		char MOD3[] = { 0x40 };
		write_process(0x00B01BAC, &MOD3, sizeof(MOD3));
		char MOD4[] = { 0x41 };
		write_process(0x00011ADC, &MOD4, sizeof(MOD4));
	}

	if (ScrollMiniGame == 14)
	{
		char MOD1[] = { 0x41 };
		write_process(0x00B01BAC, &MOD1, sizeof(MOD1));
		char MOD2[] = { 0x40 };
		write_process(0x00011ADC, &MOD2, sizeof(MOD2));

		sleep(1000);

		setLocation(317, 76, 301, true);

		sleep(5000);

		char MOD3[] = { 0x40 };
		write_process(0x00B01BAC, &MOD3, sizeof(MOD3));
		char MOD4[] = { 0x41 };
		write_process(0x00011ADC, &MOD4, sizeof(MOD4));
	}
}

void SelectSettings()
{
	if (ScrollSettings == 0)
	{
		DrawScrollbarColor(4.29497e+09, 1, 1, 1.18744e-07);
		DrawTitleColor(4.29497e+09, 1, 1, 1.18744e-07);
		DrawLineColor(4.29497e+09, 1, 1, 0.0311279);
	}

	if (ScrollSettings == 1)
	{
		DrawScrollbarColor(1, 4.29497e+09, 1, 1.18744e-07);
		DrawTitleColor(1, 4.29497e+09, 1, 1.18744e-07);
		DrawLineColor(1, 4.29497e+09, 1, 0.0311279);
	}

	if (ScrollSettings == 2)
	{
		DrawScrollbarColor(1, 1, 4.29497e+09, 1.18744e-07);
		DrawTitleColor(1, 1, 4.29497e+09, 1.18744e-07);
		DrawLineColor(1, 1, 4.29497e+09, 0.0311279);
	}

	if (ScrollSettings == 3)
	{
		DrawScrollbarColor(1, 4.29497e+09, 4.29497e+09, 1.18744e-07);
		DrawTitleColor(1, 4.29497e+09, 4.29497e+09, 1.18744e-07);
		DrawLineColor(1, 4.29497e+09, 4.29497e+09, 0.0311279);
	}

	if (ScrollSettings == 4)
	{
		DrawScrollbarColor(1.99219, 0, 4.29497e+09, 0.125);
		DrawTitleColor(1.99219, 0, 4.29497e+09, 0.125);
		DrawLineColor(1.99219, 0, 4.29497e+09, 0.0311279);
	}

	if (ScrollSettings == 5)
	{
		DrawScrollbarColor(4.29497e+09, 4.29497e+09, 1, 1.18744e-07);
		DrawTitleColor(4.29497e+09, 4.29497e+09, 1, 1.18744e-07);
		DrawLineColor(4.29497e+09, 4.29497e+09, 1, 0.0311279);
	}

	if (ScrollSettings == 6) //<== BG COLORS
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0xC0 };
		write_process(Split_BG_Colors, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x4F, 0x80 };
		write_process(0x31E71F60, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x0F };
		write_process(0x31E71F64, &COLORS_BG1, sizeof(COLORS_BG1));

		char COLORS_BG2[] = { 0x0F };
		write_process(0x31E71F68, &COLORS_BG2, sizeof(COLORS_BG2));
	}

	if (ScrollSettings == 7)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0xC0 };
		write_process(Split_BG_Colors, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x0F, 0x80 };
		write_process(0x31E71F60, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x4F };
		write_process(0x31E71F64, &COLORS_BG1, sizeof(COLORS_BG1));

		char COLORS_BG2[] = { 0x0F };
		write_process(0x31E71F68, &COLORS_BG2, sizeof(COLORS_BG2));
	}

	if (ScrollSettings == 8)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0xC0 };
		write_process(Split_BG_Colors, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x0F, 0x80 };
		write_process(0x31E71F60, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x4F };
		write_process(0x31E71F68, &COLORS_BG1, sizeof(COLORS_BG1));

		char COLORS_BG2[] = { 0x0F };
		write_process(0x31E71F64, &COLORS_BG2, sizeof(COLORS_BG2));
	}

	if (ScrollSettings == 9)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0xC0 };
		write_process(Split_BG_Colors, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x0F, 0x80 };
		write_process(0x31E71F60, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x4F };
		write_process(0x31E71F64, &COLORS_BG1, sizeof(COLORS_BG1));

		char COLORS_BG2[] = { 0x4F };
		write_process(0x31E71F68, &COLORS_BG2, sizeof(COLORS_BG2));
	}

	if (ScrollSettings == 10)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0xC0 };
		write_process(Split_BG_Colors, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x3F, 0x80 };
		write_process(0x31E71F60, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x0F };
		write_process(0x31E71F64, &COLORS_BG1, sizeof(COLORS_BG1));

		char COLORS_BG2[] = { 0x4F };
		write_process(0x31E71F68, &COLORS_BG2, sizeof(COLORS_BG2));
	}

	if (ScrollSettings == 11)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0xC0 };
		write_process(Split_BG_Colors, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x4F, 0x80 };
		write_process(0x31E71F60, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x4F };
		write_process(0x31E71F64, &COLORS_BG1, sizeof(COLORS_BG1));

		char COLORS_BG2[] = { 0x0F };
		write_process(0x31E71F68, &COLORS_BG2, sizeof(COLORS_BG2));
	}

	if (ScrollSettings == 12) //<== TEXTS COLORS
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
		write_process(Split_Color_Text, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x4F, 0x80 };
		write_process(0x31E72950, &COLORS_BG, sizeof(COLORS_BG));
	}

	if (ScrollSettings == 13)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
		write_process(Split_Color_Text, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x4F, 0x80 };
		write_process(0x31E72954, &COLORS_BG, sizeof(COLORS_BG));
	}

	if (ScrollSettings == 14)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
		write_process(Split_Color_Text, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x4F, 0x80 };
		write_process(0x31E72958, &COLORS_BG, sizeof(COLORS_BG));
	}

	if (ScrollSettings == 15)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
		write_process(Split_Color_Text, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x4F, 0x80 };
		write_process(0x31E72954, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x4F, 0x80 };
		write_process(0x31E72958, &COLORS_BG1, sizeof(COLORS_BG1));
	}

	if (ScrollSettings == 16)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
		write_process(Split_Color_Text, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x3F, 0xFF };
		write_process(0x31E72950, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x4F, 0x80 };
		write_process(0x31E72958, &COLORS_BG1, sizeof(COLORS_BG1));
	}

	if (ScrollSettings == 17)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
		write_process(Split_Color_Text, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x4F };
		write_process(0x31E72950, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x4F, 0x80 };
		write_process(0x31E72954, &COLORS_BG1, sizeof(COLORS_BG1));
	}
}

void SelectHudColors()
{
	if (ScrollHudColors == 0)
	{
		*(int*)0x30DBAD64 = 0x4F800000;
		*(int*)0x30DBAD68 = 0x3F800000;
		*(int*)0x30DBAD6C = 0x3F800000;
	}

	if (ScrollHudColors == 1)
	{
		*(int*)0x30DBAD64 = 0x3F800000;
		*(int*)0x30DBAD68 = 0x4F800000;
		*(int*)0x30DBAD6C = 0x3F800000;
	}

	if (ScrollHudColors == 2)
	{
		*(int*)0x30DBAD64 = 0x3F800000;
		*(int*)0x30DBAD68 = 0x3F800000;
		*(int*)0x30DBAD6C = 0x4F800000;
	}

	if (ScrollHudColors == 3)
	{
		*(int*)0x30DBAD64 = 0x3FFF0000;
		*(int*)0x30DBAD68 = 0x3E900000;
		*(int*)0x30DBAD6C = 0x3F800000;
	}

	if (ScrollHudColors == 4)
	{
		*(int*)0x30DBAD64 = 0x3F800000;
		*(int*)0x30DBAD68 = 0x0F800000;
		*(int*)0x30DBAD6C = 0x4F800000;
	}

	if (ScrollHudColors == 5)
	{
		*(int*)0x30DBAD64 = 0x3F800000;
		*(int*)0x30DBAD68 = 0x4F800000;
		*(int*)0x30DBAD6C = 0x4F800000;
	}

	if (ScrollHudColors == 6)
	{
		*(int*)0x30DBAD64 = 0x3F800000;
		*(int*)0x30DBAD68 = 0x4F800000;
		*(int*)0x30DBAD6C = 0x4F800000;
	}

	if (ScrollHudColors == 7)
	{
		*(int*)0x30DBAD64 = 0x4F800000;
		*(int*)0x30DBAD68 = 0x4F800000;
		*(int*)0x30DBAD6C = 0x3F800000;
	}

	if (ScrollHudColors == 8)
	{
		*(int*)0x30DBAD64 = 0x39FF0000;
		*(int*)0x30DBAD68 = 0x39FF0000;
		*(int*)0x30DBAD6C = 0x39FF0000;
	}

	if (ScrollHudColors == 9)
	{
		*(int*)0x30DBAD64 = 0x3FFF0000;
		*(int*)0x30DBAD68 = 0x3FFF0000;
		*(int*)0x30DBAD6C = 0x3FFF0000;
	}

	if (ScrollHudColors == 10)
	{
		*(int*)0x30DBAD64 = 0x3F800000;
		*(int*)0x30DBAD68 = 0x3F800000;
		*(int*)0x30DBAD6C = 0x3F800000;
	}
}

void SelectFOV()
{
	if (ScrollFOV == 0)
	{
		*(int*)0x014C670C = 0x3F700000;
	}

	if (ScrollFOV == 1)
	{
		*(int*)0x014C670C = 0x3F600000;
	}

	if (ScrollFOV == 2)
	{
		*(int*)0x014C670C = 0x3F500000;
	}

	if (ScrollFOV == 3)
	{
		*(int*)0x014C670C = 0x3F400000;
	}

	if (ScrollFOV == 4)
	{
		*(int*)0x014C670C = 0x3F300000;
	}

	if (ScrollFOV == 5)
	{
		*(int*)0x014C670C = 0x3F200000;
	}

	if (ScrollFOV == 6)
	{
		*(int*)0x014C670C = 0x3F100000;
	}

	if (ScrollFOV == 7)
	{
		*(int*)0x014C670C = 0x3F050000;
	}

	if (ScrollFOV == 8)
	{
		*(int*)0x014C670C = 0xBF000000;
	}

	if (ScrollFOV == 9)
	{
		*(int*)0x014C670C = 0x3FFF0000;
	}

	if (ScrollFOV == 10)
	{
		*(int*)0x014C670C = 0x3F800000;
	}
}

#pragma endregion

#pragma region FIRST LOAD SPRX

void FIRST_LOAD_SPRX()
{
	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char HUD_BAR_LOADING[] = { 0xC0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x20, 0x00, 0x00, 0x44, 0x0B, 0x00, 0x00, 0x42, 0xA4, 0x00 };
	write_process(Split_HUD, &HUD_BAR_LOADING, sizeof(HUD_BAR_LOADING));

	char POSITION_TEXTS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC1, 0xB0, 0x00, 0x00, 0x40, 0xDA };
	write_process(Split_Text_Position, &POSITION_TEXTS, sizeof(POSITION_TEXTS));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x50, 0x00, 0x72, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x69, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char LOCK[] = { 0x01 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char COLORS_PROGRESS_BAR[] = { 0x4F };
	write_process(0x31E71F64, &COLORS_PROGRESS_BAR, sizeof(COLORS_PROGRESS_BAR));

	char PROGRESS_BAR_1[] = { 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_1, sizeof(PROGRESS_BAR_1));

	sleep(2000);

	char PROGRESS_BAR_2[] = { 0x3E, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_2, sizeof(PROGRESS_BAR_2));

	sleep(4000);

	char PROGRESS_BAR_3[] = { 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_3, sizeof(PROGRESS_BAR_3));

	sleep(2000);

	char PROGRESS_BAR_4[] = { 0x3E, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_4, sizeof(PROGRESS_BAR_4));

	sleep(2000);

	char PROGRESS_BAR_5[] = { 0x3E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_5, sizeof(PROGRESS_BAR_5));

	sleep(4000);

	char PROGRESS_BAR_6[] = { 0x3E, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_6, sizeof(PROGRESS_BAR_6));

	sleep(2000);

	char PROGRESS_BAR_7[] = { 0x3F, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_7, sizeof(PROGRESS_BAR_7));

	sleep(4000);

	char PROGRESS_BAR_8[] = { 0x3F, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_8, sizeof(PROGRESS_BAR_8));

	sleep(6000);

	char PROGRESS_BAR_9[] = { 0x3F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_9, sizeof(PROGRESS_BAR_9));

	sleep(3000);

	char PROGRESS_BAR_10[] = { 0x3F, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_10, sizeof(PROGRESS_BAR_10));

	sleep(3000);

	char PROGRESS_BAR_11[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_11, sizeof(PROGRESS_BAR_11));

	sleep(1000);

	char POSITION_TEXTS1[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC1, 0xB0, 0x00, 0x00, 0x40, 0xDA };
	write_process(Split_Text_Position, &POSITION_TEXTS1, sizeof(POSITION_TEXTS1));

	char TEXTS2[] = { 0x43, 0x00, 0x68, 0x00, 0x65, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x57, 0x00, 0x68, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x73, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x2E, 0x00, 0x2E, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS2, sizeof(TEXTS2));

	char HUD_BAR_LOADING1[] = { 0xC0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x20, 0x00, 0x00, 0x43, 0xFC, 0x00, 0x00, 0x42, 0xA4, 0x00 };
	write_process(Split_HUD, &HUD_BAR_LOADING1, sizeof(HUD_BAR_LOADING1));

	sleep(5000);

	OpenMenu(true);

	char COLORS_PROGRESS_BAR1[] = { 0x0F };
	write_process(0x31E71F64, &COLORS_PROGRESS_BAR1, sizeof(COLORS_PROGRESS_BAR1));
}

#pragma endregion


char * removespace(const char * notify)
{
	char buffer[0x500];
	strcat(buffer, notify);
	for (int i = 0; i < 0x500; i++)
	{
		if (buffer[i] == ' ')
		{
			buffer[i] = '\0';
		}
	}
	return buffer;
}