
#pragma region "Functions"


enum Offsets
{
	IsInWorld = 0x3000CF6B,
	Player_Name = 0x3000ABE4,
	Whitelist = 0x3000AD34,
	LockControl = 0x0155847C,


	//Split//
	Split_Screen = 0x00AEF9F0, //1.84
	Split_DrawText = 0x30FB2331, //1.84
	Split_Color_Text = 0x31E72950, //1.84
	SplitController = 0x31E7239C, //1.84
	Split_Shader_Shadow = 0x31E7281C, //1.84
	Split_HUD = 0x31E71F1C, //1.84
	Split_Text_Position = 0x31E7290C, //1.84
	Split_BG_Colors = 0x31E71F60, //1.84
	Split_Shader_White = 0x31E7272C, //1.84
	Split_Fix_Text = 0x00887E3B,
	//


	//Scroll Bar//
	ScrollBar_Shader = 0x31E74F0C,
	Scrollbar_Colors = 0x31E74F50,
	Scrollbar_Toggle = 0x31E74F20,
	//

};



#pragma region NAME CHANGER FUNCTIONS

void NAME_CHANGER() //<== VOID NAME CHANGER
{
	char Name[16];

	Keyboard::oskdialog_mode = Keyboard::MODE_OPEN;
	while (Keyboard::oskdialog_mode != Keyboard::MODE_EXIT)
	{
		Keyboard::keyboard(Name, L"", L"DownCraft SPRX Premium V2 ~ Name Changer | Enter your new name here:");
	}

	strcpy((char*)Player_Name, Name); //<== Name Offset
	return;
}

void NAME_CHANGER_GLITCHED() //<== VOID NAME CHANGER GLITCHED
{
	char Name[16];

	Keyboard::oskdialog_mode = Keyboard::MODE_OPEN;
	while (Keyboard::oskdialog_mode != Keyboard::MODE_EXIT)
	{
		Keyboard::keyboard(Name, L"", L"DownCraft SPRX Premium V2 ~ Name Changer Glitched | Enter your new name here:");
	}

	char NAME[] = { 0xC2, 0xA7, 0x67 };
	write_process(0x3000ABE4, &NAME, sizeof(NAME));

	strcpy((char*)0x3000ABE7, Name); //<== Name Offset
	return;
}

void NAME_CHANGER_COLORED() //<== VOID NAME CHANGER COLORED
{
	char Name[16];

	Keyboard::oskdialog_mode = Keyboard::MODE_OPEN;
	while (Keyboard::oskdialog_mode != Keyboard::MODE_EXIT)
	{
		Keyboard::keyboard(Name, L"", L"Colors: 0 = BLACK, 9 = BLUE, a = GREEN, b = AQUA, c = RED, d = LIGHT PURPLE, e = YELLOW, 6 = GOLD");
	}

	char NAME[] = { 0xC2, 0xA7 };
	write_process(0x3000ABE4, &NAME, sizeof(NAME));

	strcpy((char*)0x3000ABE6, Name); //<== Name Offset
	return;
}

void NAME_CHANGER_LINES() //<== VOID NAME CHANGER LINES
{
	char Name[16];

	Keyboard::oskdialog_mode = Keyboard::MODE_OPEN;
	while (Keyboard::oskdialog_mode != Keyboard::MODE_EXIT)
	{
		Keyboard::keyboard(Name, L"", L"Name Changer Lines");
	}

	char NAME[] = { 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A };
	write_process(0x3000ABE4, &NAME, sizeof(NAME));

	strcpy((char*)0x3000ABEE, Name); //<== Name Offset
	return;
}

#pragma endregion



void GAME_STATES()
{
	strcpy((char*)0x320E8410, "Alone - DownCraft SPRX Premium");
	strcpy((char*)0x320E89E0, "Multiplayer - DownCraft SPRX Premium");

	//for fix text
	char FIX[] = { 0x00 };
	write_process(0x00887E3B, &FIX, sizeof(FIX));

	//Show actualy game states = 0x017003D8
}


bool InWorld() 
{
	return !(*(char*)IsInWorld != 0);
}


#pragma region MOD ENABLED AND DISABLED

void MOD_ENABLED() //<== CHANGE HUD TO GREEN FOR A OPTION ENABLED
{
	char OPTENABLED[] = { 0x3F, 0x80, 0x00, 0x00, 0x4F, 0x80 };
	write_process(0x3000AAF8, &OPTENABLED, sizeof(OPTENABLED));
	sleep(300);
	char OPTENABLED1[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
	write_process(0x3000AAF8, &OPTENABLED1, sizeof(OPTENABLED1));
}


void MOD_DISABLED() // <== CHANGE HUD TO RED FOR A OPTION DISABLED
{
	char OPTDISABLED[] = { 0x4F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
	write_process(0x3000AAF8, &OPTDISABLED, sizeof(OPTDISABLED));
	sleep(300);
	char OPTENABLED1[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
	write_process(0x3000AAF8, &OPTENABLED1, sizeof(OPTENABLED1));
}

#pragma endregion

#pragma region SET DEFAULT COLORS MENU

void COLORS_DEFAULT()
{
	char SCROLLBARCOLOR[] = { 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
	write_process(Scrollbar_Colors, &SCROLLBARCOLOR, sizeof(SCROLLBARCOLOR));


	char COLORS_BG[] = { 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x3F, 0xC0, 0x00 };
	write_process(Split_BG_Colors, &COLORS_BG, sizeof(COLORS_BG));


	char COLORS_TEXTS[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x4F, 0x80, 0x00, 0x00 };
	write_process(Split_Color_Text, &COLORS_TEXTS, sizeof(COLORS_TEXTS));
}

#pragma endregion

#pragma region "RGB FUNCTIONS"

float colorR = 255, colorG = 0, colorB = 0;
void DoColors() {
	if (colorR > 0 && colorB == 0)
	{
		colorR -= 1;
		colorG += 1;
	}
	if (colorG > 0 && colorR == 0)
	{
		colorG -= 1;
		colorB += 1;
	}
	if (colorB > 0 && colorG == 0)
	{
		colorR += 1;
		colorB -= 1;
	}
}

uint32_t colorDo;

void RGB_Background_THEMES()
{
	colorDo += 1;
	if (colorDo == 60)
	{
		DoColors();
		colorDo = 0;
	}

	*(float*)(0x31E71F60) = colorR / 255.0f;
	*(float*)(0x31E71F64) = colorG / 255.0f;
	*(float*)(0x31E71F68) = colorB / 255.0f;
}

void RGB_Scroll_THEMES()
{
	colorDo += 1;
	if (colorDo == 60)
	{
		DoColors();
		colorDo = 0;
	}

	*(float*)(0x31E74F50) = colorR / 255.0f;
	*(float*)(0x31E74F54) = colorG / 255.0f;
	*(float*)(0x31E74F58) = colorB / 255.0f;
}

void RGB_Text_THEMES()
{
	colorDo += 1;
	if (colorDo == 60)
	{
		DoColors();
		colorDo = 0;
	}

	*(float*)(0x31E72950) = colorR / 255.0f;
	*(float*)(0x31E72954) = colorG / 255.0f;
	*(float*)(0x31E72958) = colorB / 255.0f;
}



#pragma endregion

#pragma region NAME MOVING

void NAME_MOVING()
{
	for (float i = -400; i <= -90; i += 5)
	{
		*(float*)(0x00AA47BC) = i;
		sleep(5);
	}
}

void NAME_MOVING_V2()
{
	colorDo += 1;
	if (colorDo == 60)
	{
		DoColors();
		colorDo = 0;
	}

	*(float*)(0x00AA47BC) = colorR / 255.0f;
	*(float*)(0x00AA47BC) = colorG / 255.0f;
	*(float*)(0x00AA47BC) = colorB / 255.0f;
}


#pragma endregion

#pragma region BAR_INSTRUCTIONS_1

void BAR_INSTRUCTION_1()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x53, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x66, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x75, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x75, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x73, 0x00, 0x63, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x75, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x75, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x6F, 0x00, 0x62, 0x00, 0x62, 0x00, 0x79, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x75, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x54, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x75, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x64, 0x00, 0x69, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x75, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0xC0, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x20, 0x00, 0x00, 0x44, 0x46, 0x00, 0x00, 0x43, 0xA4, 0x00 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x43, 0x46, 0x00, 0x00, 0x43, 0xCD, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBARSELECT[] = { 0x46, 0xAA };
	write_process(Scrollbar_Toggle, &SCROLLBARSELECT, sizeof(SCROLLBARSELECT));

}

#pragma endregion

#pragma region BAR_INSTRUCTIONS_2

void BAR_INSTRUCTION_2()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x50, 0x00, 0x72, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x69, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0xC0, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x20, 0x00, 0x00, 0x42, 0x56, 0x00, 0x00, 0xC3, 0x90 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC3, 0x5C, 0x50, 0x00, 0xC3, 0x99 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBARSELECT[] = { 0x46, 0xAA };
	write_process(Scrollbar_Toggle, &SCROLLBARSELECT, sizeof(SCROLLBARSELECT));

}

#pragma endregion



#pragma region HOST MENU 3


#pragma region Open HOST Menu

void OpenHostPage3()
{
	if (LockOptions == 0)
	{
		char LOCK[] = { 0x01 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}
	else
	{
		char LOCK[] = { 0x00 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x4E, 0x00, 0x54, 0x00, 0x20, 0x00, 0x45, 0x00, 0x78, 0x00, 0x74, 0x00, 0x72, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x45, 0x00, 0x78, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x7A, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00, 0x53, 0x00, 0x33, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x65, 0x00, 0x74, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x63, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x20, 0x00, 0x56, 0x00, 0x31, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x67, 0x00, 0x73, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x32, 0x00, 0x74, 0x00, 0x68, 0x00, 0x20, 0x00, 0x48, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x66, 0x00, 0x66, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x48, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x65, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x61, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x57, 0x00, 0x65, 0x00, 0x62, 0x00, 0x20, 0x00, 0x48, 0x00, 0x61, 0x00, 0x78, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x41, 0x00, 0x72, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x20, 0x00, 0x50, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x75, 0x00, 0x72, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x10, 0x00, 0x00, 0xC2, 0xB0, 0x00, 0x00, 0x43, 0xCF };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC3, 0x70, 0x00, 0x00, 0xC1, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x42, 0xB6, 0x00, 0x00, 0x43, 0x45, 0x00 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));

	char SCROLLBARSELECT[] = { 0x43, 0x4A };
	write_process(Scrollbar_Toggle, &SCROLLBARSELECT, sizeof(SCROLLBARSELECT));

	HostMenu3 = true;

	ScrollHostMenu3 = 0;

	movename = true; //ENABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Close Host Menu

void CloseHostMenu3()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x43, 0xED, 0x00, 0x00, 0x43, 0x77 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));


	HostMenu3 = false;

	ScrollHostMenu3 = 0;

	movename = false; //FALSE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Scroll Menu Host Page 3 Down

void ScrollMenuHost3Down()
{
	if (ScrollHostMenu3 == 19)//19 = max
	{
		ScrollHostMenu3 = 0;
	}
	else
	{
		ScrollHostMenu3 = ScrollHostMenu3 + 1;
	}

	if (ScrollHostMenu3 == 0)
	{
		char DOWN1[] = { 0x43, 0x4A };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollHostMenu3 == 1)
	{
		char DOWN1[] = { 0x43, 0x63 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollHostMenu3 == 2)
	{
		char DOWN2[] = { 0x43, 0x7A };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollHostMenu3 == 3)
	{
		char DOWN3[] = { 0x43, 0x89 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollHostMenu3 == 4)
	{
		char DOWN4[] = { 0x43, 0x95 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 5)
	{
		char DOWN4[] = { 0x43, 0xA1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 6)
	{
		char DOWN4[] = { 0x43, 0xAE };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 7)
	{
		char DOWN4[] = { 0x43, 0xB9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 8)
	{
		char DOWN4[] = { 0x43, 0xC5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 9)
	{
		char DOWN4[] = { 0x43, 0xD1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 10)
	{
		char DOWN4[] = { 0x43, 0xDD };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 11)
	{
		char DOWN4[] = { 0x43, 0xE9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 12)
	{
		char DOWN4[] = { 0x43, 0xF5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 13)
	{
		char DOWN4[] = { 0x44, 0x01 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 14)
	{
		char DOWN4[] = { 0x44, 0x06 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 15)
	{
		char DOWN4[] = { 0x44, 0x0C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 16)
	{
		char DOWN4[] = { 0x44, 0x12 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 17)
	{
		char DOWN4[] = { 0x44, 0x18 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 18)
	{
		char DOWN4[] = { 0x44, 0x1F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 19)
	{
		char DOWN4[] = { 0x44, 0x25 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}


#pragma endregion


#pragma region Scroll Menu Host Page 3 Up

void ScrollMenuHost3Up()
{
	if (ScrollHostMenu3 == 0)
	{
		ScrollHostMenu3 = 19; // 19 = max
	}
	else
	{
		ScrollHostMenu3 = ScrollHostMenu3 - 1;
	}

	if (ScrollHostMenu3 == 0)
	{
		char DOWN1[] = { 0x43, 0x4A };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollHostMenu3 == 1)
	{
		char DOWN1[] = { 0x43, 0x63 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollHostMenu3 == 2)
	{
		char DOWN2[] = { 0x43, 0x7A };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollHostMenu3 == 3)
	{
		char DOWN3[] = { 0x43, 0x89 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollHostMenu3 == 4)
	{
		char DOWN4[] = { 0x43, 0x95 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 5)
	{
		char DOWN4[] = { 0x43, 0xA1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 6)
	{
		char DOWN4[] = { 0x43, 0xAE };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 7)
	{
		char DOWN4[] = { 0x43, 0xB9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 8)
	{
		char DOWN4[] = { 0x43, 0xC5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 9)
	{
		char DOWN4[] = { 0x43, 0xD1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 10)
	{
		char DOWN4[] = { 0x43, 0xDD };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 11)
	{
		char DOWN4[] = { 0x43, 0xE9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 12)
	{
		char DOWN4[] = { 0x43, 0xF5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 13)
	{
		char DOWN4[] = { 0x44, 0x01 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 14)
	{
		char DOWN4[] = { 0x44, 0x06 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 15)
	{
		char DOWN4[] = { 0x44, 0x0C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 16)
	{
		char DOWN4[] = { 0x44, 0x12 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 17)
	{
		char DOWN4[] = { 0x44, 0x18 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 18)
	{
		char DOWN4[] = { 0x44, 0x1F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu3 == 19)
	{
		char DOWN4[] = { 0x44, 0x25 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}

#pragma endregion


#pragma region Select Host 3 Options


//select options host 3
void SelectMenuHost3Option()
{
	if (ScrollHostMenu3 == 0)
	{
		if (!TntExtrem)
		{
			char MODE[] = { 0x42, 0x80, 0x00, 0x00 };
			write_process(0x0051E0D0, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			TntExtrem = true;
		}
		else
		{
			char MODE[] = { 0x40, 0x80, 0x00, 0x00 };
			write_process(0x0051E0D0, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			TntExtrem = false;
		}
	}

	if (ScrollHostMenu3 == 1)
	{
		MOD_ENABLED();
		char MODE[] = { 0x40 };
		write_process(0x00AEE434, &MODE, sizeof(MODE));

		char MODE1[] = { 0xCF, 0x80 };
		write_process(0x00393E34, &MODE1, sizeof(MODE1));

		sleep(1500);

		char MODE2[] = { 0x4F, 0x80 };
		write_process(0x00393E34, &MODE2, sizeof(MODE2));

		char MODE3[] = { 0x2F, 0x80 };
		write_process(0x00393E34, &MODE3, sizeof(MODE3));

		char MODE4[] = { 0x3F, 0x80 };
		write_process(0x00393E34, &MODE4, sizeof(MODE4));

		char MODE5[] = { 0x41 };
		write_process(0x00AEE434, &MODE5, sizeof(MODE5));

	}

	if (ScrollHostMenu3 == 2)
	{
		if (!GetEnchant)
		{
			char MODE[] = { 0x01 };
			write_process(0x00218A4F, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			GetEnchant = true;
		}
		else
		{
			char MODE[] = { 0x00 };
			write_process(0x00218A4F, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			GetEnchant = false;
		}
	}

	if (ScrollHostMenu3 == 3)
	{
		if (!LightboldV1)
		{
			char MODE[] = { 0x01 };
			write_process(0x0098871F, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			LightboldV1 = true;
		}
		else
		{
			char MODE[] = { 0x00 };
			write_process(0x0098871F, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			LightboldV1 = false;
		}
	}

	if (ScrollHostMenu3 == 4)
	{
		if (!LightboldV2)
		{
			char MODE[] = { 0x01 };
			write_process(0x0098871F, &MODE, sizeof(MODE));

			char MODE1[] = { 0xFF };
			write_process(0x00393E34, &MODE1, sizeof(MODE1));

			MOD_ENABLED();
			sleep(200);
			LightboldV2 = true;
		}
		else
		{
			char MODE[] = { 0x00 };
			write_process(0x0098871F, &MODE, sizeof(MODE));

			char MODE1[] = { 0x3F };
			write_process(0x00393E34, &MODE1, sizeof(MODE1));

			MOD_DISABLED();
			sleep(200);
			LightboldV2 = false;
		}
	}

	if (ScrollHostMenu3 == 5)
	{
		if (!LagsAllPlayer)
		{
			char MODE[] = { 0x7E };
			write_process(0x01310954, &MODE, sizeof(MODE));

			char MODE1[] = { 0x4F };
			write_process(0x00393E34, &MODE1, sizeof(MODE1));

			MOD_ENABLED();
			sleep(200);
			LagsAllPlayer = true;
		}
		else
		{
			char MODE[] = { 0x3E };
			write_process(0x01310954, &MODE, sizeof(MODE));

			char MODE1[] = { 0x3F };
			write_process(0x00393E34, &MODE1, sizeof(MODE1));

			MOD_DISABLED();
			sleep(200);
			LagsAllPlayer = false;
		}
	}

	if (ScrollHostMenu3 == 6)
	{
		if (dimensionvalue == 2)
		{
			MOD_ENABLED();
			char MODE1[] = { 0x30, 0xDC, 0x40, 0x50 };
			write_process(0x0151DBEC, &MODE1, sizeof(MODE1));
			dimensionvalue = 0;

			Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
			Dialog::ProgressBar("Dimension Changer To Overworld", "Dimension", 3);
			return;
		}

		sleep(500);

		if (dimensionvalue == 1)
		{
			MOD_ENABLED();
			char MODE2[] = { 0x30, 0xDC, 0x41, 0x90 };
			write_process(0x0151DBEC, &MODE2, sizeof(MODE2));
			dimensionvalue = 2;

			Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
			Dialog::ProgressBar("Dimension Changer To Nether", "Dimension", 3);
			return;
		}

		sleep(500);

		if (dimensionvalue == 0)
		{
			MOD_ENABLED();
			char MODE3[] = { 0x30, 0xDC, 0x41, 0xD0 };
			write_process(0x0151DBEC, &MODE3, sizeof(MODE3));
			dimensionvalue = 1;

			Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
			Dialog::ProgressBar("Dimension Changer To The End", "Dimension", 3);
			return;
		}

		sleep(500);
	}

	if (ScrollHostMenu3 == 7)
	{
		if (itemson2thhandvalue == 2)
		{
			MOD_ENABLED();
			char MODE1[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MODE1, sizeof(MODE1));
			itemson2thhandvalue = 0;

			Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
			Dialog::ProgressBar("Items by Default for For 2th Hand", "Items Changed", 3);
			return;
		}

		sleep(500);

		if (itemson2thhandvalue == 1)
		{
			MOD_ENABLED();
			char MODE2[] = { 0x32, 0x1E, 0xD5, 0x20 };
			write_process(0x014C93F0, &MODE2, sizeof(MODE2));
			itemson2thhandvalue = 2;

			Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
			Dialog::ProgressBar("Items Diamond Sword for For 2th Hand", "Items Changed", 3);
			return;
		}

		sleep(500);

		if (itemson2thhandvalue == 0)
		{
			MOD_ENABLED();
			char MODE3[] = { 0x32, 0x1E, 0xA1, 0x40 };
			write_process(0x014C93F0, &MODE3, sizeof(MODE3));
			itemson2thhandvalue = 1;

			Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
			Dialog::ProgressBar("Items Iron Axe for For 2th Hand", "Items Changed", 3);
			return;
		}

		sleep(500);
	}

	if (ScrollHostMenu3 == 8)
	{
		if (effectchangedvalue == 2)
		{
			MOD_ENABLED();
			char MODE1[] = { 0x32, 0x1B, 0x9D, 0x80 };
			write_process(0x014C9B48, &MODE1, sizeof(MODE1));
			effectchangedvalue = 0;

			Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
			Dialog::ProgressBar("Use a Apple for get default effect", "Effect Changer", 3);
			return;
		}

		sleep(500);

		if (effectchangedvalue == 1)
		{
			MOD_ENABLED();
			char MODE2[] = { 0x32, 0x1B, 0x9C, 0x40 };
			write_process(0x014C9B48, &MODE2, sizeof(MODE2));
			effectchangedvalue = 2;

			Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
			Dialog::ProgressBar("Use a Apple for get Nausea effect", "Effect Changer", 3);
			return;
		}

		sleep(500);

		if (effectchangedvalue == 0)
		{
			MOD_ENABLED();
			char MODE3[] = { 0x32, 0x1B, 0xA2, 0x90 };
			write_process(0x014C9B48, &MODE3, sizeof(MODE3));
			effectchangedvalue = 1;

			Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
			Dialog::ProgressBar("Use a Apple for get Blindness effect", "Effect Changer", 3);
			return;
		}

		sleep(500);
	}

	if (ScrollHostMenu3 == 9)
	{
		if (!AllowItemsOnHead)
		{
			char MODE[] = { 0x40 };
			write_process(0x00428704, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			AllowItemsOnHead = true;
		}
		else
		{
			char MODE[] = { 0x41 };
			write_process(0x00428704, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			AllowItemsOnHead = false;
		}
	}

	if (ScrollHostMenu3 == 10)
	{
		if (!GetSpectator)
		{
			char MODE[] = { 0x32, 0x3A, 0x84, 0xC0 };
			write_process(0x014C9048, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			GetSpectator = true;
		}
		else
		{
			char MODE[] = { 0x32, 0x39, 0x4B, 0xD0 };
			write_process(0x014C9048, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			GetSpectator = false;
		}
	}

	if (ScrollHostMenu3 == 11)
	{
		if (!NoWebHax)
		{
			char MODE[] = { 0x00 };
			write_process(0x00234F9F, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			NoWebHax = true;
		}
		else
		{
			char MODE[] = { 0x01 };
			write_process(0x00234F9F, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			NoWebHax = false;
		}
	}

	if (ScrollHostMenu3 == 12)
	{
		if (!SpectralArrow)
		{
			char MODE[] = { 0x32, 0x20, 0x8D, 0xA0 };
			write_process(0x014C90D4, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			SpectralArrow = true;
		}
		else
		{
			char MODE[] = { 0x32, 0x1E, 0xAD, 0xA0 };
			write_process(0x014C90D4, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			SpectralArrow = false;
		}
	}

	if (ScrollHostMenu3 == 13)
	{
		if (!GodModeTotem)
		{
			char MODE[] = { 0x32, 0x1C, 0x0A, 0x60 };
			write_process(0x014C93F0, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			GodModeTotem = true;
		}
		else
		{
			char MODE[] = { 0x32, 0x20, 0xA4, 0xF0 };
			write_process(0x014C93F0, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			GodModeTotem = false;
		}
	}

	if (ScrollHostMenu3 == 14)
	{
		if (!StonePortalNether)
		{
			char MODE[] = { 0x32, 0x18, 0x11, 0xC0 };
			write_process(0x014C89FC, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			StonePortalNether = true;
		}
		else
		{
			char MODE[] = { 0x32, 0x18, 0x5E, 0x70 };
			write_process(0x014C89FC, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			StonePortalNether = false;
		}
	}

	if (ScrollHostMenu3 == 15)
	{
		if (!StopPressure)
		{
			char MODE[] = { 0x38, 0x60, 0x00, 0x01 };
			write_process(0x00237BC8, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			StopPressure = true;
		}
		else
		{
			char MODE[] = { 0x38, 0x60, 0x00, 0x00 };
			write_process(0x00237BC8, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			StopPressure = false;
		}
	}

	if (ScrollHostMenu3 == 16)
	{

	}

	if (ScrollHostMenu3 == 17)
	{
	
	}

	if (ScrollHostMenu3 == 18)
	{

	}

	if (ScrollHostMenu3 == 19)
	{

	}
}


#pragma endregion


#pragma endregion



#pragma region HOST MENU 2


#pragma region Open HOST Menu

void OpenHostPage2()
{
	if (LockOptions == 0)
	{
		char LOCK[] = { 0x01 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}
	else
	{
		char LOCK[] = { 0x00 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x41, 0x00, 0x72, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x41, 0x00, 0x72, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x61, 0x00, 0x76, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x61, 0x00, 0x76, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x55, 0x00, 0x6E, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x50, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x55, 0x00, 0x70, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x78, 0x00, 0x20, 0x00, 0x50, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x55, 0x00, 0x70, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x27, 0x00, 0x74, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x61, 0x00, 0x62, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x44, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x62, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x69, 0x00, 0x73, 0x00, 0x61, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x62, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x44, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x63, 0x00, 0x65, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x6F, 0x00, 0x62, 0x00, 0x62, 0x00, 0x79, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x75, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x57, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x72, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x75, 0x00, 0x72, 0x00, 0x76, 0x00, 0x69, 0x00, 0x76, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x4B, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x62, 0x00, 0x73, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x61, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x61, 0x00, 0x76, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x10, 0x00, 0x00, 0xC2, 0xB0, 0x00, 0x00, 0x43, 0xCF };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC3, 0x70, 0x00, 0x00, 0xC1, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x42, 0xB6, 0x00, 0x00, 0x43, 0x45, 0x00 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));

	char SCROLLBARSELECT[] = { 0x43, 0x4A };
	write_process(Scrollbar_Toggle, &SCROLLBARSELECT, sizeof(SCROLLBARSELECT));

	HostMenu2 = true;

	ScrollHostMenu2 = 0;

	movename = true; //ENABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Close Host Menu

void CloseHostMenu2()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x43, 0xED, 0x00, 0x00, 0x43, 0x77 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));


	HostMenu2 = false;

	ScrollHostMenu2 = 0;

	movename = false; //FALSE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Scroll Menu Host Page 2 Down

void ScrollMenuHost2Down()
{
	if (ScrollHostMenu2 == 19)//19 = max
	{
		ScrollHostMenu2 = 0;
	}
	else
	{
		ScrollHostMenu2 = ScrollHostMenu2 + 1;
	}

	if (ScrollHostMenu2 == 0)
	{
		char DOWN1[] = { 0x43, 0x4A };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollHostMenu2 == 1)
	{
		char DOWN1[] = { 0x43, 0x63 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollHostMenu2 == 2)
	{
		char DOWN2[] = { 0x43, 0x7A };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollHostMenu2 == 3)
	{
		char DOWN3[] = { 0x43, 0x89 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollHostMenu2 == 4)
	{
		char DOWN4[] = { 0x43, 0x95 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 5)
	{
		char DOWN4[] = { 0x43, 0xA1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 6)
	{
		char DOWN4[] = { 0x43, 0xAE };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 7)
	{
		char DOWN4[] = { 0x43, 0xB9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 8)
	{
		char DOWN4[] = { 0x43, 0xC5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 9)
	{
		char DOWN4[] = { 0x43, 0xD1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 10)
	{
		char DOWN4[] = { 0x43, 0xDD };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 11)
	{
		char DOWN4[] = { 0x43, 0xE9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 12)
	{
		char DOWN4[] = { 0x43, 0xF5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 13)
	{
		char DOWN4[] = { 0x44, 0x01 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 14)
	{
		char DOWN4[] = { 0x44, 0x06 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 15)
	{
		char DOWN4[] = { 0x44, 0x0C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 16)
	{
		char DOWN4[] = { 0x44, 0x12 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 17)
	{
		char DOWN4[] = { 0x44, 0x18 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 18)
	{
		char DOWN4[] = { 0x44, 0x1F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 19)
	{
		char DOWN4[] = { 0x44, 0x25 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}


#pragma endregion


#pragma region Scroll Menu Host Page 2 Up

void ScrollMenuHost2Up()
{
	if (ScrollHostMenu2 == 0)
	{
		ScrollHostMenu2 = 19; // 19 = max
	}
	else
	{
		ScrollHostMenu2 = ScrollHostMenu2 - 1;
	}

	if (ScrollHostMenu2 == 0)
	{
		char DOWN1[] = { 0x43, 0x4A };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollHostMenu2 == 1)
	{
		char DOWN1[] = { 0x43, 0x63 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollHostMenu2 == 2)
	{
		char DOWN2[] = { 0x43, 0x7A };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollHostMenu2 == 3)
	{
		char DOWN3[] = { 0x43, 0x89 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollHostMenu2 == 4)
	{
		char DOWN4[] = { 0x43, 0x95 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 5)
	{
		char DOWN4[] = { 0x43, 0xA1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 6)
	{
		char DOWN4[] = { 0x43, 0xAE };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 7)
	{
		char DOWN4[] = { 0x43, 0xB9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 8)
	{
		char DOWN4[] = { 0x43, 0xC5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 9)
	{
		char DOWN4[] = { 0x43, 0xD1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 10)
	{
		char DOWN4[] = { 0x43, 0xDD };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 11)
	{
		char DOWN4[] = { 0x43, 0xE9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 12)
	{
		char DOWN4[] = { 0x43, 0xF5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 13)
	{
		char DOWN4[] = { 0x44, 0x01 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 14)
	{
		char DOWN4[] = { 0x44, 0x06 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 15)
	{
		char DOWN4[] = { 0x44, 0x0C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 16)
	{
		char DOWN4[] = { 0x44, 0x12 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 17)
	{
		char DOWN4[] = { 0x44, 0x18 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 18)
	{
		char DOWN4[] = { 0x44, 0x1F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu2 == 19)
	{
		char DOWN4[] = { 0x44, 0x25 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}

#pragma endregion


#pragma region Select Host 2 Options

void SelectMenuHost2Option()
{
	if (ScrollHostMenu2 == 0)
	{
		if (!BlockArrow)
		{
			char MODE[] = { 0x80 };
			write_process(0x000FB55C, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			BlockArrow = true;
		}
		else
		{
			char MODE[] = { 0x40 };
			write_process(0x000FB55C, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			BlockArrow = false;
		}
	}

	if (ScrollHostMenu2 == 1)
	{
		if (!RemoveArrows)
		{
			char MODE[] = { 0x41 };
			write_process(0x000FB644, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			RemoveArrows = true;
		}
		else
		{
			char MODE[] = { 0x40 };
			write_process(0x000FB644, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			RemoveArrows = false;
		}
	}

	if (ScrollHostMenu2 == 2)
	{
		if (!PotionFly)
		{
			char MODE[] = { 0x2D };
			write_process(0x0065FB60, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			PotionFly = true;
		}
		else
		{
			char MODE[] = { 0x3D };
			write_process(0x0065FB60, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			PotionFly = false;
		}
	}

	if (ScrollHostMenu2 == 3)
	{
		if (!PotionNoGravity)
		{
			char MODE[] = { 0x4D };
			write_process(0x0065FB60, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			PotionNoGravity = true;
		}
		else
		{
			char MODE[] = { 0x3D };
			write_process(0x0065FB60, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			PotionNoGravity = false;
		}
	}

	if (ScrollHostMenu2 == 4)
	{
		if (!UnlimitedPickUp)
		{
			char MODE[] = { 0x00 };
			write_process(0x00224B13, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			UnlimitedPickUp = true;
		}
		else
		{
			char MODE[] = { 0x01 };
			write_process(0x00224B13, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			UnlimitedPickUp = false;
		}
	}

	if (ScrollHostMenu2 == 5)
	{
		if (!MaxPickUp)
		{
			char MODE[] = { 0x41 };
			write_process(0x00310AD4, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			MaxPickUp = true;
		}
		else
		{
			char MODE[] = { 0x40 };
			write_process(0x00310AD4, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			MaxPickUp = false;
		}
	}

	if (ScrollHostMenu2 == 6)
	{
		if (!CantGrabItems)
		{
			char MODE[] = { 0x41 };
			write_process(0x00310B0C, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			CantGrabItems = true;
		}
		else
		{
			char MODE[] = { 0x40 };
			write_process(0x00310B0C, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			CantGrabItems = false;
		}
	}

	if (ScrollHostMenu2 == 7)
	{
		if (!GlitchedDeadMobs)
		{
			char MODE[] = { 0x18 };
			write_process(0x00EA89E2, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			GlitchedDeadMobs = true;
		}
		else
		{
			char MODE[] = { 0x08 };
			write_process(0x00EA89E2, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			GlitchedDeadMobs = false;
		}
	}

	if (ScrollHostMenu2 == 8)
	{
		if (!DisableMobs)
		{
			char MODE[] = { 0x40 };
			write_process(0x004619E4, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			DisableMobs = true;
		}
		else
		{
			char MODE[] = { 0x41 };
			write_process(0x004619E4, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			DisableMobs = false;
		}
	}

	if (ScrollHostMenu2 == 9)
	{
		if (!NoFallDamage)
		{
			char MODE[] = { 0x40 };
			write_process(0x003A409C, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			NoFallDamage = true;
		}
		else
		{
			char MODE[] = { 0x41 };
			write_process(0x003A409C, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			NoFallDamage = false;
		}
	}

	if (ScrollHostMenu2 == 10)
	{
		if (!InfinitePlaceBlocks)
		{
			char MODE[] = { 0x00 };
			write_process(0x0010673F, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			InfinitePlaceBlocks = true;
		}
		else
		{
			char MODE[] = { 0x01 };
			write_process(0x0010673F, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			InfinitePlaceBlocks = false;
		}
	}

	if (ScrollHostMenu2 == 11)
	{
		if (!LobbyMessage)
		{
			char MODE[] = { 0x48 };
			write_process(0x003A4A36, &MODE, sizeof(MODE));

			char MOD[] = { 0x48 };
			write_process(0x003A7BB6, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			LobbyMessage = true;
		}
		else
		{
			char MODE[] = { 0x08 };
			write_process(0x003A4A36, &MODE, sizeof(MODE));

			char MOD[] = { 0x08 };
			write_process(0x003A7BB6, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			LobbyMessage = false;
		}
	}

	if (ScrollHostMenu2 == 12)
	{
		if (!BurnInWater)
		{
			char MODE[] = { 0x41 };
			write_process(0x00225EA8, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			BurnInWater = true;
		}
		else
		{
			char MODE[] = { 0x40 };
			write_process(0x00225EA8, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			BurnInWater = false;
		}
	}

	if (ScrollHostMenu2 == 13)
	{
		
	}

	if (ScrollHostMenu2 == 14)
	{
		if (!CreativeSlot)
		{
			char MODE[] = { 0x38, 0x80, 0x00, 0x01 };
			write_process(0x002F0348, &MODE, sizeof(MODE));

			char MOD1[] = { 0x38, 0x80, 0x00, 0x00 };
			write_process(0x002F0398, &MOD1, sizeof(MOD1));
			MOD_ENABLED();
			sleep(200);
			CreativeSlot = true;
		}
		else
		{
			char MODE[] = { 0x38, 0x80, 0x00, 0x00 };
			write_process(0x002F0348, &MODE, sizeof(MODE));

			char MOD1[] = { 0x38, 0x80, 0x00, 0x01 };
			write_process(0x002F0398, &MOD1, sizeof(MOD1));
			MOD_DISABLED();
			sleep(200);
			CreativeSlot = false;
		}
	}

	if (ScrollHostMenu2 == 15)
	{
		if (!SurvivalSlot)
		{
			char MODE[] = { 0x38, 0x80, 0x00, 0x00 };
			write_process(0x002F0368, &MODE, sizeof(MODE));

			char MOD1[] = { 0x38, 0x80, 0x00, 0x01 };
			write_process(0x002F0378, &MOD1, sizeof(MOD1));
			MOD_ENABLED();
			sleep(200);
			SurvivalSlot = true;
		}
		else
		{
			char MODE[] = { 0x38, 0x80, 0x00, 0x01 };
			write_process(0x002F0368, &MODE, sizeof(MODE));

			char MOD1[] = { 0x38, 0x80, 0x00, 0x00 };
			write_process(0x002F0378, &MOD1, sizeof(MOD1));
			MOD_DISABLED();
			sleep(200);
			SurvivalSlot = false;
		}
	}

	if (ScrollHostMenu2 == 16)
	{
		if (!KillMobsSpawned)
		{
			char MODE[] = { 0x48 };
			write_process(0x005BF34E, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			KillMobsSpawned = true;
		}
		else
		{
			char MODE[] = { 0x08 };
			write_process(0x005BF34E, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			KillMobsSpawned = false;
		}
	}

	if (ScrollHostMenu2 == 17)
	{
		if (!StopGravityBlock)
		{
			char MODE[] = { 0xFF };
			write_process(0x00246A2C, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			StopGravityBlock = true;
		}
		else
		{
			char MODE[] = { 0x3F };
			write_process(0x00246A2C, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			StopGravityBlock = false;
		}
	}

	if (ScrollHostMenu2 == 18)
	{
		if (!InfiniteFood)
		{
			char MODE[] = { 0x00 };
			write_process(0x0043E9F7, &MODE, sizeof(MODE));
			MOD_ENABLED();
			sleep(200);
			InfiniteFood = true;
		}
		else
		{
			char MODE[] = { 0x01 };
			write_process(0x0043E9F7, &MODE, sizeof(MODE));
			MOD_DISABLED();
			sleep(200);
			InfiniteFood = false;
		}
	}

	if (ScrollHostMenu2 == 19)
	{
		CloseHostMenu2();
		sleep(50);
		OpenHostPage3();
	}
}

#pragma endregion


#pragma endregion



#pragma region HOST MENU


#pragma region Open HOST Menu

void OpenHostPage()
{
	if (LockOptions == 0)
	{
		char LOCK[] = { 0x01 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}
	else
	{
		char LOCK[] = { 0x00 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x47, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x48, 0x00, 0x65, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x68, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x44, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4B, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x79, 0x00, 0x70, 0x00, 0x61, 0x00, 0x73, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4B, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4B, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x72, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x44, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x20, 0x00, 0x48, 0x00, 0x69, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x4B, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x62, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x20, 0x00, 0x4B, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x62, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4B, 0x00, 0x42, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x53, 0x00, 0x61, 0x00, 0x76, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x78, 0x00, 0x20, 0x00, 0x58, 0x00, 0x50, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x58, 0x00, 0x50, 0x00, 0x0A, 0x00, 0x57, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x72, 0x00, 0x69, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x61, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x72, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x20, 0x00, 0x44, 0x00, 0x69, 0x00, 0x72, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x10, 0x00, 0x00, 0xC2, 0xB0, 0x00, 0x00, 0x43, 0xCF };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC3, 0x70, 0x00, 0x00, 0xC1, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x42, 0xC0, 0x00, 0x00, 0x43, 0x45, 0x00 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));

	char SCROLLBARSELECT[] = { 0x43, 0x4A };
	write_process(Scrollbar_Toggle, &SCROLLBARSELECT, sizeof(SCROLLBARSELECT));

	HostMenu = true;

	ScrollHostMenu = 0;

	movename = true; //ENABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Close Host Menu

void CloseHostMenu()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x43, 0xED, 0x00, 0x00, 0x43, 0x77 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));


	HostMenu = false;

	ScrollHostMenu = 0;

	movename = false; //FALSE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Scroll Menu Host Page Down

void ScrollMenuHostDown()
{
	if (ScrollHostMenu == 19)//19 = max
	{
		ScrollHostMenu = 0;
	}
	else
	{
		ScrollHostMenu = ScrollHostMenu + 1;
	}

	if (ScrollHostMenu == 0)
	{
		char DOWN1[] = { 0x43, 0x4A };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollHostMenu == 1)
	{
		char DOWN1[] = { 0x43, 0x63 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollHostMenu == 2)
	{
		char DOWN2[] = { 0x43, 0x7A };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollHostMenu == 3)
	{
		char DOWN3[] = { 0x43, 0x89 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollHostMenu == 4)
	{
		char DOWN4[] = { 0x43, 0x95 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 5)
	{
		char DOWN4[] = { 0x43, 0xA1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 6)
	{
		char DOWN4[] = { 0x43, 0xAE };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 7)
	{
		char DOWN4[] = { 0x43, 0xB9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 8)
	{
		char DOWN4[] = { 0x43, 0xC5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 9)
	{
		char DOWN4[] = { 0x43, 0xD1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 10)
	{
		char DOWN4[] = { 0x43, 0xDD };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 11)
	{
		char DOWN4[] = { 0x43, 0xE9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 12)
	{
		char DOWN4[] = { 0x43, 0xF5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 13)
	{
		char DOWN4[] = { 0x44, 0x01 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 14)
	{
		char DOWN4[] = { 0x44, 0x06 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 15)
	{
		char DOWN4[] = { 0x44, 0x0C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 16)
	{
		char DOWN4[] = { 0x44, 0x12 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 17)
	{
		char DOWN4[] = { 0x44, 0x18 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 18)
	{
		char DOWN4[] = { 0x44, 0x1F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 19)
	{
		char DOWN4[] = { 0x44, 0x25 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}


#pragma endregion


#pragma region Scroll Menu Host Page Up

void ScrollMenuHostUp()
{
	if (ScrollHostMenu == 0)
	{
		ScrollHostMenu = 19; // 19 = max
	}
	else
	{
		ScrollHostMenu = ScrollHostMenu - 1;
	}

	if (ScrollHostMenu == 0)
	{
		char DOWN1[] = { 0x43, 0x4A };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollHostMenu == 1)
	{
		char DOWN1[] = { 0x43, 0x63 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollHostMenu == 2)
	{
		char DOWN2[] = { 0x43, 0x7A };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollHostMenu == 3)
	{
		char DOWN3[] = { 0x43, 0x89 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollHostMenu == 4)
	{
		char DOWN4[] = { 0x43, 0x95 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 5)
	{
		char DOWN4[] = { 0x43, 0xA1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 6)
	{
		char DOWN4[] = { 0x43, 0xAE };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 7)
	{
		char DOWN4[] = { 0x43, 0xB9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 8)
	{
		char DOWN4[] = { 0x43, 0xC5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 9)
	{
		char DOWN4[] = { 0x43, 0xD1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 10)
	{
		char DOWN4[] = { 0x43, 0xDD };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 11)
	{
		char DOWN4[] = { 0x43, 0xE9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 12)
	{
		char DOWN4[] = { 0x43, 0xF5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 13)
	{
		char DOWN4[] = { 0x44, 0x01 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 14)
	{
		char DOWN4[] = { 0x44, 0x06 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 15)
	{
		char DOWN4[] = { 0x44, 0x0C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 16)
	{
		char DOWN4[] = { 0x44, 0x12 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 17)
	{
		char DOWN4[] = { 0x44, 0x18 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 18)
	{
		char DOWN4[] = { 0x44, 0x1F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollHostMenu == 19)
	{
		char DOWN4[] = { 0x44, 0x25 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}

#pragma endregion


#pragma region Select Host Options

void SelectMenuHostOption()
{
	if (ScrollHostMenu == 0)
	{
		if (!GodMode)
		{
			char MODS[] = { 0x80 };
			write_process(0x004B2021, &MODS, sizeof(MODS));
			MOD_ENABLED();
			sleep(200);
			GodMode = true;
		}
		else
		{
			char MODS[] = { 0x20 };
			write_process(0x004B2021, &MODS, sizeof(MODS));
			MOD_DISABLED();
			sleep(200);
			GodMode = false;
		}
	}

	if (ScrollHostMenu == 1)
	{
		if (!RegenHealth)
		{
			char MODS[] = { 0x68, 0x63, 0x00, 0x00 };
			write_process(0x002ADCE8, &MODS, sizeof(MODS));
			MOD_ENABLED();
			sleep(200);
			RegenHealth = true;
		}
		else
		{
			char MODS[] = { 0x68, 0x63, 0x00, 0x01 };
			write_process(0x002ADCE8, &MODS, sizeof(MODS));
			MOD_DISABLED();
			sleep(200);
			RegenHealth = false;
		}
	}

	if (ScrollHostMenu == 2)
	{
		if (!InstantDamage)
		{
			char MODS[] = { 0x40, 0x80 };
			write_process(0x003A3FF0, &MODS, sizeof(MODS));
			MOD_ENABLED();
			sleep(200);
			InstantDamage = true;
		}
		else
		{
			char MODS[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MODS, sizeof(MODS));
			MOD_DISABLED();
			sleep(200);
			InstantDamage = false;
		}
	}

	if (ScrollHostMenu == 3)
	{
		if (!InstantKill)
		{
			char MOD[] = { 0xFF, 0x40, 0x28, 0x90 };
			write_process(0x003A4064, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			InstantKill = true;
		}
		else
		{
			char MOD[] = { 0xFF, 0x40, 0x08, 0x90 };
			write_process(0x003A4064, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			InstantKill = false;
		}
	}

	if (ScrollHostMenu == 4)
	{
		if (!BypassKill)
		{
			char MOD[] = { 0x40 };
			write_process(0x00226168, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			BypassKill = true;
		}
		else
		{
			char MOD[] = { 0x41 };
			write_process(0x00226168, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			BypassKill = false;
		}
	}

	if (ScrollHostMenu == 5)
	{
		if (!InstantKillFire)
		{
			char MOD[] = { 0x4F, 0x80 };
			write_process(0x002258F8, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			InstantKillFire = true;
		}
		else
		{
			char MOD[] = { 0x3F, 0x80 };
			write_process(0x002258F8, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			InstantKillFire = false;
		}
	}

	if (ScrollHostMenu == 6)
	{
		if (!NoDamgeHit)
		{
			char MOD[] = { 0xFF, 0xFF };
			write_process(0x003A3FF0, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			NoDamgeHit = true;
		}
		else
		{
			char MOD[] = { 0x3F, 0x00 };
			write_process(0x003A3FF0, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			NoDamgeHit = false;
		}
	}

	if (ScrollHostMenu == 7)
	{
		if (!Knockback)
		{
			char MOD[] = { 0x40, 0x80 };
			write_process(0x003A4018, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			Knockback = true;
		}
		else
		{
			char MOD[] = { 0x3E, 0xCC };
			write_process(0x003A4018, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			Knockback = false;
		}
	}

	if (ScrollHostMenu == 8)
	{
		if (!AntiKB)
		{
			char MOD[] = { 0x00, 0x00 };
			write_process(0x003A4018, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			AntiKB = true;
		}
		else
		{
			char MOD[] = { 0x3E, 0xCC };
			write_process(0x003A4018, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			AntiKB = false;
		}
	}

	if (ScrollHostMenu == 9)
	{
		if (!ReverseKB)
		{
			char MOD[] = { 0xBF, 0x80 };
			write_process(0x003A4018, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			ReverseKB = true;
		}
		else
		{
			char MOD[] = { 0x3E, 0xCC };
			write_process(0x003A4018, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			ReverseKB = false;
		}
	}

	if (ScrollHostMenu == 10)
	{
		if (!AutoSave)
		{
			char MOD[] = { 0x40 };
			write_process(0x00AEEE54, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			AutoSave = true;
		}
		else
		{
			char MOD[] = { 0x41 };
			write_process(0x00AEEE54, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			AutoSave = false;
		}
	}

	if (ScrollHostMenu == 11)
	{
		if (!GunItems)
		{
			char MOD[] = { 0x3F, 0xFF };
			write_process(0x014C6880, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			GunItems = true;
		}
		else
		{
			char MOD[] = { 0x3F, 0x80 };
			write_process(0x014C6880, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			GunItems = false;
		}
	}

	if (ScrollHostMenu == 12)
	{
		if (!MaxXP)
		{
			char MOD[] = { 0x7C, 0xA5, 0x10, 0x14 };
			write_process(0x004B0094, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			MaxXP = true;
		}
		else
		{
			char MOD[] = { 0x7C, 0xA5, 0x20, 0x14 };
			write_process(0x004B0094, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			MaxXP = false;
		}
	}

	if (ScrollHostMenu == 13)
	{
		if (!RemoveXP)
		{
			char MOD[] = { 0x41 };
			write_process(0x004B00AC, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			RemoveXP = true;
		}
		else
		{
			char MOD[] = { 0x40 };
			write_process(0x004B00AC, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			RemoveXP = false;
		}
	}

	if (ScrollHostMenu == 14)
	{
		if (!WaterJump)
		{
			char MOD[] = { 0x3F, 0xF9, 0x99, 0x99 };
			write_process(0x003ABD68, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			WaterJump = true;
		}
		else
		{
			char MOD[] = { 0x3F, 0xE9, 0x99, 0x99 };
			write_process(0x003ABD68, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			WaterJump = false;
		}
	}

	if (ScrollHostMenu == 15)
	{
		if (!DriftBoat)
		{
			char MOD[] = { 0x41 };
			write_process(0x002278E4, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			DriftBoat = true;
		}
		else
		{
			char MOD[] = { 0x40 };
			write_process(0x002278E4, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			DriftBoat = false;
		}
	}

	if (ScrollHostMenu == 16)
	{
		if (!FastBow)
		{
			char MOD[] = { 0xE0, 0x18, 0x18 };
			write_process(0x000FB4C5, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			FastBow = true;
		}
		else
		{
			char MOD[] = { 0xE0, 0x08, 0x18 };
			write_process(0x000FB4C5, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			FastBow = false;
		}
	}

	if (ScrollHostMenu == 17)
	{
		if (!StopBow)
		{
			char MOD[] = { 0xE0, 0x58 };
			write_process(0x000FB4C5, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			StopBow = true;
		}
		else
		{
			char MOD[] = { 0xE0, 0x08 };
			write_process(0x000FB4C5, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			StopBow = false;
		}
	}

	if (ScrollHostMenu == 18)
	{
		if (!ArrowsDirection)
		{
			char MOD[] = { 0x45 };
			write_process(0x000FB55C, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			ArrowsDirection = true;
		}
		else
		{
			char MOD[] = { 0x40 };
			write_process(0x000FB55C, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			ArrowsDirection = false;
		}
	}

	if (ScrollHostMenu == 19)
	{
		CloseHostMenu();
		sleep(50);
		OpenHostPage2();
	}
}

#pragma endregion


#pragma endregion



#pragma region THEMES 2 MENU


#pragma region Open Theme Menu

void OpenTheme2Page()
{
	if (LockOptions == 0)
	{
		char LOCK[] = { 0x01 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}
	else
	{
		char LOCK[] = { 0x00 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x73, 0x00, 0x65, 0x00, 0x74, 0x00, 0x20, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x62, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x53, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x62, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x67, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x62, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x50, 0x00, 0x00, 0xC2, 0xB0, 0x00, 0x00, 0xC1, 0x00 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC3, 0x70, 0x00, 0x00, 0xC3, 0x40 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x42, 0xBB, 0x00, 0x00, 0x43, 0x45, 0x00 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));

	char SCROLLBARSELECT[] = { 0x43, 0x4D };
	write_process(Scrollbar_Toggle, &SCROLLBARSELECT, sizeof(SCROLLBARSELECT));


	ThemesMenu2 = true;

	ScrollThemeMenu2 = 0;

	movename = true; //ENABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Close Themes Menu

void CloseThemes2Menu()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x43, 0xED, 0x00, 0x00, 0x43, 0x77 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));


	ThemesMenu2 = false;

	ScrollThemeMenu2 = 0;

	movename = false; //DISABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Scroll Menu Themes 2 Down

void ScrollMenuThemes2Down()
{
	if (ScrollThemeMenu2 == 4)//4 = max
	{
		ScrollThemeMenu2 = 0;
	}
	else
	{
		ScrollThemeMenu2 = ScrollThemeMenu2 + 1;
	}

	if (ScrollThemeMenu2 == 0)
	{
		char DOWN1[] = { 0x43, 0x4D };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollThemeMenu2 == 1)
	{
		char DOWN1[] = { 0x43, 0x65 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollThemeMenu2 == 2)
	{
		char DOWN2[] = { 0x43, 0x7D };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollThemeMenu2 == 3)
	{
		char DOWN3[] = { 0x43, 0x8B };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollThemeMenu2 == 4)
	{
		char DOWN4[] = { 0x43, 0x98 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}


#pragma endregion


#pragma region Scroll Menu Themes 2 Up

void ScrollMenuThemes2Up()
{
	if (ScrollThemeMenu2 == 0)
	{
		ScrollThemeMenu2 = 4;//4 = max
	}
	else
	{
		ScrollThemeMenu2 = ScrollThemeMenu2 - 1;
	}

	if (ScrollThemeMenu2 == 0)
	{
		char DOWN1[] = { 0x43, 0x4D };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollThemeMenu2 == 1)
	{
		char DOWN1[] = { 0x43, 0x65 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollThemeMenu2 == 2)
	{
		char DOWN2[] = { 0x43, 0x7D };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollThemeMenu2 == 3)
	{
		char DOWN3[] = { 0x43, 0x8B };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollThemeMenu2 == 4)
	{
		char DOWN4[] = { 0x43, 0x98 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}

#pragma endregion


#pragma region Select Themes 2 Options

void SelectMenuThemes2Option()
{
	if (ScrollThemeMenu2 == 0)
	{
		char COLORS_TEXTS[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x4F, 0x80, 0x00, 0x00 };
		write_process(Split_Color_Text, &COLORS_TEXTS, sizeof(COLORS_TEXTS));
	}

	if (ScrollThemeMenu2 == 1)
	{
		if (!RGBScroll)
		{
			sleep(200);
			RGBScroll = true;
		}
		else
		{
			sleep(200);
			RGBScroll = false;
		}
	}

	if (ScrollThemeMenu2 == 2)
	{
		if (!RGBTheme)
		{
			sleep(200);
			RGBTheme = true;
		}
		else
		{
			sleep(200);
			RGBTheme = false;
		}
	}

	if (ScrollThemeMenu2 == 3)
	{
		if (!RGBText)
		{
			sleep(200);
			RGBText = true;
		}
		else
		{
			sleep(200);
			RGBText = false;
		}
	}

	if (ScrollThemeMenu2 == 4)
	{
		if (!LockOptions)
		{
			sleep(200);
			LockOptions = true;
		}
		else
		{
			sleep(200);
			LockOptions = false;
		}
	}
}

#pragma endregion


#pragma endregion



#pragma region THEMES MENU


#pragma region Open Theme Menu

void OpenThemePage()
{
	if (LockOptions == 0)
	{
		char LOCK[] = { 0x01 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}
	else
	{
		char LOCK[] = { 0x00 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x43, 0x00, 0x79, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x50, 0x00, 0x75, 0x00, 0x72, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x59, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x67, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x67, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x67, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x67, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x43, 0x00, 0x79, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x67, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x50, 0x00, 0x75, 0x00, 0x72, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x67, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x59, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x43, 0x00, 0x79, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x50, 0x00, 0x75, 0x00, 0x72, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x59, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x73, 0x00, 0x65, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x73, 0x00, 0x65, 0x00, 0x74, 0x00, 0x20, 0x00, 0x42, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x67, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x15, 0x00, 0x00, 0xC2, 0xB0, 0x00, 0x00, 0x43, 0xD8 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC3, 0x70, 0x00, 0x00, 0xC1, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x42, 0xC0, 0x00, 0x00, 0x43, 0x45, 0x00 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));

	char SCROLLBARSELECT[] = { 0x43, 0x3E };
	write_process(Scrollbar_Toggle, &SCROLLBARSELECT, sizeof(SCROLLBARSELECT));


	ThemesMenu = true;

	ScrollThemeMenu = 0;

	movename = true; //ENABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Close Themes Menu

void CloseThemesMenu()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x43, 0xED, 0x00, 0x00, 0x43, 0x77 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));


	ThemesMenu = false;

	ScrollThemeMenu = 0;

	movename = false; //DISABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Scroll Menu Themes Down

void ScrollMenuThemesDown()
{
	if (ScrollThemeMenu == 20)//4 = max
	{
		ScrollThemeMenu = 0;
	}
	else
	{
		ScrollThemeMenu = ScrollThemeMenu + 1;
	}

	if (ScrollThemeMenu == 0)
	{
		char DOWN1[] = { 0x43, 0x3E };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollThemeMenu == 1)
	{
		char DOWN1[] = { 0x43, 0x57 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollThemeMenu == 2)
	{
		char DOWN2[] = { 0x43, 0x6F };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollThemeMenu == 3)
	{
		char DOWN3[] = { 0x43, 0x83 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollThemeMenu == 4)
	{
		char DOWN4[] = { 0x43, 0x8F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 5)
	{
		char DOWN4[] = { 0x43, 0x9B };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 6)
	{
		char DOWN4[] = { 0x43, 0xA7 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 7)
	{
		char DOWN4[] = { 0x43, 0xB3 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 8)
	{
		char DOWN4[] = { 0x43, 0xBF };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 9)
	{
		char DOWN4[] = { 0x43, 0xCB };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 10)
	{
		char DOWN4[] = { 0x43, 0xD7 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 11)
	{
		char DOWN4[] = { 0x43, 0xE3 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 12)
	{
		char DOWN4[] = { 0x43, 0xEF };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 13)
	{
		char DOWN4[] = { 0x43, 0xFB };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 14)
	{
		char DOWN4[] = { 0x44, 0x04 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 15)
	{
		char DOWN4[] = { 0x44, 0x0A };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 16)
	{
		char DOWN4[] = { 0x44, 0x10 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 17)
	{
		char DOWN4[] = { 0x44, 0x16 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 18)
	{
		char DOWN4[] = { 0x44, 0x1C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 19)
	{
		char DOWN4[] = { 0x44, 0x22 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 20)
	{
		char DOWN4[] = { 0x44, 0x28 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}


#pragma endregion


#pragma region Scroll Menu Themes Up

void ScrollMenuThemesUp()
{
	if (ScrollThemeMenu == 0)
	{
		ScrollThemeMenu = 20;//4 = max
	}
	else
	{
		ScrollThemeMenu = ScrollThemeMenu - 1;
	}

	if (ScrollThemeMenu == 0)
	{
		char DOWN1[] = { 0x43, 0x3E };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollThemeMenu == 1)
	{
		char DOWN1[] = { 0x43, 0x57 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollThemeMenu == 2)
	{
		char DOWN2[] = { 0x43, 0x6F };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollThemeMenu == 3)
	{
		char DOWN3[] = { 0x43, 0x83 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollThemeMenu == 4)
	{
		char DOWN4[] = { 0x43, 0x8F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 5)
	{
		char DOWN4[] = { 0x43, 0x9B };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 6)
	{
		char DOWN4[] = { 0x43, 0xA7 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 7)
	{
		char DOWN4[] = { 0x43, 0xB3 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 8)
	{
		char DOWN4[] = { 0x43, 0xBF };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 9)
	{
		char DOWN4[] = { 0x43, 0xCB };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 10)
	{
		char DOWN4[] = { 0x43, 0xD7 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 11)
	{
		char DOWN4[] = { 0x43, 0xE3 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 12)
	{
		char DOWN4[] = { 0x43, 0xEF };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 13)
	{
		char DOWN4[] = { 0x43, 0xFB };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 14)
	{
		char DOWN4[] = { 0x44, 0x04 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 15)
	{
		char DOWN4[] = { 0x44, 0x0A };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 16)
	{
		char DOWN4[] = { 0x44, 0x10 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 17)
	{
		char DOWN4[] = { 0x44, 0x16 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 18)
	{
		char DOWN4[] = { 0x44, 0x1C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 19)
	{
		char DOWN4[] = { 0x44, 0x22 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollThemeMenu == 20)
	{
		char DOWN4[] = { 0x44, 0x28 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}

#pragma endregion


#pragma region Select Themes Options

void SelectMenuThemesOption()
{
	if (ScrollThemeMenu == 0) //<== SCROLL COLORS
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x00 };
		write_process(Scrollbar_Colors, &DEFAULT, sizeof(DEFAULT));

		char SCROLLBARCOLOR[] = { 0x4F, 0x80 };
		write_process(Scrollbar_Colors, &SCROLLBARCOLOR, sizeof(SCROLLBARCOLOR));
	}

	if (ScrollThemeMenu == 1)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x00 };
		write_process(Scrollbar_Colors, &DEFAULT, sizeof(DEFAULT));

		char SCROLLBARCOLOR[] = { 0x4F, 0x80 };
		write_process(0x31E74F54, &SCROLLBARCOLOR, sizeof(SCROLLBARCOLOR));
	}

	if (ScrollThemeMenu == 2)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x00 };
		write_process(Scrollbar_Colors, &DEFAULT, sizeof(DEFAULT));

		char SCROLLBARCOLOR[] = { 0x4F, 0x80 };
		write_process(0x31E74F58, &SCROLLBARCOLOR, sizeof(SCROLLBARCOLOR));
	}

	if (ScrollThemeMenu == 3)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x00 };
		write_process(Scrollbar_Colors, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x4F, 0x80 };
		write_process(0x31E74F54, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x4F, 0x80 };
		write_process(0x31E74F58, &COLORS_BG1, sizeof(COLORS_BG1));
	}

	if (ScrollThemeMenu == 4)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x00 };
		write_process(Scrollbar_Colors, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x3F, 0xFF };
		write_process(0x31E74F50, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x4F, 0x80 };
		write_process(0x31E74F58, &COLORS_BG1, sizeof(COLORS_BG1));
	}

	if (ScrollThemeMenu == 5)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x00 };
		write_process(Scrollbar_Colors, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x4F, 0x80 };
		write_process(0x31E74F50, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x4F, 0xFF };
		write_process(0x31E74F54, &COLORS_BG1, sizeof(COLORS_BG1));
	}

	if (ScrollThemeMenu == 6) //<== BG COLORS
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0xC0 };
		write_process(Split_BG_Colors, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x4F, 0x80 };
		write_process(0x31E71F60, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x0F };
		write_process(0x31E71F64, &COLORS_BG1, sizeof(COLORS_BG1));

		char COLORS_BG2[] = { 0x0F };
		write_process(0x31E71F68, &COLORS_BG2, sizeof(COLORS_BG2));
	}

	if (ScrollThemeMenu == 7)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0xC0 };
		write_process(Split_BG_Colors, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x0F, 0x80 };
		write_process(0x31E71F60, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x4F };
		write_process(0x31E71F64, &COLORS_BG1, sizeof(COLORS_BG1));

		char COLORS_BG2[] = { 0x0F };
		write_process(0x31E71F68, &COLORS_BG2, sizeof(COLORS_BG2));
	}

	if (ScrollThemeMenu == 8)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0xC0 };
		write_process(Split_BG_Colors, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x0F, 0x80 };
		write_process(0x31E71F60, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x4F };
		write_process(0x31E71F68, &COLORS_BG1, sizeof(COLORS_BG1));

		char COLORS_BG2[] = { 0x0F };
		write_process(0x31E71F64, &COLORS_BG2, sizeof(COLORS_BG2));
	}

	if (ScrollThemeMenu == 9)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0xC0 };
		write_process(Split_BG_Colors, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x0F, 0x80 };
		write_process(0x31E71F60, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x4F };
		write_process(0x31E71F64, &COLORS_BG1, sizeof(COLORS_BG1));

		char COLORS_BG2[] = { 0x4F };
		write_process(0x31E71F68, &COLORS_BG2, sizeof(COLORS_BG2));
	}

	if (ScrollThemeMenu == 10)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0xC0 };
		write_process(Split_BG_Colors, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x3F, 0x80 };
		write_process(0x31E71F60, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x0F };
		write_process(0x31E71F64, &COLORS_BG1, sizeof(COLORS_BG1));

		char COLORS_BG2[] = { 0x4F };
		write_process(0x31E71F68, &COLORS_BG2, sizeof(COLORS_BG2));
	}

	if (ScrollThemeMenu == 11)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0xC0 };
		write_process(Split_BG_Colors, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x4F, 0x80 };
		write_process(0x31E71F60, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x4F };
		write_process(0x31E71F64, &COLORS_BG1, sizeof(COLORS_BG1));

		char COLORS_BG2[] = { 0x0F };
		write_process(0x31E71F68, &COLORS_BG2, sizeof(COLORS_BG2));
	}

	if (ScrollThemeMenu == 12) //<== TEXTS COLORS
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
		write_process(Split_Color_Text, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x4F, 0x80 };
		write_process(0x31E72950, &COLORS_BG, sizeof(COLORS_BG));
	}

	if (ScrollThemeMenu == 13)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
		write_process(Split_Color_Text, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x4F, 0x80 };
		write_process(0x31E72954, &COLORS_BG, sizeof(COLORS_BG));
	}

	if (ScrollThemeMenu == 14)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
		write_process(Split_Color_Text, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x4F, 0x80 };
		write_process(0x31E72958, &COLORS_BG, sizeof(COLORS_BG));
	}

	if (ScrollThemeMenu == 15)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
		write_process(Split_Color_Text, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x4F, 0x80 };
		write_process(0x31E72954, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x4F, 0x80 };
		write_process(0x31E72958, &COLORS_BG1, sizeof(COLORS_BG1));
	}

	if (ScrollThemeMenu == 16)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
		write_process(Split_Color_Text, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x3F, 0xFF };
		write_process(0x31E72950, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x4F, 0x80 };
		write_process(0x31E72958, &COLORS_BG1, sizeof(COLORS_BG1));
	}

	if (ScrollThemeMenu == 17)
	{
		char DEFAULT[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
		write_process(Split_Color_Text, &DEFAULT, sizeof(DEFAULT));

		char COLORS_BG[] = { 0x4F };
		write_process(0x31E72950, &COLORS_BG, sizeof(COLORS_BG));

		char COLORS_BG1[] = { 0x4F, 0x80 };
		write_process(0x31E72954, &COLORS_BG1, sizeof(COLORS_BG1));
	}

	if (ScrollThemeMenu == 18)
	{
		char SCROLLBARCOLOR[] = { 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
		write_process(Scrollbar_Colors, &SCROLLBARCOLOR, sizeof(SCROLLBARCOLOR));
	}

	if (ScrollThemeMenu == 19)
	{
		char COLORS_BG[] = { 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x3F, 0xC0, 0x00 };
		write_process(Split_BG_Colors, &COLORS_BG, sizeof(COLORS_BG));
	}

	if (ScrollThemeMenu == 20)
	{
		CloseThemesMenu();
		sleep(50);
		OpenTheme2Page();
	}


}

#pragma endregion


#pragma endregion



#pragma region Credits MENU


#pragma region Open Credits Menu

void OpenCreditsPage()
{
	if (LockOptions == 0)
	{
		char LOCK[] = { 0x01 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}
	else
	{
		char LOCK[] = { 0x00 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x2D, 0x00, 0x2D, 0x00, 0x2D, 0x00, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x2D, 0x00, 0x2D, 0x00, 0x2D, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x73, 0x00, 0x61, 0x00, 0x6B, 0x00, 0x69, 0x00, 0x20, 0x00, 0x44, 0x00, 0x65, 0x00, 0x76, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x2D, 0x00, 0x2D, 0x00, 0x2D, 0x00, 0x48, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x2D, 0x00, 0x2D, 0x00, 0x2D, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x61, 0x00, 0x72, 0x00, 0x75, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x68, 0x00, 0x79, 0x00, 0x4B, 0x00, 0x69, 0x00, 0x74, 0x00, 0x74, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x59, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x20, 0x00, 0x41, 0x00, 0x72, 0x00, 0x65, 0x00, 0x20, 0x00, 0x42, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x21, 0x00, 0x0A, 0x00, 0x68, 0x00, 0x74, 0x00, 0x74, 0x00, 0x70, 0x00, 0x3A, 0x00, 0x2F, 0x00, 0x2F, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x63, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x70, 0x00, 0x77, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xA0, 0x00, 0x00, 0xC2, 0xB0, 0x00, 0x00, 0x42, 0xFF };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC3, 0x70, 0x00, 0x00, 0xC3, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x42, 0xBD, 0x00, 0x00, 0x46, 0x45, 0x00 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));

	char SCROLLBARSELECT[] = { 0x46, 0x4A };
	write_process(Scrollbar_Toggle, &SCROLLBARSELECT, sizeof(SCROLLBARSELECT));

	CreditsMenu = true;

	movename = true; //ENABLED NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Close Credits Menu

void CloseCreditsMenu()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x43, 0xED, 0x00, 0x00, 0x43, 0x77 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));


	CreditsMenu = false;

	movename = false; //DISABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion



#pragma endregion



#pragma region SELF 5 MENU


#pragma region Open Self Menu 5

void OpenSelfPage5()
{
	if (LockOptions == 0)
	{
		char LOCK[] = { 0x01 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}
	else
	{
		char LOCK[] = { 0x00 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x65, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x63, 0x00, 0x69, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x45, 0x00, 0x67, 0x00, 0x67, 0x00, 0x73, 0x00, 0x20, 0x00, 0x46, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x7A, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x65, 0x00, 0x74, 0x00, 0x20, 0x00, 0x36, 0x00, 0x34, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x56, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x10, 0x00, 0x00, 0xC2, 0xB0, 0x00, 0x00, 0x43, 0xCF };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC3, 0x70, 0x00, 0x00, 0xC1, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x42, 0xB6, 0x00, 0x00, 0x43, 0x45, 0x00 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));

	char SCROLLBARSELECT[] = { 0x43, 0x4A };
	write_process(Scrollbar_Toggle, &SCROLLBARSELECT, sizeof(SCROLLBARSELECT));

	SelfMenu5 = true;

	ScrollSelfMenu5 = 0;

	movename = true; //ENABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Close Self Menu 5

void CloseSelfMenu5()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x43, 0xED, 0x00, 0x00, 0x43, 0x77 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));


	SelfMenu5 = false;

	ScrollSelfMenu5 = 0;

	movename = false; //FALSE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Scroll Menu Self Page 5 Down

void ScrollMenuSelf5Down()
{
	if (ScrollSelfMenu5 == 19)//19 = max
	{
		ScrollSelfMenu5 = 0;
	}
	else
	{
		ScrollSelfMenu5 = ScrollSelfMenu5 + 1;
	}

	if (ScrollSelfMenu5 == 0)
	{
		char DOWN1[] = { 0x43, 0x4A };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu5 == 1)
	{
		char DOWN1[] = { 0x43, 0x63 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu5 == 2)
	{
		char DOWN2[] = { 0x43, 0x7A };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollSelfMenu5 == 3)
	{
		char DOWN3[] = { 0x43, 0x89 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollSelfMenu5 == 4)
	{
		char DOWN4[] = { 0x43, 0x95 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 5)
	{
		char DOWN4[] = { 0x43, 0xA1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 6)
	{
		char DOWN4[] = { 0x43, 0xAE };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 7)
	{
		char DOWN4[] = { 0x43, 0xB9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 8)
	{
		char DOWN4[] = { 0x43, 0xC5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 9)
	{
		char DOWN4[] = { 0x43, 0xD1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 10)
	{
		char DOWN4[] = { 0x43, 0xDD };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 11)
	{
		char DOWN4[] = { 0x43, 0xE9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 12)
	{
		char DOWN4[] = { 0x43, 0xF5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 13)
	{
		char DOWN4[] = { 0x44, 0x01 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 14)
	{
		char DOWN4[] = { 0x44, 0x06 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 15)
	{
		char DOWN4[] = { 0x44, 0x0C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 16)
	{
		char DOWN4[] = { 0x44, 0x12 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 17)
	{
		char DOWN4[] = { 0x44, 0x18 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 18)
	{
		char DOWN4[] = { 0x44, 0x1F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 19)
	{
		char DOWN4[] = { 0x44, 0x25 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}


#pragma endregion


#pragma region Scroll Menu Self Page 5 Up

void ScrollMenuSelf5Up()
{
	if (ScrollSelfMenu5 == 0)
	{
		ScrollSelfMenu5 = 19; // 19 = max
	}
	else
	{
		ScrollSelfMenu5 = ScrollSelfMenu5 - 1;
	}

	if (ScrollSelfMenu5 == 0)
	{
		char DOWN1[] = { 0x43, 0x4A };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu5 == 1)
	{
		char DOWN1[] = { 0x43, 0x63 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu5 == 2)
	{
		char DOWN2[] = { 0x43, 0x7A };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollSelfMenu5 == 3)
	{
		char DOWN3[] = { 0x43, 0x89 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollSelfMenu5 == 4)
	{
		char DOWN4[] = { 0x43, 0x95 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 5)
	{
		char DOWN4[] = { 0x43, 0xA1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 6)
	{
		char DOWN4[] = { 0x43, 0xAE };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 7)
	{
		char DOWN4[] = { 0x43, 0xB9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 8)
	{
		char DOWN4[] = { 0x43, 0xC5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 9)
	{
		char DOWN4[] = { 0x43, 0xD1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 10)
	{
		char DOWN4[] = { 0x43, 0xDD };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 11)
	{
		char DOWN4[] = { 0x43, 0xE9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 12)
	{
		char DOWN4[] = { 0x43, 0xF5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 13)
	{
		char DOWN4[] = { 0x44, 0x01 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 14)
	{
		char DOWN4[] = { 0x44, 0x06 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 15)
	{
		char DOWN4[] = { 0x44, 0x0C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 16)
	{
		char DOWN4[] = { 0x44, 0x12 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 17)
	{
		char DOWN4[] = { 0x44, 0x18 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 18)
	{
		char DOWN4[] = { 0x44, 0x1F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu5 == 19)
	{
		char DOWN4[] = { 0x44, 0x25 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}

#pragma endregion


#pragma region Select Self 5 Options


//select options self 5
void SelectMenuSelf5Option()
{
	if (ScrollSelfMenu5 == 0)
	{
	
	}

	if (ScrollSelfMenu5 == 1)
	{
		
	}

	if (ScrollSelfMenu5 == 2)
	{
		
	}

	if (ScrollSelfMenu5 == 3)
	{
		
	}

	if (ScrollSelfMenu5 == 4)
	{
		
	}

	if (ScrollSelfMenu5 == 5)
	{
		
	}

	if (ScrollSelfMenu5 == 6)
	{
		
	}

	if (ScrollSelfMenu5 == 7)
	{

	}

	if (ScrollSelfMenu5 == 8)
	{
		
			
	}

	if (ScrollSelfMenu5 == 9)
	{
		
	}

	if (ScrollSelfMenu5 == 10)
	{
		
	}

	if (ScrollSelfMenu5 == 11)
	{
		
	}

	if (ScrollSelfMenu5 == 12)
	{

	}

	if (ScrollSelfMenu5 == 13)
	{
		
	}

	if (ScrollSelfMenu5 == 14)
	{
		
	}

	if (ScrollSelfMenu5 == 15)
	{
	
	}

	if (ScrollSelfMenu5 == 16)
	{

	}

	if (ScrollSelfMenu5 == 17)
	{

	}

	if (ScrollSelfMenu5 == 18)
	{

	}

	if (ScrollSelfMenu5 == 19)
	{

	}
}


#pragma endregion


#pragma endregion



#pragma region SELF 4 MENU


#pragma region Open Self 4 Menu

void OpenSelf4Page()
{
	if (LockOptions == 0)
	{
		char LOCK[] = { 0x01 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}
	else
	{
		char LOCK[] = { 0x00 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x48, 0x00, 0x69, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x4B, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x41, 0x00, 0x75, 0x00, 0x72, 0x00, 0x61, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x42, 0x00, 0x75, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x72, 0x00, 0x69, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x72, 0x00, 0x69, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x48, 0x00, 0x75, 0x00, 0x72, 0x00, 0x74, 0x00, 0x20, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x0A, 0x00, 0x58, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x48, 0x00, 0x69, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x41, 0x00, 0x72, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x55, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x61, 0x00, 0x69, 0x00, 0x72, 0x00, 0x20, 0x00, 0x41, 0x00, 0x74, 0x00, 0x74, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x69, 0x00, 0x74, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x78, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x65, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x63, 0x00, 0x68, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x48, 0x00, 0x69, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x73, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x42, 0x00, 0x75, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x10, 0x00, 0x00, 0xC2, 0xB0, 0x00, 0x00, 0x43, 0xCF };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC3, 0x70, 0x00, 0x00, 0xC1, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x42, 0xBD, 0x00, 0x00, 0x43, 0x45, 0x00 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));

	char SCROLLBARSELECT[] = { 0x43, 0x4A };
	write_process(Scrollbar_Toggle, &SCROLLBARSELECT, sizeof(SCROLLBARSELECT));

	SelfMenu4 = true;

	ScrollSelfMenu4 = 0;

	movename = true; //ENABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Close Self 4 Menu

void CloseSelf4Menu()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x43, 0xED, 0x00, 0x00, 0x43, 0x77 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));


	SelfMenu4 = false;

	ScrollSelfMenu4 = 0;

	movename = false; //DISABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Scroll Menu Self Page 4 Down

void ScrollMenuSelf4Down()
{
	if (ScrollSelfMenu4 == 19)//19 = max
	{
		ScrollSelfMenu4 = 0;
	}
	else
	{
		ScrollSelfMenu4 = ScrollSelfMenu4 + 1;
	}

	if (ScrollSelfMenu4 == 0)
	{
		char DOWN1[] = { 0x43, 0x4A };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu4 == 1)
	{
		char DOWN1[] = { 0x43, 0x63 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu4 == 2)
	{
		char DOWN2[] = { 0x43, 0x7A };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollSelfMenu4 == 3)
	{
		char DOWN3[] = { 0x43, 0x89 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollSelfMenu4 == 4)
	{
		char DOWN4[] = { 0x43, 0x95 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 5)
	{
		char DOWN4[] = { 0x43, 0xA1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 6)
	{
		char DOWN4[] = { 0x43, 0xAE };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 7)
	{
		char DOWN4[] = { 0x43, 0xB9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 8)
	{
		char DOWN4[] = { 0x43, 0xC5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 9)
	{
		char DOWN4[] = { 0x43, 0xD1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 10)
	{
		char DOWN4[] = { 0x43, 0xDD };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 11)
	{
		char DOWN4[] = { 0x43, 0xE9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 12)
	{
		char DOWN4[] = { 0x43, 0xF5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 13)
	{
		char DOWN4[] = { 0x44, 0x01 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 14)
	{
		char DOWN4[] = { 0x44, 0x06 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 15)
	{
		char DOWN4[] = { 0x44, 0x0C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 16)
	{
		char DOWN4[] = { 0x44, 0x12 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 17)
	{
		char DOWN4[] = { 0x44, 0x18 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 18)
	{
		char DOWN4[] = { 0x44, 0x1F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 19)
	{
		char DOWN4[] = { 0x44, 0x25 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}


#pragma endregion


#pragma region Scroll Menu Self Page 4 Up

void ScrollMenuSelf4Up()
{
	if (ScrollSelfMenu4 == 0)
	{
		ScrollSelfMenu4 = 19; // 19 = max
	}
	else
	{
		ScrollSelfMenu4 = ScrollSelfMenu4 - 1;
	}

	if (ScrollSelfMenu4 == 0)
	{
		char DOWN1[] = { 0x43, 0x4A };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu4 == 1)
	{
		char DOWN1[] = { 0x43, 0x63 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu4 == 2)
	{
		char DOWN2[] = { 0x43, 0x7A };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollSelfMenu4 == 3)
	{
		char DOWN3[] = { 0x43, 0x89 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollSelfMenu4 == 4)
	{
		char DOWN4[] = { 0x43, 0x95 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 5)
	{
		char DOWN4[] = { 0x43, 0xA1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 6)
	{
		char DOWN4[] = { 0x43, 0xAE };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 7)
	{
		char DOWN4[] = { 0x43, 0xB9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 8)
	{
		char DOWN4[] = { 0x43, 0xC5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 9)
	{
		char DOWN4[] = { 0x43, 0xD1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 10)
	{
		char DOWN4[] = { 0x43, 0xDD };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 11)
	{
		char DOWN4[] = { 0x43, 0xE9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 12)
	{
		char DOWN4[] = { 0x43, 0xF5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 13)
	{
		char DOWN4[] = { 0x44, 0x01 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 14)
	{
		char DOWN4[] = { 0x44, 0x06 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 15)
	{
		char DOWN4[] = { 0x44, 0x0C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 16)
	{
		char DOWN4[] = { 0x44, 0x12 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 17)
	{
		char DOWN4[] = { 0x44, 0x18 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 18)
	{
		char DOWN4[] = { 0x44, 0x1F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu4 == 19)
	{
		char DOWN4[] = { 0x44, 0x25 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}

#pragma endregion


#pragma region Select Self 4 Options

void SelectMenuSelf4Option()
{
	if (ScrollSelfMenu4 == 0)
	{
		if (!AutoSprint2)
		{
			char SPEED[] = { 0x00 };
			write_process(0x00B01EEF, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			AutoSprint2 = true;
		}
		else
		{
			char SPEED[] = { 0x01 };
			write_process(0x00B01EEF, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			AutoSprint2 = false;
		}
	}

	if (ScrollSelfMenu4 == 1)
	{
		if (!InstantHit)
		{
			char SPEED[] = { 0xFF };
			write_process(0x00AEBED4, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			InstantHit = true;
		}
		else
		{
			char SPEED[] = { 0x3E };
			write_process(0x00AEBED4, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			InstantHit = false;
		}
	}

	if (ScrollSelfMenu4 == 2)
	{
		if (!KillAura)
		{
			char SPEED[] = { 0xFF };
			write_process(0x00233290, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			KillAura = true;
		}
		else
		{
			char SPEED[] = { 0x00 };
			write_process(0x00233290, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			KillAura = false;
		}
	}

	if (ScrollSelfMenu4 == 3)
	{
		if (!FastBuild)
		{
			char SPEED[] = { 0x40 };
			write_process(0x00AECE70, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			FastBuild = true;
		}
		else
		{
			char SPEED[] = { 0x41 };
			write_process(0x00AECE70, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			FastBuild = false;
		}
	}

	if (ScrollSelfMenu4 == 4)
	{
		if (!CriticalMode)
		{
			char SPEED[] = { 0x3F, 0xAF };
			write_process(0x003ABDD0, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			CriticalMode = true;
		}
		else
		{
			char SPEED[] = { 0x3F, 0xEF };
			write_process(0x003ABDD0, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			CriticalMode = false;
		}
	}

	if (ScrollSelfMenu4 == 5)
	{
		if (!CriticalModeV2)
		{
			char MOD[] = { 0x3E, 0x27 };
			write_process(0x003AA77C, &MOD, sizeof(MOD));

			char MOD2[] = { 0xFF };
			write_process(0x00233290, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0xFF, 0xFF };
			write_process(0x00AEBED4, &MOD3, sizeof(MOD3));

			char MOD4[] = { 0x41 };
			write_process(0x00B01BAC, &MOD4, sizeof(MOD4));
			MOD_ENABLED();
			sleep(200);
			CriticalModeV2 = true;
		}
		else
		{
			char MOD[] = { 0x3E, 0xD7 };
			write_process(0x003AA77C, &MOD, sizeof(MOD));

			char MOD2[] = { 0x00 };
			write_process(0x00233290, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x3E, 0x80 };
			write_process(0x00AEBED4, &MOD3, sizeof(MOD3));

			char MOD4[] = { 0x40 };
			write_process(0x00B01BAC, &MOD4, sizeof(MOD4));
			MOD_DISABLED();
			sleep(200);
			CriticalModeV2 = false;
		}
	}

	if (ScrollSelfMenu4 == 6)
	{
		if (!NoSlowDown)
		{
			char SPEED[] = { 0x4F };
			write_process(0x003AFB60, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			NoSlowDown = true;
		}
		else
		{
			char SPEED[] = { 0x3F };
			write_process(0x003AFB60, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			NoSlowDown = false;
		}
	}

	if (ScrollSelfMenu4 == 7)
	{
		if (!RemoveHurtCam)
		{
			char SPEED[] = { 0x00, 0x00 };
			write_process(0x00A972B0, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			RemoveHurtCam = true;
		}
		else
		{
			char SPEED[] = { 0x40, 0x49 };
			write_process(0x00A972B0, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			RemoveHurtCam = false;
		}
	}

	if (ScrollSelfMenu4 == 8)
	{
		if (!XforHit)
		{
			char SPEED[] = { 0x0F };
			write_process(0x00AEEB83, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			XforHit = true;
		}
		else
		{
			char SPEED[] = { 0x01 };
			write_process(0x00AEEB83, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			XforHit = false;
		}
	}

	if (ScrollSelfMenu4 == 9)
	{
		if (!ShowArmor)
		{
			char SPEED[] = { 0x38, 0x80, 0x00, 0x01 };
			write_process(0x0090B5F0, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			ShowArmor = true;
		}
		else
		{
			char SPEED[] = { 0x38, 0x80, 0x00, 0x00 };
			write_process(0x0090B5F0, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			ShowArmor = false;
		}
	}

	if (ScrollSelfMenu4 == 10)
	{
		if (!UnfaitAttack)
		{
			char SPEED[] = { 0xBE };
			write_process(0x00AEBED4, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			UnfaitAttack = true;
		}
		else
		{
			char SPEED[] = { 0x3E };
			write_process(0x00AEBED4, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			UnfaitAttack = false;
		}
	}

	if (ScrollSelfMenu4 == 11)
	{
		if (!HitBox)
		{
			char MOD[] = { 0x01 };
			write_process(0x0003AE03, &MOD, sizeof(MOD));

			char MOD1[] = { 0xFF };
			write_process(0x00233290, &MOD1, sizeof(MOD1));
			MOD_ENABLED();
			sleep(200);
			HitBox = true;
		}
		else
		{
			char MOD[] = { 0x00 };
			write_process(0x0003AE03, &MOD, sizeof(MOD));

			char MOD1[] = { 0x00 };
			write_process(0x00233290, &MOD1, sizeof(MOD1));
			MOD_DISABLED();
			sleep(200);
			HitBox = false;
		}
	}

	if (ScrollSelfMenu4 == 12)
	{
		if (!AutoJump)
		{
			char MOD[] = { 0x41 };
			write_process(0x00B01BAC, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			AutoJump = true;
		}
		else
		{
			char MOD[] = { 0x40 };
			write_process(0x00B01BAC, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			AutoJump = false;
		}
	}

	if (ScrollSelfMenu4 == 13)
	{
		if (!AutoChangeView)
		{
			char MOD[] = { 0x40 };
			write_process(0x00AEF56C, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			AutoChangeView = true;
		}
		else
		{
			char MOD[] = { 0x41 };
			write_process(0x00AEF56C, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			AutoChangeView = false;
		}
	}

	if (ScrollSelfMenu4 == 14)
	{
		if (!AutoCrouch)
		{
			char MOD[] = { 0x40 };
			write_process(0x00AEF514, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			AutoCrouch = true;
		}
		else
		{
			char MOD[] = { 0x41 };
			write_process(0x00AEF514, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			AutoCrouch = false;
		}
	}

	if (ScrollSelfMenu4 == 15)
	{
		if (!AutoMine)
		{
			char MOD[] = { 0x40 };
			write_process(0x00AEC42C, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			AutoMine = true;
		}
		else
		{
			char MOD[] = { 0x41 };
			write_process(0x00AEC42C, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			AutoMine = false;
		}
	}

	if (ScrollSelfMenu4 == 16)
	{
		if (!AutoHit)
		{
			char MOD[] = { 0x40 };
			write_process(0x00AEC34C, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			AutoHit = true;
		}
		else
		{
			char MOD[] = { 0x41 };
			write_process(0x00AEC34C, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			AutoHit = false;
		}
	}

	if (ScrollSelfMenu4 == 17)
	{
		if (!AutoTossItems)
		{
			char MOD[] = { 0x40 };
			write_process(0x00AEF428, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			AutoTossItems = true;
		}
		else
		{
			char MOD[] = { 0x41 };
			write_process(0x00AEF428, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			AutoTossItems = false;
		}
	}

	if (ScrollSelfMenu4 == 18)
	{
		if (!AutoBuild)
		{
			char MOD[] = { 0x40 };
			write_process(0x00AEF428, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			AutoBuild = true;
		}
		else
		{
			char MOD[] = { 0x41 };
			write_process(0x00AEF428, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			AutoBuild = false;
		}
	}

	if (ScrollSelfMenu4 == 19)
	{
		CloseSelf4Menu();
		sleep(50);
		OpenSelfPage5();
	}
}

#pragma endregion


#pragma endregion



#pragma region SELF 3 MENU


#pragma region Open Self 3 Menu

void OpenSelf3Page()
{
	if (LockOptions == 0)
	{
		char LOCK[] = { 0x01 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}
	else
	{
		char LOCK[] = { 0x00 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x62, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x72, 0x00, 0x61, 0x00, 0x20, 0x00, 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x65, 0x00, 0x74, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x54, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x65, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x75, 0x00, 0x74, 0x00, 0x73, 0x00, 0x69, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x63, 0x00, 0x61, 0x00, 0x66, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x61, 0x00, 0x79, 0x00, 0x20, 0x00, 0x2F, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x61, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x67, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x63, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x79, 0x00, 0x20, 0x00, 0x47, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x76, 0x00, 0x69, 0x00, 0x74, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x20, 0x00, 0x52, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x62, 0x00, 0x79, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x53, 0x00, 0x50, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4F, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x61, 0x00, 0x63, 0x00, 0x68, 0x00, 0x20, 0x00, 0x41, 0x00, 0x74, 0x00, 0x74, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x10, 0x00, 0x00, 0xC2, 0xB0, 0x00, 0x00, 0x43, 0xCF };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC3, 0x70, 0x00, 0x00, 0xC1, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x42, 0xBD, 0x00, 0x00, 0x43, 0x45, 0x00 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));

	char SCROLLBARSELECT[] = { 0x43, 0x4A };
	write_process(Scrollbar_Toggle, &SCROLLBARSELECT, sizeof(SCROLLBARSELECT));

	SelfMenu3 = true;

	ScrollSelfMenu3 = 0;

	movename = true; //ENABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Close Self 3 Menu

void CloseSelf3Menu()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x43, 0xED, 0x00, 0x00, 0x43, 0x77 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));


	SelfMenu3 = false;

	ScrollSelfMenu3 = 0;

	movename = false; //DISABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Scroll Menu Self Page 3 Down

void ScrollMenuSelf3Down()
{
	if (ScrollSelfMenu3 == 19)//19 = max
	{
		ScrollSelfMenu3 = 0;
	}
	else
	{
		ScrollSelfMenu3 = ScrollSelfMenu3 + 1;
	}

	if (ScrollSelfMenu3 == 0)
	{
		char DOWN1[] = { 0x43, 0x4A };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu3 == 1)
	{
		char DOWN1[] = { 0x43, 0x63 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu3 == 2)
	{
		char DOWN2[] = { 0x43, 0x7A };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollSelfMenu3 == 3)
	{
		char DOWN3[] = { 0x43, 0x89 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollSelfMenu3 == 4)
	{
		char DOWN4[] = { 0x43, 0x95 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 5)
	{
		char DOWN4[] = { 0x43, 0xA1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 6)
	{
		char DOWN4[] = { 0x43, 0xAE };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 7)
	{
		char DOWN4[] = { 0x43, 0xB9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 8)
	{
		char DOWN4[] = { 0x43, 0xC5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 9)
	{
		char DOWN4[] = { 0x43, 0xD1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 10)
	{
		char DOWN4[] = { 0x43, 0xDD };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 11)
	{
		char DOWN4[] = { 0x43, 0xE9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 12)
	{
		char DOWN4[] = { 0x43, 0xF5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 13)
	{
		char DOWN4[] = { 0x44, 0x01 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 14)
	{
		char DOWN4[] = { 0x44, 0x06 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 15)
	{
		char DOWN4[] = { 0x44, 0x0C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 16)
	{
		char DOWN4[] = { 0x44, 0x12 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 17)
	{
		char DOWN4[] = { 0x44, 0x18 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 18)
	{
		char DOWN4[] = { 0x44, 0x1F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 19)
	{
		char DOWN4[] = { 0x44, 0x25 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}


#pragma endregion


#pragma region Scroll Menu Self Page 3 Up

void ScrollMenuSelf3Up()
{
	if (ScrollSelfMenu3 == 0)
	{
		ScrollSelfMenu3 = 19; // 19 = max
	}
	else
	{
		ScrollSelfMenu3 = ScrollSelfMenu3 - 1;
	}

	if (ScrollSelfMenu3 == 0)
	{
		char DOWN1[] = { 0x43, 0x4A };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu3 == 1)
	{
		char DOWN1[] = { 0x43, 0x63 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu3 == 2)
	{
		char DOWN2[] = { 0x43, 0x7A };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollSelfMenu3 == 3)
	{
		char DOWN3[] = { 0x43, 0x89 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollSelfMenu3 == 4)
	{
		char DOWN4[] = { 0x43, 0x95 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 5)
	{
		char DOWN4[] = { 0x43, 0xA1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 6)
	{
		char DOWN4[] = { 0x43, 0xAE };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 7)
	{
		char DOWN4[] = { 0x43, 0xB9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 8)
	{
		char DOWN4[] = { 0x43, 0xC5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 9)
	{
		char DOWN4[] = { 0x43, 0xD1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 10)
	{
		char DOWN4[] = { 0x43, 0xDD };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 11)
	{
		char DOWN4[] = { 0x43, 0xE9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 12)
	{
		char DOWN4[] = { 0x43, 0xF5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 13)
	{
		char DOWN4[] = { 0x44, 0x01 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 14)
	{
		char DOWN4[] = { 0x44, 0x06 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 15)
	{
		char DOWN4[] = { 0x44, 0x0C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 16)
	{
		char DOWN4[] = { 0x44, 0x12 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 17)
	{
		char DOWN4[] = { 0x44, 0x18 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 18)
	{
		char DOWN4[] = { 0x44, 0x1F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu3 == 19)
	{
		char DOWN4[] = { 0x44, 0x25 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}

#pragma endregion


#pragma region Select Self 3 Options

void SelectMenuSelf3Option()
{
	if (ScrollSelfMenu3 == 0)
	{
		if (!LookForback)
		{
			char SPEED[] = { 0x23 };
			write_process(0x00A97F2C, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			LookForback = true;
		}
		else
		{
			char SPEED[] = { 0x43 };
			write_process(0x00A97F2C, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			LookForback = false;
		}
	}

	if (ScrollSelfMenu3 == 1)
	{
		if (!CameraDown)
		{
			char SPEED[] = { 0xFC, 0x02, 0x10 };
			write_process(0x004B1CE0, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			CameraDown = true;
		}
		else
		{
			char SPEED[] = { 0xFC, 0x01, 0x10 };
			write_process(0x004B1CE0, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			CameraDown = false;
		}
	}

	if (ScrollSelfMenu3 == 2)
	{
		if (!BetterTime)
		{
			char SPEED[] = { 0x0F };
			write_process(0x00A9A6DC, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			BetterTime = true;
		}
		else
		{
			char SPEED[] = { 0x3F };
			write_process(0x00A9A6DC, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			BetterTime = false;
		}
	}

	if (ScrollSelfMenu3 == 3)
	{
		if (!SeeOutside)
		{
			char SPEED[] = { 0xDF };
			write_process(0x00A97F34, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			SeeOutside = true;
		}
		else
		{
			char SPEED[] = { 0x3F };
			write_process(0x00A97F34, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			SeeOutside = false;
		}
	}

	if (ScrollSelfMenu3 == 4)
	{
		if (!RemoveAllTexts)
		{
			char SPEED[] = { 0x40 };
			write_process(0x007865EC, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			RemoveAllTexts = true;
		}
		else
		{
			char SPEED[] = { 0x41 };
			write_process(0x007865EC, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			RemoveAllTexts = false;
		}
	}

	if (ScrollSelfMenu3 == 5)
	{
		if (!Scaffold)
		{
			char SPEED[] = { 0x50 };
			write_process(0x0022C7FC, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			Scaffold = true;
		}
		else
		{
			char SPEED[] = { 0x40 };
			write_process(0x0022C7FC, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			Scaffold = false;
		}
	}

	if (ScrollSelfMenu3 == 6)
	{
		if (!DaysNights)
		{
			char SPEED[] = { 0x2F };
			write_process(0x014C6880, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			DaysNights = true;
		}
		else
		{
			char SPEED[] = { 0x3F };
			write_process(0x014C6880, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			DaysNights = false;
		}
	}

	if (ScrollSelfMenu3 == 7)
	{
		if (!FakeLag)
		{
			MOD_ENABLED();
			sleep(200);
			FakeLag = true;
		}
		else
		{
			MOD_DISABLED();
			sleep(200);
			FakeLag = false;
		}
	}

	if (ScrollSelfMenu3 == 8)
	{
		if (!ChangePosPlace)
		{
			char SPEED[] = { 0x28 };
			write_process(0x0022C85A, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			ChangePosPlace = true;
		}
		else
		{
			char SPEED[] = { 0x08 };
			write_process(0x0022C85A, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			ChangePosPlace = false;
		}
	}

	if (ScrollSelfMenu3 == 9)
	{
		if (!DestroyGame)
		{
			char SPEED[] = { 0x48 };
			write_process(0x00B21C96, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			DestroyGame = true;
		}
		else
		{
			char SPEED[] = { 0x08 };
			write_process(0x00B21C96, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			DestroyGame = false;
		}
	}

	if (ScrollSelfMenu3 == 10)
	{
		if (!Levitation)
		{
			char SPEED[] = { 0xBF };
			write_process(0x003ABDD0, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			Levitation = true;
		}
		else
		{
			char SPEED[] = { 0x3F };
			write_process(0x003ABDD0, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			Levitation = false;
		}
	}

	if (ScrollSelfMenu3 == 11)
	{
		if (!NightVision)
		{
			char SPEED[] = { 0x7F };
			write_process(0x00A9A6C8, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			NightVision = true;
		}
		else
		{
			char SPEED[] = { 0x3F };
			write_process(0x00A9A6C8, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			NightVision = false;
		}
	}

	if (ScrollSelfMenu3 == 12)
	{
		if (!MakeSnow)
		{
			char SPEED[] = { 0x48 };
			write_process(0x00A9B23E, &SPEED, sizeof(SPEED));

			char SPEED1[] = { 0x58 };
			write_process(0x00A9B986, &SPEED1, sizeof(SPEED1));
			MOD_ENABLED();
			sleep(200);
			MakeSnow = true;
		}
		else
		{
			char SPEED[] = { 0x08 };
			write_process(0x00A9B23E, &SPEED, sizeof(SPEED));

			char SPEED1[] = { 0x08 };
			write_process(0x00A9B986, &SPEED1, sizeof(SPEED1));
			MOD_DISABLED();
			sleep(200);
			MakeSnow = false;
		}
	}

	if (ScrollSelfMenu3 == 13)
	{
		if (!MakeRain)
		{
			char SPEED[] = { 0x48 };
			write_process(0x00A9B23E, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			MakeRain = true;
		}
		else
		{
			char SPEED[] = { 0x08 };
			write_process(0x00A9B23E, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			MakeRain = false;
		}
	}

	if (ScrollSelfMenu3 == 14)
	{
		if (!LabyMode)
		{
			char MOD[] = { 0xBF, 0x0F };
			write_process(0x00AD14EC, &MOD, sizeof(MOD));

			char MOD1[] = { 0xBF, 0x23 };
			write_process(0x00AD0274, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x4C };
			write_process(0x00AD8158, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x40, 0x82 };
			write_process(0x00B01DEC, &MOD3, sizeof(MOD3));

			char MOD4[] = { 0x40 };
			write_process(0x003097C8, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0x40 };
			write_process(0x003097B8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x38, 0x80, 0x00, 0x01 };
			write_process(0x0090B5F0, &MOD6, sizeof(MOD6));

			char MOD7[] = { 0x3F, 0xFF };
			write_process(0x00AD5A5C, &MOD7, sizeof(MOD7));

			char MOD8[] = { 0x40 };
			write_process(0x00227BDC, &MOD8, sizeof(MOD8));
			MOD_ENABLED();
			sleep(200);
			LabyMode = true;
		}
		else
		{
			char MOD[] = { 0x3F, 0x0F };
			write_process(0x00AD14EC, &MOD, sizeof(MOD));

			char MOD1[] = { 0x3F, 0x23 };
			write_process(0x00AD0274, &MOD1, sizeof(MOD1));

			char MOD2[] = { 0x2C };
			write_process(0x00AD8158, &MOD2, sizeof(MOD2));

			char MOD3[] = { 0x41, 0x82 };
			write_process(0x00B01DEC, &MOD3, sizeof(MOD3));

			char MOD4[] = { 0x41 };
			write_process(0x003097C8, &MOD4, sizeof(MOD4));

			char MOD5[] = { 0x41 };
			write_process(0x003097B8, &MOD5, sizeof(MOD5));

			char MOD6[] = { 0x38, 0x80, 0x00, 0x00 };
			write_process(0x0090B5F0, &MOD6, sizeof(MOD6));

			char MOD7[] = { 0x3F, 0x80 };
			write_process(0x00AD5A5C, &MOD7, sizeof(MOD7));

			char MOD8[] = { 0x41 };
			write_process(0x00227BDC, &MOD8, sizeof(MOD8));

			MOD_DISABLED();
			sleep(200);
			LabyMode = false;
		}
	}

	if (ScrollSelfMenu3 == 15)
	{
		if (!ESPPlayers)
		{
			char SPEED[] = { 0x41 };
			write_process(0x00AD5B60, &SPEED, sizeof(SPEED));

			char SPEED1[] = { 0x6F, 0xFF };
			write_process(0x00AD5A5C, &SPEED1, sizeof(SPEED1));
			MOD_ENABLED();
			sleep(200);
			ESPPlayers = true;
		}
		else
		{
			char SPEED[] = { 0x40 };
			write_process(0x00AD5B60, &SPEED, sizeof(SPEED));

			char SPEED1[] = { 0x3F, 0x80 };
			write_process(0x00AD5A5C, &SPEED1, sizeof(SPEED1));
			MOD_DISABLED();
			sleep(200);
			ESPPlayers = false;
		}
	}

	if (ScrollSelfMenu3 == 16)
	{
		if (!OldFly)
		{
			char SPEED[] = { 0x40 };
			write_process(0x00B02378, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			OldFly = true;
		}
		else
		{
			char SPEED[] = { 0x41 };
			write_process(0x00B02378, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			OldFly = false;
		}
	}

	if (ScrollSelfMenu3 == 17)
	{
		if (!ReachAttack)
		{
			char MODZ[] = { 0x80 };
			write_process(0x00A95FB9, &MODZ, sizeof(MODZ));

			char MOD[] = { 0x80 };
			write_process(0x00A95FC1, &MOD, sizeof(MOD));

			char MO[] = { 0x43, 0xA0, 0x00, 0x00 };
			write_process(0x00B351D8, &MO, sizeof(MO));

			char MA[] = { 0x43, 0xA0, 0x00, 0x00 };
			write_process(0x00B351DC, &MA, sizeof(MA));
			MOD_ENABLED();
			sleep(200);
			ReachAttack = true;
		}
		else
		{
			char MODZ[] = { 0x18 };
			write_process(0x00A95FB9, &MODZ, sizeof(MODZ));

			char MOD[] = { 0x08 };
			write_process(0x00A95FC1, &MOD, sizeof(MOD));

			char MO[] = { 0x40, 0xA0, 0x00, 0x00 };
			write_process(0x00B351D8, &MO, sizeof(MO));

			char MA[] = { 0x40, 0x90, 0x00, 0x00 };
			write_process(0x00B351DC, &MA, sizeof(MA));
			MOD_DISABLED();
			sleep(200);
			ReachAttack = false;
		}
	}

	if (ScrollSelfMenu3 == 18)
	{
		if (!AutoSprint)
		{
			char SPEED[] = { 0x40 };
			write_process(0x00B01DEC, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			AutoSprint = true;
		}
		else
		{
			char SPEED[] = { 0x41 };
			write_process(0x00B01DEC, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			AutoSprint = false;
		}
	}

	if (ScrollSelfMenu3 == 19)
	{
		CloseSelf3Menu();
		sleep(50);
		OpenSelf4Page();
	}
}

#pragma endregion


#pragma endregion



#pragma region SELF 2 MENU


#pragma region Open Self 2 Menu

void OpenSelf2Page()
{
	if (LockOptions == 0)
	{
		char LOCK[] = { 0x01 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}
	else
	{
		char LOCK[] = { 0x00 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x53, 0x00, 0x50, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x48, 0x00, 0x75, 0x00, 0x64, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x2D, 0x00, 0x47, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x20, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x55, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x55, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x20, 0x00, 0x41, 0x00, 0x46, 0x00, 0x4B, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x69, 0x00, 0x62, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x69, 0x00, 0x62, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x0A, 0x00, 0x57, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x69, 0x00, 0x73, 0x00, 0x61, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x52, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x76, 0x00, 0x69, 0x00, 0x73, 0x00, 0x69, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x0A, 0x00, 0x58, 0x00, 0x2D, 0x00, 0x72, 0x00, 0x61, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x48, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x48, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x74, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x57, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6B, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x72, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x72, 0x00, 0x61, 0x00, 0x76, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x10, 0x00, 0x00, 0xC2, 0xB0, 0x00, 0x00, 0x43, 0xCF };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC3, 0x70, 0x00, 0x00, 0xC1, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x42, 0xBD, 0x00, 0x00, 0x43, 0x45, 0x00 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));

	char SCROLLBARSELECT[] = { 0x43, 0x4A };
	write_process(Scrollbar_Toggle, &SCROLLBARSELECT, sizeof(SCROLLBARSELECT));

	SelfMenu2 = true;

	ScrollSelfMenu2 = 0;

	movename = true; //ENABLED NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Close Self 2 Menu

void CloseSelf2Menu()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x43, 0xED, 0x00, 0x00, 0x43, 0x77 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));


	SelfMenu2 = false;

	ScrollSelfMenu2 = 0;

	movename = false; //DISABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Scroll Menu Self Page 2 Down

void ScrollMenuSelf2Down()
{
	if (ScrollSelfMenu2 == 19)//19 = max
	{
		ScrollSelfMenu2 = 0;
	}
	else
	{
		ScrollSelfMenu2 = ScrollSelfMenu2 + 1;
	}

	if (ScrollSelfMenu2 == 0)
	{
		char DOWN1[] = { 0x43, 0x4A };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu2 == 1)
	{
		char DOWN1[] = { 0x43, 0x63 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu2 == 2)
	{
		char DOWN2[] = { 0x43, 0x7A };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollSelfMenu2 == 3)
	{
		char DOWN3[] = { 0x43, 0x89 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollSelfMenu2 == 4)
	{
		char DOWN4[] = { 0x43, 0x95 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 5)
	{
		char DOWN4[] = { 0x43, 0xA1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 6)
	{
		char DOWN4[] = { 0x43, 0xAE };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 7)
	{
		char DOWN4[] = { 0x43, 0xB9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 8)
	{
		char DOWN4[] = { 0x43, 0xC5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 9)
	{
		char DOWN4[] = { 0x43, 0xD1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 10)
	{
		char DOWN4[] = { 0x43, 0xDD };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 11)
	{
		char DOWN4[] = { 0x43, 0xE9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 12)
	{
		char DOWN4[] = { 0x43, 0xF5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 13)
	{
		char DOWN4[] = { 0x44, 0x01 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 14)
	{
		char DOWN4[] = { 0x44, 0x06 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 15)
	{
		char DOWN4[] = { 0x44, 0x0C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 16)
	{
		char DOWN4[] = { 0x44, 0x12 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 17)
	{
		char DOWN4[] = { 0x44, 0x18 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 18)
	{
		char DOWN4[] = { 0x44, 0x1F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 19)
	{
		char DOWN4[] = { 0x44, 0x25 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}


#pragma endregion


#pragma region Scroll Menu Self Page 2 Up

void ScrollMenuSelf2Up()
{
	if (ScrollSelfMenu2 == 0)
	{
		ScrollSelfMenu2 = 19; // 19 = max
	}
	else
	{
		ScrollSelfMenu2 = ScrollSelfMenu2 - 1;
	}

	if (ScrollSelfMenu2 == 0)
	{
		char DOWN1[] = { 0x43, 0x4A };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu2 == 1)
	{
		char DOWN1[] = { 0x43, 0x63 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu2 == 2)
	{
		char DOWN2[] = { 0x43, 0x7A };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollSelfMenu2 == 3)
	{
		char DOWN3[] = { 0x43, 0x89 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollSelfMenu2 == 4)
	{
		char DOWN4[] = { 0x43, 0x95 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 5)
	{
		char DOWN4[] = { 0x43, 0xA1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 6)
	{
		char DOWN4[] = { 0x43, 0xAE };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 7)
	{
		char DOWN4[] = { 0x43, 0xB9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 8)
	{
		char DOWN4[] = { 0x43, 0xC5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 9)
	{
		char DOWN4[] = { 0x43, 0xD1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 10)
	{
		char DOWN4[] = { 0x43, 0xDD };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 11)
	{
		char DOWN4[] = { 0x43, 0xE9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 12)
	{
		char DOWN4[] = { 0x43, 0xF5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 13)
	{
		char DOWN4[] = { 0x44, 0x01 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 14)
	{
		char DOWN4[] = { 0x44, 0x06 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 15)
	{
		char DOWN4[] = { 0x44, 0x0C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 16)
	{
		char DOWN4[] = { 0x44, 0x12 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 17)
	{
		char DOWN4[] = { 0x44, 0x18 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 18)
	{
		char DOWN4[] = { 0x44, 0x1F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu2 == 19)
	{
		char DOWN4[] = { 0x44, 0x25 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}

#pragma endregion


#pragma region Select Self 2 Options

void SelectMenuSelf2Option()
{
	if (ScrollSelfMenu2 == 0)
	{
		if (!ESPChest)
		{
			char SPEED[] = { 0x50 };
			write_process(0x00A98F4C, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			ESPChest = true;
		}
		else
		{
			char SPEED[] = { 0x40 };
			write_process(0x00A98F4C, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			ESPChest = false;
		}
	}

	if (ScrollSelfMenu2 == 1)
	{
		if (!InfiniteCraft)
		{
			char SPEED[] = { 0x01 };
			write_process(0x0098871F, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			InfiniteCraft = true;
		}
		else
		{
			char SPEED[] = { 0x00 };
			write_process(0x0098871F, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			InfiniteCraft = false;
		}
	}

	if (ScrollSelfMenu2 == 2)
	{
		if (!HudMiniGame)
		{
			char SPEED[] = { 0x41 };
			write_process(0x00AD8480, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			HudMiniGame = true;
		}
		else
		{
			char SPEED[] = { 0x40 };
			write_process(0x00AD8480, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			HudMiniGame = false;
		}
	}

	if (ScrollSelfMenu2 == 3)
	{
		if (!AntiTeleport)
		{
			char SPEED[] = { 0xFF, 0xFF, 0xFF, 0xFF };
			write_process(0x003AFB60, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			AntiTeleport = true;
		}
		else
		{
			char SPEED[] = { 0x3F, 0x7A, 0xE1, 0x48 };
			write_process(0x003AFB60, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			AntiTeleport = false;
		}
	}

	if (ScrollSelfMenu2 == 4)
	{
		if (!UFOMode)
		{
			char SPEED[] = { 0x3F, 0x00, 0x7A, 0xFF };
			write_process(0x003ABDD0, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			UFOMode = true;
		}
		else
		{
			char SPEED[] = { 0x3F, 0xEF, 0x5C, 0x29 };
			write_process(0x003ABDD0, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			UFOMode = false;
		}
	}

	if (ScrollSelfMenu2 == 5)
	{
		if (!UFOModeV2)
		{
			//NEED MAKE
			MOD_ENABLED();
			sleep(200);
			UFOModeV2 = true;
		}
		else
		{
			//NEED MAKE
			MOD_DISABLED();
			sleep(200);
			UFOModeV2 = false;
		}
	}

	if (ScrollSelfMenu2 == 6)
	{
		if (!AntiAFK)
		{
			char SPEED[] = { 0x3F, 0xF0 };
			write_process(0x002267B0, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			AntiAFK = true;
		}
		else
		{
			char SPEED[] = { 0x00, 0x00, 0x00, 0x00 };
			write_process(0x002267B0, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			AntiAFK = false;
		}
	}

	if (ScrollSelfMenu2 == 7)
	{
		if (!SensiblityFast)
		{
			char SPEED[] = { 0x42, 0xFF };
			write_process(0x00ABA948, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			SensiblityFast = true;
		}
		else
		{
			char SPEED[] = { 0x42, 0x48 };
			write_process(0x00ABA948, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			SensiblityFast = false;
		}
	}

	if (ScrollSelfMenu2 == 8)
	{
		if (!SensiblitySlow)
		{
			char SPEED[] = { 0x42, 0x20 };
			write_process(0x00ABA948, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			SensiblitySlow = true;
		}
		else
		{
			char SPEED[] = { 0x42, 0x48 };
			write_process(0x00ABA948, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			SensiblitySlow = false;
		}
	}

	if (ScrollSelfMenu2 == 9)
	{
		if (!WalkInventory)
		{
			MOD_ENABLED();
			sleep(200);
			WalkInventory = true;
		}
		else
		{
			MOD_DISABLED();
			sleep(200);
			WalkInventory = false;
		}
	}

	if (ScrollSelfMenu2 == 10)
	{
		if (!DisableRun)
		{
			char SPEED[] = { 0x4C };
			write_process(0x00B022F8, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			DisableRun = true;
		}
		else
		{
			char SPEED[] = { 0x2C };
			write_process(0x00B022F8, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			DisableRun = false;
		}
	}

	if (ScrollSelfMenu2 == 11)
	{
		if (!InvisiblePlayers)
		{
			char SPEED[] = { 0x40 };
			write_process(0x00011ADC, &SPEED, sizeof(SPEED));

			char SPEED1[] = { 0x3F, 0xFF };
			write_process(0x003ABDD0, &SPEED1, sizeof(SPEED1));
			MOD_ENABLED();
			sleep(200);
			InvisiblePlayers = true;
		}
		else
		{
			char SPEED[] = { 0x41 };
			write_process(0x00011ADC, &SPEED, sizeof(SPEED));

			char SPEED1[] = { 0x3F, 0xEF };
			write_process(0x003ABDD0, &SPEED1, sizeof(SPEED1));
			MOD_DISABLED();
			sleep(200);
			InvisiblePlayers = false;
		}
	}

	if (ScrollSelfMenu2 == 12)
	{
		if (!XRAY)
		{
			char SPEED[] = { 0xFC, 0x80, 0x30, 0x90 };
			write_process(0x00A99154, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			XRAY = true;
		}
		else
		{
			char SPEED[] = { 0xFC, 0x60, 0x30, 0x90 };
			write_process(0x00A99154, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			XRAY = false;
		}
	}

	if (ScrollSelfMenu2 == 13)
	{
		if (!NameOverHead)
		{
			char SPEED[] = { 0x4C };
			write_process(0x00AD8158, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			NameOverHead = true;
		}
		else
		{
			char SPEED[] = { 0x2C };
			write_process(0x00AD8158, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			NameOverHead = false;
		}
	}

	if (ScrollSelfMenu2 == 14)
	{
		if (!NameOverHeadV2)
		{
			char SPEED[] = { 0xFF, 0xC0, 0xE0, 0x90 };
			write_process(0x00AD8110, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			NameOverHeadV2 = true;
		}
		else
		{
			char SPEED[] = { 0xFF, 0xC0, 0x10, 0x90 };
			write_process(0x00AD8110, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			NameOverHeadV2 = false;
		}
	}

	if (ScrollSelfMenu2 == 15)
	{
		if (!StaticMovement)
		{
			char SPEED[] = { 0xFF, 0xA0, 0x18, 0x90 };
			write_process(0x00A98FA4, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			StaticMovement = true;
		}
		else
		{
			char SPEED[] = { 0xFF, 0xA0, 0x08, 0x90 };
			write_process(0x00A98FA4, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			StaticMovement = false;
		}
	}

	if (ScrollSelfMenu2 == 16)
	{
		if (!WalkInSky)
		{
			char SPEED[] = { 0x40 };
			write_process(0x00011B00, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			WalkInSky = true;
		}
		else
		{
			char SPEED[] = { 0x41 };
			write_process(0x00011B00, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			WalkInSky = false;
		}
	}

	if (ScrollSelfMenu2 == 17)
	{
		if (!RemoveAnimFire)
		{
			char SPEED[] = { 0x40 };
			write_process(0x00225E80, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			RemoveAnimFire = true;
		}
		else
		{
			char SPEED[] = { 0x41 };
			write_process(0x00225E80, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			RemoveAnimFire = false;
		}
	}

	if (ScrollSelfMenu2 == 18)
	{
		if (!GravityMoon)
		{
			char SPEED[] = { 0x40 };
			write_process(0x003ABF88, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			GravityMoon = true;
		}
		else
		{
			char SPEED[] = { 0x41 };
			write_process(0x003ABF88, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			GravityMoon = false;
		}
	}

	if (ScrollSelfMenu2 == 19)
	{
		CloseSelf2Menu();
		sleep(50);
		OpenSelf3Page();
	}
}

#pragma endregion


#pragma endregion



#pragma region SELF MENU


#pragma region Open Self Menu

void OpenSelfPage()
{
	if (LockOptions == 0)
	{
		char LOCK[] = { 0x01 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}
	else
	{
		char LOCK[] = { 0x00 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x75, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x69, 0x00, 0x20, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x0A, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x42, 0x00, 0x75, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x53, 0x00, 0x6B, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x75, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x0A, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x77, 0x00, 0x61, 0x00, 0x72, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x52, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x0A, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x57, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x57, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x47, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x73, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x73, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x42, 0x00, 0x79, 0x00, 0x70, 0x00, 0x61, 0x00, 0x73, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4B, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x58, 0x00, 0x4D, 0x00, 0x42, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x58, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x75, 0x00, 0x69, 0x00, 0x63, 0x00, 0x69, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x44, 0x00, 0x73, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x55, 0x00, 0x70, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x10, 0x00, 0x00, 0xC2, 0xB0, 0x00, 0x00, 0x43, 0xCF };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC3, 0x70, 0x00, 0x00, 0xC1, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x42, 0xBD, 0x00, 0x00, 0x43, 0x45, 0x00 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));

	char SCROLLBARSELECT[] = { 0x43, 0x4A };
	write_process(Scrollbar_Toggle, &SCROLLBARSELECT, sizeof(SCROLLBARSELECT));

	SelfMenu = true;

	ScrollSelfMenu = 0;

	movename = true; //ENABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Close Self Menu

void CloseSelfMenu()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x43, 0xED, 0x00, 0x00, 0x43, 0x77 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));


	SelfMenu = false;

	ScrollSelfMenu = 0;

	movename = false; //DISABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Scroll Menu Self Page Down

void ScrollMenuSelfDown()
{
	if (ScrollSelfMenu == 19)//19 = max
	{
		ScrollSelfMenu = 0;
	}
	else
	{
		ScrollSelfMenu = ScrollSelfMenu + 1;
	}

	if (ScrollSelfMenu == 0)
	{
		char DOWN1[] = { 0x43, 0x4A };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu == 1)
	{
		char DOWN1[] = { 0x43, 0x63 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu == 2)
	{
		char DOWN2[] = { 0x43, 0x7A };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollSelfMenu == 3)
	{
		char DOWN3[] = { 0x43, 0x89 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollSelfMenu == 4)
	{
		char DOWN4[] = { 0x43, 0x95 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 5)
	{
		char DOWN4[] = { 0x43, 0xA1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 6)
	{
		char DOWN4[] = { 0x43, 0xAE };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 7)
	{
		char DOWN4[] = { 0x43, 0xB9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 8)
	{
		char DOWN4[] = { 0x43, 0xC5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 9)
	{
		char DOWN4[] = { 0x43, 0xD1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 10)
	{
		char DOWN4[] = { 0x43, 0xDD };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 11)
	{
		char DOWN4[] = { 0x43, 0xE9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 12)
	{
		char DOWN4[] = { 0x43, 0xF5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 13)
	{
		char DOWN4[] = { 0x44, 0x01 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 14)
	{
		char DOWN4[] = { 0x44, 0x06 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 15)
	{
		char DOWN4[] = { 0x44, 0x0C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 16)
	{
		char DOWN4[] = { 0x44, 0x12 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 17)
	{
		char DOWN4[] = { 0x44, 0x18 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 18)
	{
		char DOWN4[] = { 0x44, 0x1F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 19)
	{
		char DOWN4[] = { 0x44, 0x25 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}


#pragma endregion


#pragma region Scroll Menu Self Page Up

void ScrollMenuSelfUp()
{
	if (ScrollSelfMenu == 0)
	{
		ScrollSelfMenu = 19; // 19 = max
	}
	else
	{
		ScrollSelfMenu = ScrollSelfMenu - 1;
	}

	if (ScrollSelfMenu == 0)
	{
		char DOWN1[] = { 0x43, 0x4A };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu == 1)
	{
		char DOWN1[] = { 0x43, 0x63 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollSelfMenu == 2)
	{
		char DOWN2[] = { 0x43, 0x7A };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollSelfMenu == 3)
	{
		char DOWN3[] = { 0x43, 0x89 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollSelfMenu == 4)
	{
		char DOWN4[] = { 0x43, 0x95 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 5)
	{
		char DOWN4[] = { 0x43, 0xA1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 6)
	{
		char DOWN4[] = { 0x43, 0xAE };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 7)
	{
		char DOWN4[] = { 0x43, 0xB9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 8)
	{
		char DOWN4[] = { 0x43, 0xC5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 9)
	{
		char DOWN4[] = { 0x43, 0xD1 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 10)
	{
		char DOWN4[] = { 0x43, 0xDD };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 11)
	{
		char DOWN4[] = { 0x43, 0xE9 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 12)
	{
		char DOWN4[] = { 0x43, 0xF5 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 13)
	{
		char DOWN4[] = { 0x44, 0x01 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 14)
	{
		char DOWN4[] = { 0x44, 0x06 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 15)
	{
		char DOWN4[] = { 0x44, 0x0C };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 16)
	{
		char DOWN4[] = { 0x44, 0x12 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 17)
	{
		char DOWN4[] = { 0x44, 0x18 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 18)
	{
		char DOWN4[] = { 0x44, 0x1F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollSelfMenu == 19)
	{
		char DOWN4[] = { 0x44, 0x25 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}

#pragma endregion


#pragma region Select Self Options

void SelectMenuSelfOption()
{
	if (ScrollSelfMenu == 0)
	{
		if (!SuperSpeed)
		{
			char SPEED[] = { 0xFF, 0xFF, 0xFF };
			write_process(0x003ABD49, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			SuperSpeed = true;
		}
		else
		{
			char SPEED[] = { 0x26, 0xAD, 0x89 };
			write_process(0x003ABD49, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			SuperSpeed = false;
		}
	}

	if (ScrollSelfMenu == 1)
	{
		if (!MultiJump)
		{
			char MOD[] = { 0x14 };
			write_process(0x0022790B, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			MultiJump = true;
		}
		else
		{
			char MOD[] = { 0x18 };
			write_process(0x0022790B, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			MultiJump = false;
		}
	}

	if (ScrollSelfMenu == 2)
	{
		if (!JumpForBuild)
		{
			char MOD[] = { 0xFC, 0x80 };
			write_process(0x002271F4, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			JumpForBuild = true;
		}
		else
		{
			char MOD[] = { 0xFC, 0x20 };
			write_process(0x002271F4, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			JumpForBuild = false;
		}
	}

	if (ScrollSelfMenu == 3)
	{
		if (!JumpInSky)
		{
			char MOD[] = { 0x40 };
			write_process(0x00011ADC, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			JumpInSky = true;
		}
		else
		{
			char MOD[] = { 0x41 };
			write_process(0x00011ADC, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			JumpInSky = false;
		}
	}

	if (ScrollSelfMenu == 4)
	{
		if (!SuperJump)
		{
			char MOD[] = { 0x3F, 0x47, 0x7F, 0x42 };
			write_process(0x003AA77C, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			SuperJump = true;
		}
		else
		{
			char MOD[] = { 0x3E, 0xD7, 0x0A, 0x3D };
			write_process(0x003AA77C, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			SuperJump = false;
		}
	}

	if (ScrollSelfMenu == 5)
	{
		if (!JumpForward)
		{
			char MOD[] = { 0x80 };
			write_process(0x003AA999, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			JumpForward = true;
		}
		else
		{
			char MOD[] = { 0x60 };
			write_process(0x003AA999, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			JumpForward = false;
		}
	}

	if (ScrollSelfMenu == 6)
	{
		if (!RemoveJump)
		{
			char MOD[] = { 0xF4 };
			write_process(0x003ABDC9, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			RemoveJump = true;
		}
		else
		{
			char MOD[] = { 0xB4 };
			write_process(0x003ABDC9, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			RemoveJump = false;
		}
	}

	if (ScrollSelfMenu == 7)
	{
		if (!JumpSpeed)
		{
			char MOD[] = { 0xA0 };
			write_process(0x003AA999, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			JumpSpeed = true;
		}
		else
		{
			char MOD[] = { 0x68 };
			write_process(0x003AA999, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			JumpSpeed = false;
		}
	}

	if (ScrollSelfMenu == 8)
	{
		if (!SwimFly)
		{
			char MOD[] = { 0x3B, 0x40, 0x00, 0x10 };
			write_process(0x00390410, &MOD, sizeof(MOD));

			char MOD1[] = { 0x3D };
			write_process(0x003ABD44, &MOD1, sizeof(MOD1));
			MOD_ENABLED();
			sleep(200);
			SwimFly = true;
		}
		else
		{
			char MOD[] = { 0x3B, 0x40, 0x00, 0x00 };
			write_process(0x00390410, &MOD, sizeof(MOD));

			char MOD1[] = { 0x3C };
			write_process(0x003ABD44, &MOD1, sizeof(MOD1));
			MOD_DISABLED();
			sleep(200);
			SwimFly = false;
		}
	}

	if (ScrollSelfMenu == 9)
	{
		
	}

	if (ScrollSelfMenu == 10)
	{
		if (!SwimGlitch)
		{
			char MOD[] = { 0x40 };
			write_process(0x00B0229C, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			SwimGlitch = true;
		}
		else
		{
			char MOD[] = { 0x41 };
			write_process(0x00B0229C, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			SwimGlitch = false;
		}
	}

	if (ScrollSelfMenu == 11)
	{
		if (!NoColission)
		{
			char MOD[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
			write_process(0x00011230, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			NoColission = true;
		}
		else
		{
			char MOD[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
			write_process(0x00011230, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			NoColission = false;
		}
	}

	if (ScrollSelfMenu == 12)
	{
		if (!NoColissionBypass)
		{
			char MOD[] = { 0x40 };
			write_process(0x002271B0, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			NoColissionBypass = true;
		}
		else
		{
			char MOD[] = { 0x41 };
			write_process(0x002271B0, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			NoColissionBypass = false;
		}
	}

	if (ScrollSelfMenu == 13)
	{
		if (!KickToXMB)
		{
			char MOD[] = { 0x40 };
			write_process(0x00785DBC, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			KickToXMB = true;
		}
		else
		{
			char MOD[] = { 0x41 };
			write_process(0x00785DBC, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			KickToXMB = false;
		}
	}

	if (ScrollSelfMenu == 14)
	{
		if (!FlyModeX)
		{
			char MOD[] = { 0x40 };
			write_process(0x00B023EC, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			FlyModeX = true;
		}
		else
		{
			char MOD[] = { 0x41 };
			write_process(0x00B023EC, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			FlyModeX = false;
		}
	}

	if (ScrollSelfMenu == 15)
	{
		if (!SuicideMode)
		{
			char MOD[] = { 0x3F, 0xFF };
			write_process(0x003ABDD0, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			SuicideMode = true;
		}
		else
		{
			char MOD[] = { 0x3F, 0xEF };
			write_process(0x003ABDD0, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			SuicideMode = false;
		}
	}

	if (ScrollSelfMenu == 16)
	{
		if (!GameSpeed)
		{
			char MOD[] = { 0x41 };
			write_process(0x00AEFE64, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			GameSpeed = true;
		}
		else
		{
			char MOD[] = { 0x40 };
			write_process(0x00AEFE64, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			GameSpeed = false;
		}
	}

	if (ScrollSelfMenu == 17)
	{
		if (!IdsItems)
		{
			char MOD[] = { 0x40 };
			write_process(0x003097C8, &MOD, sizeof(MOD));

			char MOD1[] = { 0x40 };
			write_process(0x003097B8, &MOD1, sizeof(MOD1));
			MOD_ENABLED();
			sleep(200);
			IdsItems = true;
		}
		else
		{
			char MOD[] = { 0x41 };
			write_process(0x003097C8, &MOD, sizeof(MOD));

			char MOD1[] = { 0x41 };
			write_process(0x003097B8, &MOD1, sizeof(MOD1));
			MOD_DISABLED();
			sleep(200);
			IdsItems = false;
		}
	}

	if (ScrollSelfMenu == 18)
	{
		if (!FloatUP)
		{
			char MOD[] = { 0x3F };
			write_process(0x003ABDC8, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			FloatUP = true;
		}
		else
		{
			char MOD[] = { 0xBF };
			write_process(0x003ABDC8, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			FloatUP = false;
		}
	}

	if (ScrollSelfMenu == 19)
	{
		CloseSelfMenu();
		sleep(50);
		OpenSelf2Page();
	}
}

#pragma endregion


#pragma endregion



#pragma region NAME MENU


#pragma region Open Name Menu

void OpenNamePage()
{
	if (LockOptions == 0)
	{
		char LOCK[] = { 0x01 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}
	else
	{
		char LOCK[] = { 0x00 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x47, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x52, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x62, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x80, 0x00, 0x00, 0xC2, 0xB0, 0x00, 0x00, 0x42, 0x20 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC3, 0x70, 0x00, 0x00, 0xC3, 0x30 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x42, 0xC0, 0x00, 0x00, 0x43, 0x45, 0x00 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));

	char SCROLLBARSELECT[] = { 0x43, 0x5E };
	write_process(Scrollbar_Toggle, &SCROLLBARSELECT, sizeof(SCROLLBARSELECT));


	NameChangerPage = true;

	ScrollbarNameChangerPage = 0;

	movename = true; //DISABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Close Menu

void CloseNameMenu()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x43, 0xED, 0x00, 0x00, 0x43, 0x77 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));


	NameChangerPage = false;

	ScrollbarNameChangerPage = 0;

	movename = false; //DISABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Scroll Menu Name Page Down

void ScrollMenuNameDown()
{
	if (ScrollbarNameChangerPage == 4)//4 = max
	{
		ScrollbarNameChangerPage = 0;
	}
	else
	{
		ScrollbarNameChangerPage = ScrollbarNameChangerPage + 1;
	}

	if (ScrollbarNameChangerPage == 0)
	{
		char DOWN1[] = { 0x43, 0x5E };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollbarNameChangerPage == 1)
	{
		char DOWN1[] = { 0x43, 0x75 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollbarNameChangerPage == 2)
	{
		char DOWN2[] = { 0x43, 0x87 };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollbarNameChangerPage == 3)
	{
		char DOWN3[] = { 0x43, 0x93 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollbarNameChangerPage == 4)
	{
		char DOWN4[] = { 0x43, 0x9F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}


#pragma endregion


#pragma region Scroll Menu Name Page Up

void ScrollMenuNameUp()
{
	if (ScrollbarNameChangerPage == 0)
	{
		ScrollbarNameChangerPage = 4;//4 = max
	}
	else
	{
		ScrollbarNameChangerPage = ScrollbarNameChangerPage - 1;
	}

	if (ScrollbarNameChangerPage == 0)
	{
		char DOWN1[] = { 0x43, 0x5E };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollbarNameChangerPage == 1)
	{
		char DOWN1[] = { 0x43, 0x75 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollbarNameChangerPage == 2)
	{
		char DOWN2[] = { 0x43, 0x87 };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollbarNameChangerPage == 3)
	{
		char DOWN3[] = { 0x43, 0x93 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollbarNameChangerPage == 4)
	{
		char DOWN4[] = { 0x43, 0x9F };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	sleep(50);
}

#pragma endregion


#pragma region Select Name Options

void SelectMenuNameOption()
{
	if (ScrollbarNameChangerPage == 0)
	{
		NAME_CHANGER();
		sleep(200);
	}

	if (ScrollbarNameChangerPage == 1)
	{
		NAME_CHANGER_GLITCHED();
		sleep(200);
	}

	if (ScrollbarNameChangerPage == 2)
	{
		NAME_CHANGER_COLORED();
		sleep(200);
	}

	if (ScrollbarNameChangerPage == 3)
	{
		NAME_CHANGER_LINES();
		sleep(200);
	}

	if (ScrollbarNameChangerPage == 4)
	{
		//RAINBOW NAME
	}
}

#pragma endregion


#pragma endregion



#pragma region MAIN MENU


#pragma region Open Menu

void OpenMenu()
{
	if (LockOptions == 0)
	{
		char LOCK[] = { 0x01 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}
	else
	{
		char LOCK[] = { 0x00 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x53, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x66, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x75, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x75, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x73, 0x00, 0x63, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x75, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x75, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x48, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x75, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x54, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x75, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x64, 0x00, 0x69, 0x00, 0x74, 0x00, 0x73, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x80, 0x00, 0x00, 0xC5, 0x20, 0x00, 0x00, 0x42, 0x20 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	//Slide Animation Open
	for (float i = -400; i <= -90; i += 5)
	{
		*(float*)(0x31E71F2C) = i;
		sleep(5);
	}

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC3, 0x70, 0x00, 0x00, 0xC3, 0x30 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x42, 0xBF, 0x00, 0x00, 0x43, 0x45, 0x00 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));

	char SCROLLBARSELECT[] = { 0x43, 0x45 };
	write_process(Scrollbar_Toggle, &SCROLLBARSELECT, sizeof(SCROLLBARSELECT));


	MainMenu = true;

	ScrollBarMenu = 0;

	movename = true; //ENABLE NAME MOVING WHEN MENU IS OPENED
}

#pragma endregion


#pragma region Close Menu

void CloseMenu()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char TEXTS_POSITIONS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	write_process(Split_Text_Position, &TEXTS_POSITIONS, sizeof(TEXTS_POSITIONS));

	char SCROLLBAR[] = { 0x3F, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xD6, 0x00, 0x00, 0x43, 0xED, 0x00, 0x00, 0x46, 0x77 };
	write_process(ScrollBar_Shader, &SCROLLBAR, sizeof(SCROLLBAR));


	MainMenu = false;

	ScrollBarMenu = 0;

	movename = false; //DISABLE NAME MOVING WHEN MENU IS OPENED

	//SETTINGS BAR INSTRUCTIONS = DEFAULT 0//

	if (SettingsInstructions == 0)
	{
		BAR_INSTRUCTION_1(); //FIRST BAR INSTRUCTION
	}

	if (SettingsInstructions == 1)
	{
		BAR_INSTRUCTION_2(); //SECONDS BAR INSTRUCTION
	}

	if (SettingsInstructions == 2)
	{

	}
}

#pragma endregion


#pragma region Scroll Menu Down

void ScrollMenuDown()
{
	if (ScrollBarMenu == 6)//6 = max
	{
		ScrollBarMenu = 0;
	}
	else
	{
		ScrollBarMenu = ScrollBarMenu + 1;
	}

	if (ScrollBarMenu == 0)
	{
		char DOWN1[] = { 0x43, 0x45 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollBarMenu == 1)
	{
		char DOWN1[] = { 0x43, 0x5D };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollBarMenu == 2)
	{
		char DOWN2[] = { 0x43, 0x76 };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollBarMenu == 3)
	{
		char DOWN3[] = { 0x43, 0x87 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollBarMenu == 4)
	{
		char DOWN4[] = { 0x43, 0x93 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollBarMenu == 5)
	{
		char DOWN5[] = { 0x43, 0x9F };
		write_process(Scrollbar_Toggle, &DOWN5, sizeof(DOWN5));
	}

	if (ScrollBarMenu == 6)
	{
		char DOWN6[] = { 0x43, 0xAB };
		write_process(Scrollbar_Toggle, &DOWN6, sizeof(DOWN6));
	}

	sleep(50);
}


#pragma endregion


#pragma region Scroll Menu Up

void ScrollMenuUp()
{
	if (ScrollBarMenu == 0)
	{
		ScrollBarMenu = 6;//6 = max
	}
	else
	{
		ScrollBarMenu = ScrollBarMenu - 1;
	}

	if (ScrollBarMenu == 0)
	{
		char DOWN1[] = { 0x43, 0x45 };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollBarMenu == 1)
	{
		char DOWN1[] = { 0x43, 0x5D };
		write_process(Scrollbar_Toggle, &DOWN1, sizeof(DOWN1));
	}

	if (ScrollBarMenu == 2)
	{
		char DOWN2[] = { 0x43, 0x76 };
		write_process(Scrollbar_Toggle, &DOWN2, sizeof(DOWN2));
	}

	if (ScrollBarMenu == 3)
	{
		char DOWN3[] = { 0x43, 0x87 };
		write_process(Scrollbar_Toggle, &DOWN3, sizeof(DOWN3));
	}

	if (ScrollBarMenu == 4)
	{
		char DOWN4[] = { 0x43, 0x93 };
		write_process(Scrollbar_Toggle, &DOWN4, sizeof(DOWN4));
	}

	if (ScrollBarMenu == 5)
	{
		char DOWN5[] = { 0x43, 0x9F };
		write_process(Scrollbar_Toggle, &DOWN5, sizeof(DOWN5));
	}

	if (ScrollBarMenu == 6)
	{
		char DOWN6[] = { 0x43, 0xAB };
		write_process(Scrollbar_Toggle, &DOWN6, sizeof(DOWN6));
	}

	sleep(50);
}

#pragma endregion


#pragma region Select Options

void SelectMenuOption()
{
	if (ScrollBarMenu == 0) //HOST MENU
	{
		CloseMenu();
		sleep(50);
		OpenSelfPage();
	}

	if (ScrollBarMenu == 1) //VISION
	{

	}

	if (ScrollBarMenu == 2) //MISC
	{

	}

	if (ScrollBarMenu == 3) //NAME
	{
		CloseMenu();
		sleep(50);
		OpenNamePage();
	}

	if (ScrollBarMenu == 4) //Host PLAYERS
	{
		CloseMenu();
		sleep(50);
		OpenHostPage();
	}

	if (ScrollBarMenu == 5) //THEMES
	{
		CloseMenu();
		sleep(50);
		OpenThemePage();
	}

	if (ScrollBarMenu == 6) //CREDITS
	{
		CloseMenu();
		sleep(50);
		OpenCreditsPage();
	}
}

#pragma endregion


#pragma endregion



#pragma region FIRST LOAD SPRX

void FIRST_LOAD_SPRX()
{
	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char HUD_BAR_LOADING[] = { 0xC0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x20, 0x00, 0x00, 0x44, 0x0B, 0x00, 0x00, 0x42, 0xA4, 0x00 };
	write_process(Split_HUD, &HUD_BAR_LOADING, sizeof(HUD_BAR_LOADING));

	char POSITION_TEXTS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC1, 0xB0, 0x00, 0x00, 0x40, 0xDA };
	write_process(Split_Text_Position, &POSITION_TEXTS, sizeof(POSITION_TEXTS));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x50, 0x00, 0x72, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x69, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char LOCK[] = { 0x01 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char COLORS_PROGRESS_BAR[] = { 0x4F };
	write_process(0x31E71F64, &COLORS_PROGRESS_BAR, sizeof(COLORS_PROGRESS_BAR));

	char PROGRESS_BAR_1[] = { 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_1, sizeof(PROGRESS_BAR_1));

	sleep(2000);

	char PROGRESS_BAR_2[] = { 0x3E, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_2, sizeof(PROGRESS_BAR_2));

	sleep(4000);

	char PROGRESS_BAR_3[] = { 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_3, sizeof(PROGRESS_BAR_3));

	sleep(2000);

	char PROGRESS_BAR_4[] = { 0x3E, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_4, sizeof(PROGRESS_BAR_4));

	sleep(2000);

	char PROGRESS_BAR_5[] = { 0x3E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_5, sizeof(PROGRESS_BAR_5));

	sleep(4000);

	char PROGRESS_BAR_6[] = { 0x3E, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_6, sizeof(PROGRESS_BAR_6));

	sleep(2000);

	char PROGRESS_BAR_7[] = { 0x3F, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_7, sizeof(PROGRESS_BAR_7));

	sleep(4000);

	char PROGRESS_BAR_8[] = { 0x3F, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_8, sizeof(PROGRESS_BAR_8));

	sleep(6000);

	char PROGRESS_BAR_9[] = { 0x3F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_9, sizeof(PROGRESS_BAR_9));

	sleep(3000);

	char PROGRESS_BAR_10[] = { 0x3F, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_10, sizeof(PROGRESS_BAR_10));

	sleep(3000);

	char PROGRESS_BAR_11[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_11, sizeof(PROGRESS_BAR_11));

	sleep(1000);

	char POSITION_TEXTS1[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC1, 0xB0, 0x00, 0x00, 0x40, 0xDA };
	write_process(Split_Text_Position, &POSITION_TEXTS1, sizeof(POSITION_TEXTS1));

	char TEXTS2[] = { 0x43, 0x00, 0x68, 0x00, 0x65, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x57, 0x00, 0x68, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x73, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x2E, 0x00, 0x2E, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS2, sizeof(TEXTS2));

	char HUD_BAR_LOADING1[] = { 0xC0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x20, 0x00, 0x00, 0x43, 0xFC, 0x00, 0x00, 0x42, 0xA4, 0x00 };
	write_process(Split_HUD, &HUD_BAR_LOADING1, sizeof(HUD_BAR_LOADING1));


	//LOAD WHITELIST



	FirstLoadSPRX = FirstLoadSPRX + 1;

	sleep(5000);

	OpenMenu();

	char COLORS_PROGRESS_BAR1[] = { 0x0F };
	write_process(0x31E71F64, &COLORS_PROGRESS_BAR1, sizeof(COLORS_PROGRESS_BAR1));
}

#pragma endregion

#pragma region "LOOP FUNCTIONS"

void WALK_INVENTORY_ON()
{
	char MODS[] = { 0x00 };
	write_process(0x3000CF68, &MODS, sizeof(MODS));
}

void FAKE_LAGS_ON()
{
	char MODS[] = { 0x3F, 0x50 };
	write_process(0x00C202C8, &MODS, sizeof(MODS));

	char MODS1[] = { 0x3F, 0x51 };
	write_process(0x00C202C8, &MODS1, sizeof(MODS1));
}

void FAKE_LAGS_OFF()
{
	char MODS[] = { 0x3F, 0x50 };
	write_process(0x00C202C8, &MODS, sizeof(MODS));
}


#pragma endregion


#pragma endregion
